"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-big-calendar";
exports.ids = ["vendor-chunks/react-big-calendar"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-big-calendar/dist/react-big-calendar.esm.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-big-calendar/dist/react-big-calendar.esm.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Calendar: () => (/* binding */ Calendar$1),\n/* harmony export */   DateLocalizer: () => (/* binding */ DateLocalizer),\n/* harmony export */   Navigate: () => (/* binding */ navigate),\n/* harmony export */   Views: () => (/* binding */ views),\n/* harmony export */   components: () => (/* binding */ components),\n/* harmony export */   dateFnsLocalizer: () => (/* binding */ dateFnsLocalizer),\n/* harmony export */   dayjsLocalizer: () => (/* binding */ dayjs),\n/* harmony export */   globalizeLocalizer: () => (/* binding */ globalize),\n/* harmony export */   luxonLocalizer: () => (/* binding */ luxon),\n/* harmony export */   momentLocalizer: () => (/* binding */ moment),\n/* harmony export */   move: () => (/* binding */ moveDate)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/callSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/callSuper.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var uncontrollable__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! uncontrollable */ \"(ssr)/./node_modules/uncontrollable/lib/esm/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_44___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_44__);\n/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! invariant */ \"(ssr)/./node_modules/invariant/invariant.js\");\n/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(invariant__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var date_arithmetic__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-arithmetic */ \"(ssr)/./node_modules/date-arithmetic/index.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var lodash_chunk__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash/chunk */ \"(ssr)/./node_modules/lodash/chunk.js\");\n/* harmony import */ var lodash_chunk__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(lodash_chunk__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var dom_helpers_position__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! dom-helpers/position */ \"(ssr)/./node_modules/dom-helpers/esm/position.js\");\n/* harmony import */ var dom_helpers_animationFrame__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! dom-helpers/animationFrame */ \"(ssr)/./node_modules/dom-helpers/esm/animationFrame.js\");\n/* harmony import */ var react_overlays__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! react-overlays */ \"(ssr)/./node_modules/react-overlays/esm/Overlay.js\");\n/* harmony import */ var dom_helpers_offset__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! dom-helpers/offset */ \"(ssr)/./node_modules/dom-helpers/esm/offset.js\");\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! lodash/isEqual */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var dom_helpers_height__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! dom-helpers/height */ \"(ssr)/./node_modules/dom-helpers/esm/height.js\");\n/* harmony import */ var dom_helpers_querySelectorAll__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! dom-helpers/querySelectorAll */ \"(ssr)/./node_modules/dom-helpers/esm/querySelectorAll.js\");\n/* harmony import */ var dom_helpers_contains__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! dom-helpers/contains */ \"(ssr)/./node_modules/dom-helpers/esm/contains.js\");\n/* harmony import */ var dom_helpers_closest__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! dom-helpers/closest */ \"(ssr)/./node_modules/dom-helpers/esm/closest.js\");\n/* harmony import */ var dom_helpers_listen__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! dom-helpers/listen */ \"(ssr)/./node_modules/dom-helpers/esm/listen.js\");\n/* harmony import */ var lodash_findIndex__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! lodash/findIndex */ \"(ssr)/./node_modules/lodash/findIndex.js\");\n/* harmony import */ var lodash_findIndex__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(lodash_findIndex__WEBPACK_IMPORTED_MODULE_25__);\n/* harmony import */ var lodash_range__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! lodash/range */ \"(ssr)/./node_modules/lodash/range.js\");\n/* harmony import */ var lodash_range__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(lodash_range__WEBPACK_IMPORTED_MODULE_26__);\n/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\");\n/* harmony import */ var dom_helpers_width__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! dom-helpers/width */ \"(ssr)/./node_modules/dom-helpers/esm/width.js\");\n/* harmony import */ var lodash_sortBy__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! lodash/sortBy */ \"(ssr)/./node_modules/lodash/sortBy.js\");\n/* harmony import */ var lodash_sortBy__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(lodash_sortBy__WEBPACK_IMPORTED_MODULE_28__);\n/* harmony import */ var dom_helpers_scrollbarSize__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! dom-helpers/scrollbarSize */ \"(ssr)/./node_modules/dom-helpers/esm/scrollbarSize.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/toArray.js\");\n/* harmony import */ var dom_helpers_addClass__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! dom-helpers/addClass */ \"(ssr)/./node_modules/dom-helpers/esm/addClass.js\");\n/* harmony import */ var dom_helpers_removeClass__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! dom-helpers/removeClass */ \"(ssr)/./node_modules/dom-helpers/esm/removeClass.js\");\n/* harmony import */ var lodash_defaults__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! lodash/defaults */ \"(ssr)/./node_modules/lodash/defaults.js\");\n/* harmony import */ var lodash_defaults__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(lodash_defaults__WEBPACK_IMPORTED_MODULE_33__);\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! lodash/mapValues */ \"(ssr)/./node_modules/lodash/mapValues.js\");\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues__WEBPACK_IMPORTED_MODULE_34__);\n/* harmony import */ var lodash_omit__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! lodash/omit */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var lodash_omit__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(lodash_omit__WEBPACK_IMPORTED_MODULE_35__);\n/* harmony import */ var lodash_transform__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! lodash/transform */ \"(ssr)/./node_modules/lodash/transform.js\");\n/* harmony import */ var lodash_transform__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(lodash_transform__WEBPACK_IMPORTED_MODULE_36__);\n/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! dayjs/plugin/isBetween */ \"(ssr)/./node_modules/dayjs/plugin/isBetween.js\");\n/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_37__);\n/* harmony import */ var dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! dayjs/plugin/isSameOrAfter */ \"(ssr)/./node_modules/dayjs/plugin/isSameOrAfter.js\");\n/* harmony import */ var dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_38__);\n/* harmony import */ var dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! dayjs/plugin/isSameOrBefore */ \"(ssr)/./node_modules/dayjs/plugin/isSameOrBefore.js\");\n/* harmony import */ var dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_39__);\n/* harmony import */ var dayjs_plugin_localeData__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! dayjs/plugin/localeData */ \"(ssr)/./node_modules/dayjs/plugin/localeData.js\");\n/* harmony import */ var dayjs_plugin_localeData__WEBPACK_IMPORTED_MODULE_40___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_localeData__WEBPACK_IMPORTED_MODULE_40__);\n/* harmony import */ var dayjs_plugin_localizedFormat__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! dayjs/plugin/localizedFormat */ \"(ssr)/./node_modules/dayjs/plugin/localizedFormat.js\");\n/* harmony import */ var dayjs_plugin_localizedFormat__WEBPACK_IMPORTED_MODULE_41___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_localizedFormat__WEBPACK_IMPORTED_MODULE_41__);\n/* harmony import */ var dayjs_plugin_minMax__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! dayjs/plugin/minMax */ \"(ssr)/./node_modules/dayjs/plugin/minMax.js\");\n/* harmony import */ var dayjs_plugin_minMax__WEBPACK_IMPORTED_MODULE_42___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_minMax__WEBPACK_IMPORTED_MODULE_42__);\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! dayjs/plugin/utc */ \"(ssr)/./node_modules/dayjs/plugin/utc.js\");\n/* harmony import */ var dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_43___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_43__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction NoopWrapper(props) {\n    return props.children;\n}\nvar navigate = {\n    PREVIOUS: \"PREV\",\n    NEXT: \"NEXT\",\n    TODAY: \"TODAY\",\n    DATE: \"DATE\"\n};\nvar views = {\n    MONTH: \"month\",\n    WEEK: \"week\",\n    WORK_WEEK: \"work_week\",\n    DAY: \"day\",\n    AGENDA: \"agenda\"\n};\nvar viewNames$1 = Object.keys(views).map(function(k) {\n    return views[k];\n});\nprop_types__WEBPACK_IMPORTED_MODULE_44___default().oneOfType([\n    (prop_types__WEBPACK_IMPORTED_MODULE_44___default().string),\n    (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func)\n]);\n(prop_types__WEBPACK_IMPORTED_MODULE_44___default().any);\n(prop_types__WEBPACK_IMPORTED_MODULE_44___default().func);\n/**\n * accepts either an array of builtin view names:\n *\n * ```\n * views={['month', 'day', 'agenda']}\n * ```\n *\n * or an object hash of the view name and the component (or boolean for builtin)\n *\n * ```\n * views={{\n *   month: true,\n *   week: false,\n *   workweek: WorkWeekViewComponent,\n * }}\n * ```\n */ prop_types__WEBPACK_IMPORTED_MODULE_44___default().oneOfType([\n    prop_types__WEBPACK_IMPORTED_MODULE_44___default().arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_44___default().oneOf(viewNames$1)),\n    prop_types__WEBPACK_IMPORTED_MODULE_44___default().objectOf(function(prop, key) {\n        var isBuiltinView = viewNames$1.indexOf(key) !== -1 && typeof prop[key] === \"boolean\";\n        if (isBuiltinView) {\n            return null;\n        } else {\n            for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n                args[_key - 2] = arguments[_key];\n            }\n            return prop_types__WEBPACK_IMPORTED_MODULE_44___default().elementType.apply((prop_types__WEBPACK_IMPORTED_MODULE_44___default()), [\n                prop,\n                key\n            ].concat(args));\n        }\n    })\n]);\nprop_types__WEBPACK_IMPORTED_MODULE_44___default().oneOfType([\n    prop_types__WEBPACK_IMPORTED_MODULE_44___default().oneOf([\n        \"overlap\",\n        \"no-overlap\"\n    ]),\n    (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func)\n]);\n/* eslint no-fallthrough: off */ var MILLI = {\n    seconds: 1000,\n    minutes: 1000 * 60,\n    hours: 1000 * 60 * 60,\n    day: 1000 * 60 * 60 * 24\n};\nfunction firstVisibleDay(date, localizer) {\n    var firstOfMonth = date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf(date, \"month\");\n    return date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf(firstOfMonth, \"week\", localizer.startOfWeek());\n}\nfunction lastVisibleDay(date, localizer) {\n    var endOfMonth = date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.endOf(date, \"month\");\n    return date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.endOf(endOfMonth, \"week\", localizer.startOfWeek());\n}\nfunction visibleDays(date, localizer) {\n    var current = firstVisibleDay(date, localizer), last = lastVisibleDay(date, localizer), days = [];\n    while(date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.lte(current, last, \"day\")){\n        days.push(current);\n        current = date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.add(current, 1, \"day\");\n    }\n    return days;\n}\nfunction ceil(date, unit) {\n    var floor = date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf(date, unit);\n    return date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.eq(floor, date) ? floor : date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.add(floor, 1, unit);\n}\nfunction range(start, end) {\n    var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"day\";\n    var current = start, days = [];\n    while(date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.lte(current, end, unit)){\n        days.push(current);\n        current = date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.add(current, 1, unit);\n    }\n    return days;\n}\nfunction merge(date, time) {\n    if (time == null && date == null) return null;\n    if (time == null) time = new Date();\n    if (date == null) date = new Date();\n    date = date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf(date, \"day\");\n    date = date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.hours(date, date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.hours(time));\n    date = date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.minutes(date, date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.minutes(time));\n    date = date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.seconds(date, date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.seconds(time));\n    return date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.milliseconds(date, date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.milliseconds(time));\n}\nfunction isJustDate(date) {\n    return date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.hours(date) === 0 && date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.minutes(date) === 0 && date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.seconds(date) === 0 && date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.milliseconds(date) === 0;\n}\nfunction duration(start, end, unit, firstOfWeek) {\n    if (unit === \"day\") unit = \"date\";\n    return Math.abs(// eslint-disable-next-line import/namespace\n    date_arithmetic__WEBPACK_IMPORTED_MODULE_12__[unit](start, undefined, firstOfWeek) - // eslint-disable-next-line import/namespace\n    date_arithmetic__WEBPACK_IMPORTED_MODULE_12__[unit](end, undefined, firstOfWeek));\n}\nfunction diff(dateA, dateB, unit) {\n    if (!unit || unit === \"milliseconds\") return Math.abs(+dateA - +dateB);\n    // the .round() handles an edge case\n    // with DST where the total won't be exact\n    // since one day in the range may be shorter/longer by an hour\n    return Math.round(Math.abs(+date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf(dateA, unit) / MILLI[unit] - +date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf(dateB, unit) / MILLI[unit]));\n}\nvar localePropType = prop_types__WEBPACK_IMPORTED_MODULE_44___default().oneOfType([\n    (prop_types__WEBPACK_IMPORTED_MODULE_44___default().string),\n    (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func)\n]);\nfunction _format(localizer, formatter, value, format, culture) {\n    var result = typeof format === \"function\" ? format(value, culture, localizer) : formatter.call(localizer, value, format, culture);\n    invariant__WEBPACK_IMPORTED_MODULE_11___default()(result == null || typeof result === \"string\", \"`localizer format(..)` must return a string, null, or undefined\");\n    return result;\n}\n/**\n * This date conversion was moved out of TimeSlots.js, to\n * allow for localizer override\n * @param {Date} dt - The date to start from\n * @param {Number} minutesFromMidnight\n * @param {Number} offset\n * @returns {Date}\n */ function getSlotDate(dt, minutesFromMidnight, offset) {\n    return new Date(dt.getFullYear(), dt.getMonth(), dt.getDate(), 0, minutesFromMidnight + offset, 0, 0);\n}\nfunction getDstOffset(start, end) {\n    return start.getTimezoneOffset() - end.getTimezoneOffset();\n}\n// if the start is on a DST-changing day but *after* the moment of DST\n// transition we need to add those extra minutes to our minutesFromMidnight\nfunction getTotalMin(start, end) {\n    return diff(start, end, \"minutes\") + getDstOffset(start, end);\n}\nfunction getMinutesFromMidnight(start) {\n    var daystart = (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf)(start, \"day\");\n    return diff(daystart, start, \"minutes\") + getDstOffset(daystart, start);\n}\n// These two are used by DateSlotMetrics\nfunction continuesPrior(start, first) {\n    return (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.lt)(start, first, \"day\");\n}\nfunction continuesAfter(start, end, last) {\n    var singleDayDuration = (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.eq)(start, end, \"minutes\");\n    return singleDayDuration ? (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.gte)(end, last, \"minutes\") : (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.gt)(end, last, \"minutes\");\n}\nfunction daySpan(start, end) {\n    return duration(start, end, \"day\");\n}\n// These two are used by eventLevels\nfunction sortEvents$1(_ref) {\n    var _ref$evtA = _ref.evtA, aStart = _ref$evtA.start, aEnd = _ref$evtA.end, aAllDay = _ref$evtA.allDay, _ref$evtB = _ref.evtB, bStart = _ref$evtB.start, bEnd = _ref$evtB.end, bAllDay = _ref$evtB.allDay;\n    var startSort = +(0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf)(aStart, \"day\") - +(0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf)(bStart, \"day\");\n    var durA = daySpan(aStart, aEnd);\n    var durB = daySpan(bStart, bEnd);\n    return startSort || // sort by start Day first\n    durB - durA || // events spanning multiple days go first\n    !!bAllDay - !!aAllDay || // then allDay single day events\n    +aStart - +bStart || // then sort by start time\n    +aEnd - +bEnd // then sort by end time\n    ;\n}\nfunction inEventRange(_ref2) {\n    var _ref2$event = _ref2.event, start = _ref2$event.start, end = _ref2$event.end, _ref2$range = _ref2.range, rangeStart = _ref2$range.start, rangeEnd = _ref2$range.end;\n    var eStart = (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf)(start, \"day\");\n    var startsBeforeEnd = (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.lte)(eStart, rangeEnd, \"day\");\n    // when the event is zero duration we need to handle a bit differently\n    var sameMin = (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.neq)(eStart, end, \"minutes\");\n    var endsAfterStart = sameMin ? (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.gt)(end, rangeStart, \"minutes\") : (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.gte)(end, rangeStart, \"minutes\");\n    return startsBeforeEnd && endsAfterStart;\n}\n// other localizers treats 'day' and 'date' equality very differently, so we\n// abstract the change the 'localizer.eq(date1, date2, 'day') into this\n// new method, where they can be treated correctly by the localizer overrides\nfunction isSameDate(date1, date2) {\n    return (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.eq)(date1, date2, \"day\");\n}\nfunction startAndEndAreDateOnly(start, end) {\n    return isJustDate(start) && isJustDate(end);\n}\nvar DateLocalizer = /*#__PURE__*/ (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(function DateLocalizer(spec) {\n    var _this = this;\n    (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, DateLocalizer);\n    invariant__WEBPACK_IMPORTED_MODULE_11___default()(typeof spec.format === \"function\", \"date localizer `format(..)` must be a function\");\n    invariant__WEBPACK_IMPORTED_MODULE_11___default()(typeof spec.firstOfWeek === \"function\", \"date localizer `firstOfWeek(..)` must be a function\");\n    this.propType = spec.propType || localePropType;\n    this.formats = spec.formats;\n    this.format = function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return _format.apply(void 0, [\n            _this,\n            spec.format\n        ].concat(args));\n    };\n    // These date arithmetic methods can be overriden by the localizer\n    this.startOfWeek = spec.firstOfWeek;\n    this.merge = spec.merge || merge;\n    this.inRange = spec.inRange || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.inRange;\n    this.lt = spec.lt || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.lt;\n    this.lte = spec.lte || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.lte;\n    this.gt = spec.gt || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.gt;\n    this.gte = spec.gte || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.gte;\n    this.eq = spec.eq || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.eq;\n    this.neq = spec.neq || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.neq;\n    this.startOf = spec.startOf || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.startOf;\n    this.endOf = spec.endOf || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.endOf;\n    this.add = spec.add || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.add;\n    this.range = spec.range || range;\n    this.diff = spec.diff || diff;\n    this.ceil = spec.ceil || ceil;\n    this.min = spec.min || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.min;\n    this.max = spec.max || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.max;\n    this.minutes = spec.minutes || date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.minutes;\n    this.daySpan = spec.daySpan || daySpan;\n    this.firstVisibleDay = spec.firstVisibleDay || firstVisibleDay;\n    this.lastVisibleDay = spec.lastVisibleDay || lastVisibleDay;\n    this.visibleDays = spec.visibleDays || visibleDays;\n    this.getSlotDate = spec.getSlotDate || getSlotDate;\n    this.getTimezoneOffset = spec.getTimezoneOffset || function(value) {\n        return value.getTimezoneOffset();\n    };\n    this.getDstOffset = spec.getDstOffset || getDstOffset;\n    this.getTotalMin = spec.getTotalMin || getTotalMin;\n    this.getMinutesFromMidnight = spec.getMinutesFromMidnight || getMinutesFromMidnight;\n    this.continuesPrior = spec.continuesPrior || continuesPrior;\n    this.continuesAfter = spec.continuesAfter || continuesAfter;\n    this.sortEvents = spec.sortEvents || sortEvents$1;\n    this.inEventRange = spec.inEventRange || inEventRange;\n    this.isSameDate = spec.isSameDate || isSameDate;\n    this.startAndEndAreDateOnly = spec.startAndEndAreDateOnly || startAndEndAreDateOnly;\n    this.segmentOffset = spec.browserTZOffset ? spec.browserTZOffset() : 0;\n});\nfunction mergeWithDefaults(localizer, culture, formatOverrides, messages) {\n    var formats = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, localizer.formats), formatOverrides);\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, localizer), {}, {\n        messages: messages,\n        startOfWeek: function startOfWeek() {\n            return localizer.startOfWeek(culture);\n        },\n        format: function format(value, _format2) {\n            return localizer.format(value, formats[_format2] || _format2, culture);\n        }\n    });\n}\nvar Toolbar = /*#__PURE__*/ function(_React$Component) {\n    function Toolbar() {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, Toolbar);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, Toolbar, [].concat(args));\n        _this.navigate = function(action) {\n            _this.props.onNavigate(action);\n        };\n        _this.view = function(view) {\n            _this.props.onView(view);\n        };\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Toolbar, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Toolbar, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, messages = _this$props.localizer.messages, label = _this$props.label;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-toolbar\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", {\n                    className: \"rbc-btn-group\"\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"button\", {\n                    type: \"button\",\n                    onClick: this.navigate.bind(null, navigate.TODAY)\n                }, messages.today), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"button\", {\n                    type: \"button\",\n                    onClick: this.navigate.bind(null, navigate.PREVIOUS)\n                }, messages.previous), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"button\", {\n                    type: \"button\",\n                    onClick: this.navigate.bind(null, navigate.NEXT)\n                }, messages.next)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", {\n                    className: \"rbc-toolbar-label\"\n                }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", {\n                    className: \"rbc-btn-group\"\n                }, this.viewNamesGroup(messages)));\n            }\n        },\n        {\n            key: \"viewNamesGroup\",\n            value: function viewNamesGroup(messages) {\n                var _this2 = this;\n                var viewNames = this.props.views;\n                var view = this.props.view;\n                if (viewNames.length > 1) {\n                    return viewNames.map(function(name) {\n                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"button\", {\n                            type: \"button\",\n                            key: name,\n                            className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])({\n                                \"rbc-active\": view === name\n                            }),\n                            onClick: _this2.view.bind(null, name)\n                        }, messages[name]);\n                    });\n                }\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nfunction notify(handler, args) {\n    handler && handler.apply(null, [].concat(args));\n}\nvar defaultMessages = {\n    date: \"Date\",\n    time: \"Time\",\n    event: \"Event\",\n    allDay: \"All Day\",\n    week: \"Week\",\n    work_week: \"Work Week\",\n    day: \"Day\",\n    month: \"Month\",\n    previous: \"Back\",\n    next: \"Next\",\n    yesterday: \"Yesterday\",\n    tomorrow: \"Tomorrow\",\n    today: \"Today\",\n    agenda: \"Agenda\",\n    noEventsInRange: \"There are no events in this range.\",\n    showMore: function showMore(total) {\n        return \"+\".concat(total, \" more\");\n    }\n};\nfunction messages(msgs) {\n    return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, defaultMessages), msgs);\n}\nfunction useClickOutside(_ref) {\n    var ref = _ref.ref, callback = _ref.callback;\n    (0,react__WEBPACK_IMPORTED_MODULE_9__.useEffect)(function() {\n        var handleClickOutside = function handleClickOutside(e) {\n            if (ref.current && !ref.current.contains(e.target)) {\n                callback();\n            }\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return function() {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [\n        ref,\n        callback\n    ]);\n}\nvar _excluded$7 = [\n    \"style\",\n    \"className\",\n    \"event\",\n    \"selected\",\n    \"isAllDay\",\n    \"onSelect\",\n    \"onDoubleClick\",\n    \"onKeyPress\",\n    \"localizer\",\n    \"continuesPrior\",\n    \"continuesAfter\",\n    \"accessors\",\n    \"getters\",\n    \"children\",\n    \"components\",\n    \"slotStart\",\n    \"slotEnd\"\n];\nvar EventCell = /*#__PURE__*/ function(_React$Component) {\n    function EventCell() {\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, EventCell);\n        return (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, EventCell, arguments);\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(EventCell, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(EventCell, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, style = _this$props.style, className = _this$props.className, event = _this$props.event, selected = _this$props.selected, isAllDay = _this$props.isAllDay, onSelect = _this$props.onSelect, _onDoubleClick = _this$props.onDoubleClick, onKeyPress = _this$props.onKeyPress, localizer = _this$props.localizer, continuesPrior = _this$props.continuesPrior, continuesAfter = _this$props.continuesAfter, accessors = _this$props.accessors, getters = _this$props.getters, children = _this$props.children, _this$props$component = _this$props.components, Event = _this$props$component.event, EventWrapper = _this$props$component.eventWrapper, slotStart = _this$props.slotStart, slotEnd = _this$props.slotEnd, props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props, _excluded$7);\n                delete props.resizable;\n                var title = accessors.title(event);\n                var tooltip = accessors.tooltip(event);\n                var end = accessors.end(event);\n                var start = accessors.start(event);\n                var allDay = accessors.allDay(event);\n                var showAsAllDay = isAllDay || allDay || localizer.diff(start, localizer.ceil(end, \"day\"), \"day\") > 1;\n                var userProps = getters.eventProp(event, start, end, selected);\n                var content = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-event-content\",\n                    title: tooltip || undefined\n                }, Event ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(Event, {\n                    event: event,\n                    continuesPrior: continuesPrior,\n                    continuesAfter: continuesAfter,\n                    title: title,\n                    isAllDay: allDay,\n                    localizer: localizer,\n                    slotStart: slotStart,\n                    slotEnd: slotEnd\n                }) : title);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(EventWrapper, Object.assign({}, this.props, {\n                    type: \"date\"\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", Object.assign({}, props, {\n                    style: (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, userProps.style), style),\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-event\", className, userProps.className, {\n                        \"rbc-selected\": selected,\n                        \"rbc-event-allday\": showAsAllDay,\n                        \"rbc-event-continues-prior\": continuesPrior,\n                        \"rbc-event-continues-after\": continuesAfter\n                    }),\n                    onClick: function onClick(e) {\n                        return onSelect && onSelect(event, e);\n                    },\n                    onDoubleClick: function onDoubleClick(e) {\n                        return _onDoubleClick && _onDoubleClick(event, e);\n                    },\n                    onKeyDown: function onKeyDown(e) {\n                        return onKeyPress && onKeyPress(event, e);\n                    }\n                }), typeof children === \"function\" ? children(content) : content));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nfunction isSelected(event, selected) {\n    if (!event || selected == null) return false;\n    return lodash_isEqual__WEBPACK_IMPORTED_MODULE_19___default()(event, selected);\n}\nfunction slotWidth(rowBox, slots) {\n    var rowWidth = rowBox.right - rowBox.left;\n    var cellWidth = rowWidth / slots;\n    return cellWidth;\n}\nfunction getSlotAtX(rowBox, x, rtl, slots) {\n    var cellWidth = slotWidth(rowBox, slots);\n    return rtl ? slots - 1 - Math.floor((x - rowBox.left) / cellWidth) : Math.floor((x - rowBox.left) / cellWidth);\n}\nfunction pointInBox(box, _ref) {\n    var x = _ref.x, y = _ref.y;\n    return y >= box.top && y <= box.bottom && x >= box.left && x <= box.right;\n}\nfunction dateCellSelection(start, rowBox, box, slots, rtl) {\n    var startIdx = -1;\n    var endIdx = -1;\n    var lastSlotIdx = slots - 1;\n    var cellWidth = slotWidth(rowBox, slots);\n    // cell under the mouse\n    var currentSlot = getSlotAtX(rowBox, box.x, rtl, slots);\n    // Identify row as either the initial row\n    // or the row under the current mouse point\n    var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y;\n    var isStartRow = rowBox.top < start.y && rowBox.bottom > start.y;\n    // this row's position relative to the start point\n    var isAboveStart = start.y > rowBox.bottom;\n    var isBelowStart = rowBox.top > start.y;\n    var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom;\n    // this row is between the current and start rows, so entirely selected\n    if (isBetween) {\n        startIdx = 0;\n        endIdx = lastSlotIdx;\n    }\n    if (isCurrentRow) {\n        if (isBelowStart) {\n            startIdx = 0;\n            endIdx = currentSlot;\n        } else if (isAboveStart) {\n            startIdx = currentSlot;\n            endIdx = lastSlotIdx;\n        }\n    }\n    if (isStartRow) {\n        // select the cell under the initial point\n        startIdx = endIdx = rtl ? lastSlotIdx - Math.floor((start.x - rowBox.left) / cellWidth) : Math.floor((start.x - rowBox.left) / cellWidth);\n        if (isCurrentRow) {\n            if (currentSlot < startIdx) startIdx = currentSlot;\n            else endIdx = currentSlot; //select current range\n        } else if (start.y < box.y) {\n            // the current row is below start row\n            // select cells to the right of the start cell\n            endIdx = lastSlotIdx;\n        } else {\n            // select cells to the left of the start cell\n            startIdx = 0;\n        }\n    }\n    return {\n        startIdx: startIdx,\n        endIdx: endIdx\n    };\n}\n/**\n * Changes to react-overlays cause issue with auto positioning,\n * so we need to manually calculate the position of the popper,\n * and constrain it to the Month container.\n */ function getPosition(_ref) {\n    var target = _ref.target, offset = _ref.offset, container = _ref.container, box = _ref.box;\n    var _getOffset = (0,dom_helpers_offset__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(target), top = _getOffset.top, left = _getOffset.left, width = _getOffset.width, height = _getOffset.height;\n    var _getOffset2 = (0,dom_helpers_offset__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(container), cTop = _getOffset2.top, cLeft = _getOffset2.left, cWidth = _getOffset2.width, cHeight = _getOffset2.height;\n    var _getOffset3 = (0,dom_helpers_offset__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(box), bWidth = _getOffset3.width, bHeight = _getOffset3.height;\n    var viewBottom = cTop + cHeight;\n    var viewRight = cLeft + cWidth;\n    var bottom = top + bHeight;\n    var right = left + bWidth;\n    var x = offset.x, y = offset.y;\n    var topOffset = bottom > viewBottom ? top - bHeight - y : top + y + height;\n    var leftOffset = right > viewRight ? left + x - bWidth + width : left + x;\n    return {\n        topOffset: topOffset,\n        leftOffset: leftOffset\n    };\n}\nfunction Pop(_ref2) {\n    var containerRef = _ref2.containerRef, accessors = _ref2.accessors, getters = _ref2.getters, selected = _ref2.selected, components = _ref2.components, localizer = _ref2.localizer, position = _ref2.position, show = _ref2.show, events = _ref2.events, slotStart = _ref2.slotStart, slotEnd = _ref2.slotEnd, onSelect = _ref2.onSelect, onDoubleClick = _ref2.onDoubleClick, onKeyPress = _ref2.onKeyPress, handleDragStart = _ref2.handleDragStart, popperRef = _ref2.popperRef, target = _ref2.target, offset = _ref2.offset;\n    useClickOutside({\n        ref: popperRef,\n        callback: show\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_9__.useLayoutEffect)(function() {\n        var _getPosition = getPosition({\n            target: target,\n            offset: offset,\n            container: containerRef.current,\n            box: popperRef.current\n        }), topOffset = _getPosition.topOffset, leftOffset = _getPosition.leftOffset;\n        popperRef.current.style.top = \"\".concat(topOffset, \"px\");\n        popperRef.current.style.left = \"\".concat(leftOffset, \"px\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        offset.x,\n        offset.y,\n        target\n    ]);\n    var width = position.width;\n    var style = {\n        minWidth: width + width / 2\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n        style: style,\n        className: \"rbc-overlay\",\n        ref: popperRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n        className: \"rbc-overlay-header\"\n    }, localizer.format(slotStart, \"dayHeaderFormat\")), events.map(function(event, idx) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(EventCell, {\n            key: idx,\n            type: \"popup\",\n            localizer: localizer,\n            event: event,\n            getters: getters,\n            onSelect: onSelect,\n            accessors: accessors,\n            components: components,\n            onDoubleClick: onDoubleClick,\n            onKeyPress: onKeyPress,\n            continuesPrior: localizer.lt(accessors.end(event), slotStart, \"day\"),\n            continuesAfter: localizer.gte(accessors.start(event), slotEnd, \"day\"),\n            slotStart: slotStart,\n            slotEnd: slotEnd,\n            selected: isSelected(event, selected),\n            draggable: true,\n            onDragStart: function onDragStart() {\n                return handleDragStart(event);\n            },\n            onDragEnd: function onDragEnd() {\n                return show();\n            }\n        });\n    }));\n}\nvar Popup = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().forwardRef(function(props, ref) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(Pop, Object.assign({}, props, {\n        popperRef: ref\n    }));\n});\nPopup.propTypes = {\n    accessors: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n    getters: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n    selected: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object),\n    components: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n    localizer: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n    position: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n    show: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func).isRequired,\n    events: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().array).isRequired,\n    slotStart: prop_types__WEBPACK_IMPORTED_MODULE_44___default().instanceOf(Date).isRequired,\n    slotEnd: prop_types__WEBPACK_IMPORTED_MODULE_44___default().instanceOf(Date),\n    onSelect: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n    onDoubleClick: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n    onKeyPress: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n    handleDragStart: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n    style: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object),\n    offset: prop_types__WEBPACK_IMPORTED_MODULE_44___default().shape({\n        x: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().number),\n        y: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().number)\n    })\n};\nfunction CalOverlay(_ref) {\n    var containerRef = _ref.containerRef, _ref$popupOffset = _ref.popupOffset, popupOffset = _ref$popupOffset === void 0 ? 5 : _ref$popupOffset, overlay = _ref.overlay, accessors = _ref.accessors, localizer = _ref.localizer, components = _ref.components, getters = _ref.getters, selected = _ref.selected, handleSelectEvent = _ref.handleSelectEvent, handleDoubleClickEvent = _ref.handleDoubleClickEvent, handleKeyPressEvent = _ref.handleKeyPressEvent, handleDragStart = _ref.handleDragStart, onHide = _ref.onHide, overlayDisplay = _ref.overlayDisplay;\n    var popperRef = (0,react__WEBPACK_IMPORTED_MODULE_9__.useRef)(null);\n    if (!overlay.position) return null;\n    var offset = popupOffset;\n    if (!isNaN(popupOffset)) {\n        offset = {\n            x: popupOffset,\n            y: popupOffset\n        };\n    }\n    var position = overlay.position, events = overlay.events, date = overlay.date, end = overlay.end;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(react_overlays__WEBPACK_IMPORTED_MODULE_45__[\"default\"], {\n        rootClose: true,\n        flip: true,\n        show: true,\n        placement: \"bottom\",\n        onHide: onHide,\n        target: overlay.target\n    }, function(_ref2) {\n        var props = _ref2.props;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(Popup, Object.assign({}, props, {\n            containerRef: containerRef,\n            ref: popperRef,\n            target: overlay.target,\n            offset: offset,\n            accessors: accessors,\n            getters: getters,\n            selected: selected,\n            components: components,\n            localizer: localizer,\n            position: position,\n            show: overlayDisplay,\n            events: events,\n            slotStart: date,\n            slotEnd: end,\n            onSelect: handleSelectEvent,\n            onDoubleClick: handleDoubleClickEvent,\n            onKeyPress: handleKeyPressEvent,\n            handleDragStart: handleDragStart\n        }));\n    });\n}\nvar PopOverlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().forwardRef(function(props, ref) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(CalOverlay, Object.assign({}, props, {\n        containerRef: ref\n    }));\n});\nPopOverlay.propTypes = {\n    popupOffset: prop_types__WEBPACK_IMPORTED_MODULE_44___default().oneOfType([\n        (prop_types__WEBPACK_IMPORTED_MODULE_44___default().number),\n        prop_types__WEBPACK_IMPORTED_MODULE_44___default().shape({\n            x: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().number),\n            y: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().number)\n        })\n    ]),\n    overlay: prop_types__WEBPACK_IMPORTED_MODULE_44___default().shape({\n        position: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object),\n        events: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().array),\n        date: prop_types__WEBPACK_IMPORTED_MODULE_44___default().instanceOf(Date),\n        end: prop_types__WEBPACK_IMPORTED_MODULE_44___default().instanceOf(Date)\n    }),\n    accessors: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n    localizer: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n    components: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n    getters: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n    selected: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object),\n    handleSelectEvent: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n    handleDoubleClickEvent: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n    handleKeyPressEvent: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n    handleDragStart: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n    onHide: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n    overlayDisplay: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func)\n};\nfunction addEventListener(type, handler) {\n    var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n    return (0,dom_helpers_listen__WEBPACK_IMPORTED_MODULE_24__[\"default\"])(target, type, handler, {\n        passive: false\n    });\n}\nfunction isOverContainer(container, x, y) {\n    return !container || (0,dom_helpers_contains__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(container, document.elementFromPoint(x, y));\n}\nfunction getEventNodeFromPoint(node, _ref) {\n    var clientX = _ref.clientX, clientY = _ref.clientY;\n    var target = document.elementFromPoint(clientX, clientY);\n    return (0,dom_helpers_closest__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(target, \".rbc-event\", node);\n}\nfunction getShowMoreNodeFromPoint(node, _ref2) {\n    var clientX = _ref2.clientX, clientY = _ref2.clientY;\n    var target = document.elementFromPoint(clientX, clientY);\n    return (0,dom_helpers_closest__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(target, \".rbc-show-more\", node);\n}\nfunction isEvent(node, bounds) {\n    return !!getEventNodeFromPoint(node, bounds);\n}\nfunction isShowMore(node, bounds) {\n    return !!getShowMoreNodeFromPoint(node, bounds);\n}\nfunction getEventCoordinates(e) {\n    var target = e;\n    if (e.touches && e.touches.length) {\n        target = e.touches[0];\n    }\n    return {\n        clientX: target.clientX,\n        clientY: target.clientY,\n        pageX: target.pageX,\n        pageY: target.pageY\n    };\n}\nvar clickTolerance = 5;\nvar clickInterval = 250;\nvar Selection = /*#__PURE__*/ function() {\n    function Selection(node) {\n        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref3$global = _ref3.global, global = _ref3$global === void 0 ? false : _ref3$global, _ref3$longPressThresh = _ref3.longPressThreshold, longPressThreshold = _ref3$longPressThresh === void 0 ? 250 : _ref3$longPressThresh, _ref3$validContainers = _ref3.validContainers, validContainers = _ref3$validContainers === void 0 ? [] : _ref3$validContainers;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, Selection);\n        this._initialEvent = null;\n        this.selecting = false;\n        this.isDetached = false;\n        this.container = node;\n        this.globalMouse = !node || global;\n        this.longPressThreshold = longPressThreshold;\n        this.validContainers = validContainers;\n        this._listeners = Object.create(null);\n        this._handleInitialEvent = this._handleInitialEvent.bind(this);\n        this._handleMoveEvent = this._handleMoveEvent.bind(this);\n        this._handleTerminatingEvent = this._handleTerminatingEvent.bind(this);\n        this._keyListener = this._keyListener.bind(this);\n        this._dropFromOutsideListener = this._dropFromOutsideListener.bind(this);\n        this._dragOverFromOutsideListener = this._dragOverFromOutsideListener.bind(this);\n        // Fixes an iOS 10 bug where scrolling could not be prevented on the window.\n        // https://github.com/metafizzy/flickity/issues/457#issuecomment-254501356\n        this._removeTouchMoveWindowListener = addEventListener(\"touchmove\", function() {}, window);\n        this._removeKeyDownListener = addEventListener(\"keydown\", this._keyListener);\n        this._removeKeyUpListener = addEventListener(\"keyup\", this._keyListener);\n        this._removeDropFromOutsideListener = addEventListener(\"drop\", this._dropFromOutsideListener);\n        this._removeDragOverFromOutsideListener = addEventListener(\"dragover\", this._dragOverFromOutsideListener);\n        this._addInitialEventListener();\n    }\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Selection, [\n        {\n            key: \"on\",\n            value: function on(type, handler) {\n                var handlers = this._listeners[type] || (this._listeners[type] = []);\n                handlers.push(handler);\n                return {\n                    remove: function remove() {\n                        var idx = handlers.indexOf(handler);\n                        if (idx !== -1) handlers.splice(idx, 1);\n                    }\n                };\n            }\n        },\n        {\n            key: \"emit\",\n            value: function emit(type) {\n                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    args[_key - 1] = arguments[_key];\n                }\n                var result;\n                var handlers = this._listeners[type] || [];\n                handlers.forEach(function(fn) {\n                    if (result === undefined) result = fn.apply(void 0, args);\n                });\n                return result;\n            }\n        },\n        {\n            key: \"teardown\",\n            value: function teardown() {\n                this._initialEvent = null;\n                this._initialEventData = null;\n                this._selectRect = null;\n                this.selecting = false;\n                this._lastClickData = null;\n                this.isDetached = true;\n                this._listeners = Object.create(null);\n                this._removeTouchMoveWindowListener && this._removeTouchMoveWindowListener();\n                this._removeInitialEventListener && this._removeInitialEventListener();\n                this._removeEndListener && this._removeEndListener();\n                this._onEscListener && this._onEscListener();\n                this._removeMoveListener && this._removeMoveListener();\n                this._removeKeyUpListener && this._removeKeyUpListener();\n                this._removeKeyDownListener && this._removeKeyDownListener();\n                this._removeDropFromOutsideListener && this._removeDropFromOutsideListener();\n                this._removeDragOverFromOutsideListener && this._removeDragOverFromOutsideListener();\n            }\n        },\n        {\n            key: \"isSelected\",\n            value: function isSelected(node) {\n                var box = this._selectRect;\n                if (!box || !this.selecting) return false;\n                return objectsCollide(box, getBoundsForNode(node));\n            }\n        },\n        {\n            key: \"filter\",\n            value: function filter(items) {\n                var box = this._selectRect;\n                //not selecting\n                if (!box || !this.selecting) return [];\n                return items.filter(this.isSelected, this);\n            }\n        },\n        {\n            key: \"_addLongPressListener\",\n            value: function _addLongPressListener(handler, initialEvent) {\n                var _this = this;\n                var timer = null;\n                var removeTouchMoveListener = null;\n                var removeTouchEndListener = null;\n                var handleTouchStart = function handleTouchStart(initialEvent) {\n                    timer = setTimeout(function() {\n                        cleanup();\n                        handler(initialEvent);\n                    }, _this.longPressThreshold);\n                    removeTouchMoveListener = addEventListener(\"touchmove\", function() {\n                        return cleanup();\n                    });\n                    removeTouchEndListener = addEventListener(\"touchend\", function() {\n                        return cleanup();\n                    });\n                };\n                var removeTouchStartListener = addEventListener(\"touchstart\", handleTouchStart);\n                var cleanup = function cleanup() {\n                    if (timer) {\n                        clearTimeout(timer);\n                    }\n                    if (removeTouchMoveListener) {\n                        removeTouchMoveListener();\n                    }\n                    if (removeTouchEndListener) {\n                        removeTouchEndListener();\n                    }\n                    timer = null;\n                    removeTouchMoveListener = null;\n                    removeTouchEndListener = null;\n                };\n                if (initialEvent) {\n                    handleTouchStart(initialEvent);\n                }\n                return function() {\n                    cleanup();\n                    removeTouchStartListener();\n                };\n            }\n        },\n        {\n            key: \"_addInitialEventListener\",\n            value: function _addInitialEventListener() {\n                var _this2 = this;\n                var removeMouseDownListener = addEventListener(\"mousedown\", function(e) {\n                    _this2._removeInitialEventListener();\n                    _this2._handleInitialEvent(e);\n                    _this2._removeInitialEventListener = addEventListener(\"mousedown\", _this2._handleInitialEvent);\n                });\n                var removeTouchStartListener = addEventListener(\"touchstart\", function(e) {\n                    _this2._removeInitialEventListener();\n                    _this2._removeInitialEventListener = _this2._addLongPressListener(_this2._handleInitialEvent, e);\n                });\n                this._removeInitialEventListener = function() {\n                    removeMouseDownListener();\n                    removeTouchStartListener();\n                };\n            }\n        },\n        {\n            key: \"_dropFromOutsideListener\",\n            value: function _dropFromOutsideListener(e) {\n                var _getEventCoordinates = getEventCoordinates(e), pageX = _getEventCoordinates.pageX, pageY = _getEventCoordinates.pageY, clientX = _getEventCoordinates.clientX, clientY = _getEventCoordinates.clientY;\n                this.emit(\"dropFromOutside\", {\n                    x: pageX,\n                    y: pageY,\n                    clientX: clientX,\n                    clientY: clientY\n                });\n                e.preventDefault();\n            }\n        },\n        {\n            key: \"_dragOverFromOutsideListener\",\n            value: function _dragOverFromOutsideListener(e) {\n                var _getEventCoordinates2 = getEventCoordinates(e), pageX = _getEventCoordinates2.pageX, pageY = _getEventCoordinates2.pageY, clientX = _getEventCoordinates2.clientX, clientY = _getEventCoordinates2.clientY;\n                this.emit(\"dragOverFromOutside\", {\n                    x: pageX,\n                    y: pageY,\n                    clientX: clientX,\n                    clientY: clientY\n                });\n                e.preventDefault();\n            }\n        },\n        {\n            key: \"_handleInitialEvent\",\n            value: function _handleInitialEvent(e) {\n                this._initialEvent = e;\n                if (this.isDetached) {\n                    return;\n                }\n                var _getEventCoordinates3 = getEventCoordinates(e), clientX = _getEventCoordinates3.clientX, clientY = _getEventCoordinates3.clientY, pageX = _getEventCoordinates3.pageX, pageY = _getEventCoordinates3.pageY;\n                var node = this.container(), collides, offsetData;\n                // Right clicks\n                if (e.which === 3 || e.button === 2 || !isOverContainer(node, clientX, clientY)) return;\n                if (!this.globalMouse && node && !(0,dom_helpers_contains__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(node, e.target)) {\n                    var _normalizeDistance = normalizeDistance(0), top = _normalizeDistance.top, left = _normalizeDistance.left, bottom = _normalizeDistance.bottom, right = _normalizeDistance.right;\n                    offsetData = getBoundsForNode(node);\n                    collides = objectsCollide({\n                        top: offsetData.top - top,\n                        left: offsetData.left - left,\n                        bottom: offsetData.bottom + bottom,\n                        right: offsetData.right + right\n                    }, {\n                        top: pageY,\n                        left: pageX\n                    });\n                    if (!collides) return;\n                }\n                var result = this.emit(\"beforeSelect\", this._initialEventData = {\n                    isTouch: /^touch/.test(e.type),\n                    x: pageX,\n                    y: pageY,\n                    clientX: clientX,\n                    clientY: clientY\n                });\n                if (result === false) return;\n                switch(e.type){\n                    case \"mousedown\":\n                        this._removeEndListener = addEventListener(\"mouseup\", this._handleTerminatingEvent);\n                        this._onEscListener = addEventListener(\"keydown\", this._handleTerminatingEvent);\n                        this._removeMoveListener = addEventListener(\"mousemove\", this._handleMoveEvent);\n                        break;\n                    case \"touchstart\":\n                        this._handleMoveEvent(e);\n                        this._removeEndListener = addEventListener(\"touchend\", this._handleTerminatingEvent);\n                        this._removeMoveListener = addEventListener(\"touchmove\", this._handleMoveEvent);\n                        break;\n                }\n            }\n        },\n        {\n            key: \"_isWithinValidContainer\",\n            value: function _isWithinValidContainer(e) {\n                var eventTarget = e.target;\n                var containers = this.validContainers;\n                if (!containers || !containers.length || !eventTarget) {\n                    return true;\n                }\n                return containers.some(function(target) {\n                    return !!eventTarget.closest(target);\n                });\n            }\n        },\n        {\n            key: \"_handleTerminatingEvent\",\n            value: function _handleTerminatingEvent(e) {\n                var selecting = this.selecting;\n                var bounds = this._selectRect;\n                // If it's not in selecting state, it's a click event\n                if (!selecting && e.type.includes(\"key\")) {\n                    e = this._initialEvent;\n                }\n                this.selecting = false;\n                this._removeEndListener && this._removeEndListener();\n                this._removeMoveListener && this._removeMoveListener();\n                this._selectRect = null;\n                this._initialEvent = null;\n                this._initialEventData = null;\n                if (!e) return;\n                var inRoot = !this.container || (0,dom_helpers_contains__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(this.container(), e.target);\n                var isWithinValidContainer = this._isWithinValidContainer(e);\n                if (e.key === \"Escape\" || !isWithinValidContainer) {\n                    return this.emit(\"reset\");\n                }\n                if (!selecting && inRoot) {\n                    return this._handleClickEvent(e);\n                }\n                // User drag-clicked in the Selectable area\n                if (selecting) return this.emit(\"select\", bounds);\n                return this.emit(\"reset\");\n            }\n        },\n        {\n            key: \"_handleClickEvent\",\n            value: function _handleClickEvent(e) {\n                var _getEventCoordinates4 = getEventCoordinates(e), pageX = _getEventCoordinates4.pageX, pageY = _getEventCoordinates4.pageY, clientX = _getEventCoordinates4.clientX, clientY = _getEventCoordinates4.clientY;\n                var now = new Date().getTime();\n                if (this._lastClickData && now - this._lastClickData.timestamp < clickInterval) {\n                    // Double click event\n                    this._lastClickData = null;\n                    return this.emit(\"doubleClick\", {\n                        x: pageX,\n                        y: pageY,\n                        clientX: clientX,\n                        clientY: clientY\n                    });\n                }\n                // Click event\n                this._lastClickData = {\n                    timestamp: now\n                };\n                return this.emit(\"click\", {\n                    x: pageX,\n                    y: pageY,\n                    clientX: clientX,\n                    clientY: clientY\n                });\n            }\n        },\n        {\n            key: \"_handleMoveEvent\",\n            value: function _handleMoveEvent(e) {\n                if (this._initialEventData === null || this.isDetached) {\n                    return;\n                }\n                var _this$_initialEventDa = this._initialEventData, x = _this$_initialEventDa.x, y = _this$_initialEventDa.y;\n                var _getEventCoordinates5 = getEventCoordinates(e), pageX = _getEventCoordinates5.pageX, pageY = _getEventCoordinates5.pageY;\n                var w = Math.abs(x - pageX);\n                var h = Math.abs(y - pageY);\n                var left = Math.min(pageX, x), top = Math.min(pageY, y), old = this.selecting;\n                var click = this.isClick(pageX, pageY);\n                // Prevent emitting selectStart event until mouse is moved.\n                // in Chrome on Windows, mouseMove event may be fired just after mouseDown event.\n                if (click && !old && !(w || h)) {\n                    return;\n                }\n                if (!old && !click) {\n                    this.emit(\"selectStart\", this._initialEventData);\n                }\n                if (!click) {\n                    this.selecting = true;\n                    this._selectRect = {\n                        top: top,\n                        left: left,\n                        x: pageX,\n                        y: pageY,\n                        right: left + w,\n                        bottom: top + h\n                    };\n                    this.emit(\"selecting\", this._selectRect);\n                }\n                e.preventDefault();\n            }\n        },\n        {\n            key: \"_keyListener\",\n            value: function _keyListener(e) {\n                this.ctrl = e.metaKey || e.ctrlKey;\n            }\n        },\n        {\n            key: \"isClick\",\n            value: function isClick(pageX, pageY) {\n                var _this$_initialEventDa2 = this._initialEventData, x = _this$_initialEventDa2.x, y = _this$_initialEventDa2.y, isTouch = _this$_initialEventDa2.isTouch;\n                return !isTouch && Math.abs(pageX - x) <= clickTolerance && Math.abs(pageY - y) <= clickTolerance;\n            }\n        }\n    ]);\n}();\n/**\n * Resolve the disance prop from either an Int or an Object\n * @return {Object}\n */ function normalizeDistance() {\n    var distance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if ((0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(distance) !== \"object\") distance = {\n        top: distance,\n        left: distance,\n        right: distance,\n        bottom: distance\n    };\n    return distance;\n}\n/**\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\n * properties, determine if they collide.\n * @param  {Object|HTMLElement} a\n * @param  {Object|HTMLElement} b\n * @return {bool}\n */ function objectsCollide(nodeA, nodeB) {\n    var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var _getBoundsForNode = getBoundsForNode(nodeA), aTop = _getBoundsForNode.top, aLeft = _getBoundsForNode.left, _getBoundsForNode$rig = _getBoundsForNode.right, aRight = _getBoundsForNode$rig === void 0 ? aLeft : _getBoundsForNode$rig, _getBoundsForNode$bot = _getBoundsForNode.bottom, aBottom = _getBoundsForNode$bot === void 0 ? aTop : _getBoundsForNode$bot;\n    var _getBoundsForNode2 = getBoundsForNode(nodeB), bTop = _getBoundsForNode2.top, bLeft = _getBoundsForNode2.left, _getBoundsForNode2$ri = _getBoundsForNode2.right, bRight = _getBoundsForNode2$ri === void 0 ? bLeft : _getBoundsForNode2$ri, _getBoundsForNode2$bo = _getBoundsForNode2.bottom, bBottom = _getBoundsForNode2$bo === void 0 ? bTop : _getBoundsForNode2$bo;\n    return !// 'a' bottom doesn't touch 'b' top\n    (aBottom - tolerance < bTop || // 'a' top doesn't touch 'b' bottom\n    aTop + tolerance > bBottom || // 'a' right doesn't touch 'b' left\n    aRight - tolerance < bLeft || // 'a' left doesn't touch 'b' right\n    aLeft + tolerance > bRight);\n}\n/**\n * Given a node, get everything needed to calculate its boundaries\n * @param  {HTMLElement} node\n * @return {Object}\n */ function getBoundsForNode(node) {\n    if (!node.getBoundingClientRect) return node;\n    var rect = node.getBoundingClientRect(), left = rect.left + pageOffset(\"left\"), top = rect.top + pageOffset(\"top\");\n    return {\n        top: top,\n        left: left,\n        right: (node.offsetWidth || 0) + left,\n        bottom: (node.offsetHeight || 0) + top\n    };\n}\nfunction pageOffset(dir) {\n    if (dir === \"left\") return window.pageXOffset || document.body.scrollLeft || 0;\n    if (dir === \"top\") return window.pageYOffset || document.body.scrollTop || 0;\n}\nvar BackgroundCells = /*#__PURE__*/ function(_React$Component) {\n    function BackgroundCells(props, context) {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, BackgroundCells);\n        _this = (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, BackgroundCells, [\n            props,\n            context\n        ]);\n        _this.state = {\n            selecting: false\n        };\n        _this.containerRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_9__.createRef)();\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(BackgroundCells, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(BackgroundCells, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.selectable && this._selectable();\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this._teardownSelectable();\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                if (!prevProps.selectable && this.props.selectable) this._selectable();\n                if (prevProps.selectable && !this.props.selectable) this._teardownSelectable();\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, range = _this$props.range, getNow = _this$props.getNow, getters = _this$props.getters, currentDate = _this$props.date, Wrapper = _this$props.components.dateCellWrapper, localizer = _this$props.localizer;\n                var _this$state = this.state, selecting = _this$state.selecting, startIdx = _this$state.startIdx, endIdx = _this$state.endIdx;\n                var current = getNow();\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-row-bg\",\n                    ref: this.containerRef\n                }, range.map(function(date, index) {\n                    var selected = selecting && index >= startIdx && index <= endIdx;\n                    var _getters$dayProp = getters.dayProp(date), className = _getters$dayProp.className, style = _getters$dayProp.style;\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(Wrapper, {\n                        key: index,\n                        value: date,\n                        range: range\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        style: style,\n                        className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-day-bg\", className, selected && \"rbc-selected-cell\", localizer.isSameDate(date, current) && \"rbc-today\", currentDate && localizer.neq(currentDate, date, \"month\") && \"rbc-off-range-bg\")\n                    }));\n                }));\n            }\n        },\n        {\n            key: \"_selectable\",\n            value: function _selectable() {\n                var _this2 = this;\n                var node = this.containerRef.current;\n                var selector = this._selector = new Selection(this.props.container, {\n                    longPressThreshold: this.props.longPressThreshold\n                });\n                var selectorClicksHandler = function selectorClicksHandler(point, actionType) {\n                    if (!isEvent(node, point) && !isShowMore(node, point)) {\n                        var rowBox = getBoundsForNode(node);\n                        var _this2$props = _this2.props, range = _this2$props.range, rtl = _this2$props.rtl;\n                        if (pointInBox(rowBox, point)) {\n                            var currentCell = getSlotAtX(rowBox, point.x, rtl, range.length);\n                            _this2._selectSlot({\n                                startIdx: currentCell,\n                                endIdx: currentCell,\n                                action: actionType,\n                                box: point\n                            });\n                        }\n                    }\n                    _this2._initial = {};\n                    _this2.setState({\n                        selecting: false\n                    });\n                };\n                selector.on(\"selecting\", function(box) {\n                    var _this2$props2 = _this2.props, range = _this2$props2.range, rtl = _this2$props2.rtl;\n                    var startIdx = -1;\n                    var endIdx = -1;\n                    if (!_this2.state.selecting) {\n                        notify(_this2.props.onSelectStart, [\n                            box\n                        ]);\n                        _this2._initial = {\n                            x: box.x,\n                            y: box.y\n                        };\n                    }\n                    if (selector.isSelected(node)) {\n                        var nodeBox = getBoundsForNode(node);\n                        var _dateCellSelection = dateCellSelection(_this2._initial, nodeBox, box, range.length, rtl);\n                        startIdx = _dateCellSelection.startIdx;\n                        endIdx = _dateCellSelection.endIdx;\n                    }\n                    _this2.setState({\n                        selecting: true,\n                        startIdx: startIdx,\n                        endIdx: endIdx\n                    });\n                });\n                selector.on(\"beforeSelect\", function(box) {\n                    if (_this2.props.selectable !== \"ignoreEvents\") return;\n                    return !isEvent(_this2.containerRef.current, box);\n                });\n                selector.on(\"click\", function(point) {\n                    return selectorClicksHandler(point, \"click\");\n                });\n                selector.on(\"doubleClick\", function(point) {\n                    return selectorClicksHandler(point, \"doubleClick\");\n                });\n                selector.on(\"select\", function(bounds) {\n                    _this2._selectSlot((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, _this2.state), {}, {\n                        action: \"select\",\n                        bounds: bounds\n                    }));\n                    _this2._initial = {};\n                    _this2.setState({\n                        selecting: false\n                    });\n                    notify(_this2.props.onSelectEnd, [\n                        _this2.state\n                    ]);\n                });\n            }\n        },\n        {\n            key: \"_teardownSelectable\",\n            value: function _teardownSelectable() {\n                if (!this._selector) return;\n                this._selector.teardown();\n                this._selector = null;\n            }\n        },\n        {\n            key: \"_selectSlot\",\n            value: function _selectSlot(_ref) {\n                var endIdx = _ref.endIdx, startIdx = _ref.startIdx, action = _ref.action, bounds = _ref.bounds, box = _ref.box;\n                if (endIdx !== -1 && startIdx !== -1) this.props.onSelectSlot && this.props.onSelectSlot({\n                    start: startIdx,\n                    end: endIdx,\n                    action: action,\n                    bounds: bounds,\n                    box: box,\n                    resourceId: this.props.resourceId\n                });\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\n/* eslint-disable react/prop-types */ var EventRowMixin = {\n    propTypes: {\n        slotMetrics: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n        selected: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object),\n        isAllDay: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().bool),\n        accessors: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n        localizer: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n        components: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n        getters: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().object).isRequired,\n        onSelect: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n        onDoubleClick: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func),\n        onKeyPress: (prop_types__WEBPACK_IMPORTED_MODULE_44___default().func)\n    },\n    defaultProps: {\n        segments: [],\n        selected: {}\n    },\n    renderEvent: function renderEvent(props, event) {\n        var selected = props.selected;\n        props.isAllDay;\n        var accessors = props.accessors, getters = props.getters, onSelect = props.onSelect, onDoubleClick = props.onDoubleClick, onKeyPress = props.onKeyPress, localizer = props.localizer, slotMetrics = props.slotMetrics, components = props.components, resizable = props.resizable;\n        var continuesPrior = slotMetrics.continuesPrior(event);\n        var continuesAfter = slotMetrics.continuesAfter(event);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(EventCell, {\n            event: event,\n            getters: getters,\n            localizer: localizer,\n            accessors: accessors,\n            components: components,\n            onSelect: onSelect,\n            onDoubleClick: onDoubleClick,\n            onKeyPress: onKeyPress,\n            continuesPrior: continuesPrior,\n            continuesAfter: continuesAfter,\n            slotStart: slotMetrics.first,\n            slotEnd: slotMetrics.last,\n            selected: isSelected(event, selected),\n            resizable: resizable\n        });\n    },\n    renderSpan: function renderSpan(slots, len, key) {\n        var content = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \" \";\n        var per = Math.abs(len) / slots * 100 + \"%\";\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n            key: key,\n            className: \"rbc-row-segment\",\n            style: {\n                WebkitFlexBasis: per,\n                flexBasis: per,\n                maxWidth: per\n            }\n        }, content);\n    }\n};\nvar EventRow = /*#__PURE__*/ function(_React$Component) {\n    function EventRow() {\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, EventRow);\n        return (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, EventRow, arguments);\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(EventRow, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(EventRow, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this = this;\n                var _this$props = this.props, segments = _this$props.segments, slots = _this$props.slotMetrics.slots, className = _this$props.className;\n                var lastEnd = 1;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(className, \"rbc-row\")\n                }, segments.reduce(function(row, _ref, li) {\n                    var event = _ref.event, left = _ref.left, right = _ref.right, span = _ref.span;\n                    var key = \"_lvl_\" + li;\n                    var gap = left - lastEnd;\n                    var content = EventRowMixin.renderEvent(_this.props, event);\n                    if (gap) row.push(EventRowMixin.renderSpan(slots, gap, \"\".concat(key, \"_gap\")));\n                    row.push(EventRowMixin.renderSpan(slots, span, key, content));\n                    lastEnd = right + 1;\n                    return row;\n                }, []));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nEventRow.defaultProps = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, EventRowMixin.defaultProps);\nfunction endOfRange(_ref) {\n    var dateRange = _ref.dateRange, _ref$unit = _ref.unit, unit = _ref$unit === void 0 ? \"day\" : _ref$unit, localizer = _ref.localizer;\n    return {\n        first: dateRange[0],\n        last: localizer.add(dateRange[dateRange.length - 1], 1, unit)\n    };\n}\n// properly calculating segments requires working with dates in\n// the timezone we're working with, so we use the localizer\nfunction eventSegments(event, range, accessors, localizer) {\n    var _endOfRange = endOfRange({\n        dateRange: range,\n        localizer: localizer\n    }), first = _endOfRange.first, last = _endOfRange.last;\n    var slots = localizer.diff(first, last, \"day\");\n    var start = localizer.max(localizer.startOf(accessors.start(event), \"day\"), first);\n    var end = localizer.min(localizer.ceil(accessors.end(event), \"day\"), last);\n    var padding = lodash_findIndex__WEBPACK_IMPORTED_MODULE_25___default()(range, function(x) {\n        return localizer.isSameDate(x, start);\n    });\n    var span = localizer.diff(start, end, \"day\");\n    span = Math.min(span, slots);\n    // The segmentOffset is necessary when adjusting for timezones\n    // ahead of the browser timezone\n    span = Math.max(span - localizer.segmentOffset, 1);\n    return {\n        event: event,\n        span: span,\n        left: padding + 1,\n        right: Math.max(padding + span, 1)\n    };\n}\nfunction eventLevels(rowSegments) {\n    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    var i, j, seg, levels = [], extra = [];\n    for(i = 0; i < rowSegments.length; i++){\n        seg = rowSegments[i];\n        for(j = 0; j < levels.length; j++)if (!segsOverlap(seg, levels[j])) break;\n        if (j >= limit) {\n            extra.push(seg);\n        } else {\n            (levels[j] || (levels[j] = [])).push(seg);\n        }\n    }\n    for(i = 0; i < levels.length; i++){\n        levels[i].sort(function(a, b) {\n            return a.left - b.left;\n        }); //eslint-disable-line\n    }\n    return {\n        levels: levels,\n        extra: extra\n    };\n}\nfunction inRange(e, start, end, accessors, localizer) {\n    var event = {\n        start: accessors.start(e),\n        end: accessors.end(e)\n    };\n    var range = {\n        start: start,\n        end: end\n    };\n    return localizer.inEventRange({\n        event: event,\n        range: range\n    });\n}\nfunction segsOverlap(seg, otherSegs) {\n    return otherSegs.some(function(otherSeg) {\n        return otherSeg.left <= seg.right && otherSeg.right >= seg.left;\n    });\n}\nfunction sortWeekEvents(events, accessors, localizer) {\n    var base = (0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(events);\n    var multiDayEvents = [];\n    var standardEvents = [];\n    base.forEach(function(event) {\n        var startCheck = accessors.start(event);\n        var endCheck = accessors.end(event);\n        if (localizer.daySpan(startCheck, endCheck) > 1) {\n            multiDayEvents.push(event);\n        } else {\n            standardEvents.push(event);\n        }\n    });\n    var multiSorted = multiDayEvents.sort(function(a, b) {\n        return sortEvents(a, b, accessors, localizer);\n    });\n    var standardSorted = standardEvents.sort(function(a, b) {\n        return sortEvents(a, b, accessors, localizer);\n    });\n    return [].concat((0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(multiSorted), (0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(standardSorted));\n}\nfunction sortEvents(eventA, eventB, accessors, localizer) {\n    var evtA = {\n        start: accessors.start(eventA),\n        end: accessors.end(eventA),\n        allDay: accessors.allDay(eventA)\n    };\n    var evtB = {\n        start: accessors.start(eventB),\n        end: accessors.end(eventB),\n        allDay: accessors.allDay(eventB)\n    };\n    return localizer.sortEvents({\n        evtA: evtA,\n        evtB: evtB\n    });\n}\nvar isSegmentInSlot$1 = function isSegmentInSlot(seg, slot) {\n    return seg.left <= slot && seg.right >= slot;\n};\nvar eventsInSlot = function eventsInSlot(segments, slot) {\n    return segments.filter(function(seg) {\n        return isSegmentInSlot$1(seg, slot);\n    }).map(function(seg) {\n        return seg.event;\n    });\n};\nvar EventEndingRow = /*#__PURE__*/ function(_React$Component) {\n    function EventEndingRow() {\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, EventEndingRow);\n        return (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, EventEndingRow, arguments);\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(EventEndingRow, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(EventEndingRow, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, segments = _this$props.segments, slots = _this$props.slotMetrics.slots;\n                var rowSegments = eventLevels(segments).levels[0];\n                var current = 1, lastEnd = 1, row = [];\n                while(current <= slots){\n                    var key = \"_lvl_\" + current;\n                    var _ref = rowSegments.filter(function(seg) {\n                        return isSegmentInSlot$1(seg, current);\n                    })[0] || {}, event = _ref.event, left = _ref.left, right = _ref.right, span = _ref.span; //eslint-disable-line\n                    if (!event) {\n                        current++;\n                        continue;\n                    }\n                    var gap = Math.max(0, left - lastEnd);\n                    if (this.canRenderSlotEvent(left, span)) {\n                        var content = EventRowMixin.renderEvent(this.props, event);\n                        if (gap) {\n                            row.push(EventRowMixin.renderSpan(slots, gap, key + \"_gap\"));\n                        }\n                        row.push(EventRowMixin.renderSpan(slots, span, key, content));\n                        lastEnd = current = right + 1;\n                    } else {\n                        if (gap) {\n                            row.push(EventRowMixin.renderSpan(slots, gap, key + \"_gap\"));\n                        }\n                        row.push(EventRowMixin.renderSpan(slots, 1, key, this.renderShowMore(segments, current)));\n                        lastEnd = current = current + 1;\n                    }\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-row\"\n                }, row);\n            }\n        },\n        {\n            key: \"canRenderSlotEvent\",\n            value: function canRenderSlotEvent(slot, span) {\n                var segments = this.props.segments;\n                return lodash_range__WEBPACK_IMPORTED_MODULE_26___default()(slot, slot + span).every(function(s) {\n                    var count = eventsInSlot(segments, s).length;\n                    return count === 1;\n                });\n            }\n        },\n        {\n            key: \"renderShowMore\",\n            value: function renderShowMore(segments, slot) {\n                var _this = this;\n                var _this$props2 = this.props, localizer = _this$props2.localizer, slotMetrics = _this$props2.slotMetrics, components = _this$props2.components;\n                var events = slotMetrics.getEventsForSlot(slot);\n                var remainingEvents = eventsInSlot(segments, slot);\n                var count = remainingEvents.length;\n                if (components !== null && components !== void 0 && components.showMore) {\n                    var ShowMore = components.showMore;\n                    // The received slot seems to be 1-based, but the range we use to pull the date is 0-based\n                    var slotDate = slotMetrics.getDateForSlot(slot - 1);\n                    return count ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(ShowMore, {\n                        localizer: localizer,\n                        slotDate: slotDate,\n                        slot: slot,\n                        count: count,\n                        events: events,\n                        remainingEvents: remainingEvents\n                    }) : false;\n                }\n                return count ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"button\", {\n                    type: \"button\",\n                    key: \"sm_\" + slot,\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-button-link\", \"rbc-show-more\"),\n                    onClick: function onClick(e) {\n                        return _this.showMore(slot, e);\n                    }\n                }, localizer.messages.showMore(count, remainingEvents, events)) : false;\n            }\n        },\n        {\n            key: \"showMore\",\n            value: function showMore(slot, e) {\n                e.preventDefault();\n                e.stopPropagation();\n                this.props.onShowMore(slot, e.target);\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nEventEndingRow.defaultProps = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, EventRowMixin.defaultProps);\nvar ScrollableWeekWrapper = function ScrollableWeekWrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n        className: \"rbc-row-content-scroll-container\"\n    }, children);\n};\nvar isSegmentInSlot = function isSegmentInSlot(seg, slot) {\n    return seg.left <= slot && seg.right >= slot;\n};\nvar isEqual = function isEqual(a, b) {\n    return a[0].range === b[0].range && a[0].events === b[0].events;\n};\nfunction getSlotMetrics$1() {\n    return (0,memoize_one__WEBPACK_IMPORTED_MODULE_46__[\"default\"])(function(options) {\n        var range = options.range, events = options.events, maxRows = options.maxRows, minRows = options.minRows, accessors = options.accessors, localizer = options.localizer;\n        var _endOfRange = endOfRange({\n            dateRange: range,\n            localizer: localizer\n        }), first = _endOfRange.first, last = _endOfRange.last;\n        var segments = events.map(function(evt) {\n            return eventSegments(evt, range, accessors, localizer);\n        });\n        var _eventLevels = eventLevels(segments, Math.max(maxRows - 1, 1)), levels = _eventLevels.levels, extra = _eventLevels.extra;\n        // Subtract 1 from minRows to not include showMore button row when\n        // it would be rendered\n        var minEventRows = extra.length > 0 ? minRows - 1 : minRows;\n        while(levels.length < minEventRows)levels.push([]);\n        return {\n            first: first,\n            last: last,\n            levels: levels,\n            extra: extra,\n            range: range,\n            slots: range.length,\n            clone: function clone(args) {\n                var metrics = getSlotMetrics$1();\n                return metrics((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, options), args));\n            },\n            getDateForSlot: function getDateForSlot(slotNumber) {\n                return range[slotNumber];\n            },\n            getSlotForDate: function getSlotForDate(date) {\n                return range.find(function(r) {\n                    return localizer.isSameDate(r, date);\n                });\n            },\n            getEventsForSlot: function getEventsForSlot(slot) {\n                return segments.filter(function(seg) {\n                    return isSegmentInSlot(seg, slot);\n                }).map(function(seg) {\n                    return seg.event;\n                });\n            },\n            continuesPrior: function continuesPrior(event) {\n                return localizer.continuesPrior(accessors.start(event), first);\n            },\n            continuesAfter: function continuesAfter(event) {\n                var start = accessors.start(event);\n                var end = accessors.end(event);\n                return localizer.continuesAfter(start, end, last);\n            }\n        };\n    }, isEqual);\n}\nvar DateContentRow = /*#__PURE__*/ function(_React$Component) {\n    function DateContentRow() {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, DateContentRow);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, DateContentRow, [].concat(args));\n        _this.handleSelectSlot = function(slot) {\n            var _this$props = _this.props, range = _this$props.range, onSelectSlot = _this$props.onSelectSlot;\n            onSelectSlot(range.slice(slot.start, slot.end + 1), slot);\n        };\n        _this.handleShowMore = function(slot, target) {\n            var _this$props2 = _this.props, range = _this$props2.range, onShowMore = _this$props2.onShowMore;\n            var metrics = _this.slotMetrics(_this.props);\n            var row = (0,dom_helpers_querySelectorAll__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(_this.containerRef.current, \".rbc-row-bg\")[0];\n            var cell;\n            if (row) cell = row.children[slot - 1];\n            var events = metrics.getEventsForSlot(slot);\n            onShowMore(events, range[slot - 1], cell, slot, target);\n        };\n        _this.getContainer = function() {\n            var container = _this.props.container;\n            return container ? container() : _this.containerRef.current;\n        };\n        _this.renderHeadingCell = function(date, index) {\n            var _this$props3 = _this.props, renderHeader = _this$props3.renderHeader, getNow = _this$props3.getNow, localizer = _this$props3.localizer;\n            return renderHeader({\n                date: date,\n                key: \"header_\".concat(index),\n                className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-date-cell\", localizer.isSameDate(date, getNow()) && \"rbc-now\")\n            });\n        };\n        _this.renderDummy = function() {\n            var _this$props4 = _this.props, className = _this$props4.className, range = _this$props4.range, renderHeader = _this$props4.renderHeader, showAllEvents = _this$props4.showAllEvents;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                className: className,\n                ref: _this.containerRef\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-row-content\", showAllEvents && \"rbc-row-content-scrollable\")\n            }, renderHeader && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                className: \"rbc-row\",\n                ref: _this.headingRowRef\n            }, range.map(_this.renderHeadingCell)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                className: \"rbc-row\",\n                ref: _this.eventRowRef\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                className: \"rbc-row-segment\"\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                className: \"rbc-event\"\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                className: \"rbc-event-content\"\n            }, \"\\xa0\"))))));\n        };\n        _this.containerRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_9__.createRef)();\n        _this.headingRowRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_9__.createRef)();\n        _this.eventRowRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_9__.createRef)();\n        _this.slotMetrics = getSlotMetrics$1();\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(DateContentRow, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(DateContentRow, [\n        {\n            key: \"getRowLimit\",\n            value: function getRowLimit() {\n                var _this$headingRowRef;\n                /* Guessing this only gets called on the dummyRow */ var eventHeight = (0,dom_helpers_height__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(this.eventRowRef.current);\n                var headingHeight = (_this$headingRowRef = this.headingRowRef) !== null && _this$headingRowRef !== void 0 && _this$headingRowRef.current ? (0,dom_helpers_height__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(this.headingRowRef.current) : 0;\n                var eventSpace = (0,dom_helpers_height__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(this.containerRef.current) - headingHeight;\n                return Math.max(Math.floor(eventSpace / eventHeight), 1);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props5 = this.props, date = _this$props5.date, rtl = _this$props5.rtl, range = _this$props5.range, className = _this$props5.className, selected = _this$props5.selected, selectable = _this$props5.selectable, renderForMeasure = _this$props5.renderForMeasure, accessors = _this$props5.accessors, getters = _this$props5.getters, components = _this$props5.components, getNow = _this$props5.getNow, renderHeader = _this$props5.renderHeader, onSelect = _this$props5.onSelect, localizer = _this$props5.localizer, onSelectStart = _this$props5.onSelectStart, onSelectEnd = _this$props5.onSelectEnd, onDoubleClick = _this$props5.onDoubleClick, onKeyPress = _this$props5.onKeyPress, resourceId = _this$props5.resourceId, longPressThreshold = _this$props5.longPressThreshold, isAllDay = _this$props5.isAllDay, resizable = _this$props5.resizable, showAllEvents = _this$props5.showAllEvents;\n                if (renderForMeasure) return this.renderDummy();\n                var metrics = this.slotMetrics(this.props);\n                var levels = metrics.levels, extra = metrics.extra;\n                var ScrollableWeekComponent = showAllEvents ? ScrollableWeekWrapper : NoopWrapper;\n                var WeekWrapper = components.weekWrapper;\n                var eventRowProps = {\n                    selected: selected,\n                    accessors: accessors,\n                    getters: getters,\n                    localizer: localizer,\n                    components: components,\n                    onSelect: onSelect,\n                    onDoubleClick: onDoubleClick,\n                    onKeyPress: onKeyPress,\n                    resourceId: resourceId,\n                    slotMetrics: metrics,\n                    resizable: resizable\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: className,\n                    role: \"rowgroup\",\n                    ref: this.containerRef\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(BackgroundCells, {\n                    localizer: localizer,\n                    date: date,\n                    getNow: getNow,\n                    rtl: rtl,\n                    range: range,\n                    selectable: selectable,\n                    container: this.getContainer,\n                    getters: getters,\n                    onSelectStart: onSelectStart,\n                    onSelectEnd: onSelectEnd,\n                    onSelectSlot: this.handleSelectSlot,\n                    components: components,\n                    longPressThreshold: longPressThreshold,\n                    resourceId: resourceId\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-row-content\", showAllEvents && \"rbc-row-content-scrollable\"),\n                    role: \"row\"\n                }, renderHeader && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-row \",\n                    ref: this.headingRowRef\n                }, range.map(this.renderHeadingCell)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(ScrollableWeekComponent, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(WeekWrapper, Object.assign({\n                    isAllDay: isAllDay\n                }, eventRowProps, {\n                    rtl: this.props.rtl\n                }), levels.map(function(segs, idx) {\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(EventRow, Object.assign({\n                        key: idx,\n                        segments: segs\n                    }, eventRowProps));\n                }), !!extra.length && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(EventEndingRow, Object.assign({\n                    segments: extra,\n                    onShowMore: this.handleShowMore\n                }, eventRowProps))))));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nDateContentRow.defaultProps = {\n    minRows: 0,\n    maxRows: Infinity\n};\nvar Header = function Header(_ref) {\n    var label = _ref.label;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", {\n        role: \"columnheader\",\n        \"aria-sort\": \"none\"\n    }, label);\n};\nvar DateHeader = function DateHeader(_ref) {\n    var label = _ref.label, drilldownView = _ref.drilldownView, onDrillDown = _ref.onDrillDown;\n    if (!drilldownView) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", null, label);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"button\", {\n        type: \"button\",\n        className: \"rbc-button-link\",\n        onClick: onDrillDown\n    }, label);\n};\nvar _excluded$6 = [\n    \"date\",\n    \"className\"\n];\nvar eventsForWeek = function eventsForWeek(evts, start, end, accessors, localizer) {\n    return evts.filter(function(e) {\n        return inRange(e, start, end, accessors, localizer);\n    });\n};\nvar MonthView = /*#__PURE__*/ function(_React$Component) {\n    function MonthView() {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, MonthView);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, MonthView, [].concat(_args));\n        _this.getContainer = function() {\n            return _this.containerRef.current;\n        };\n        _this.renderWeek = function(week, weekIdx) {\n            var _this$props = _this.props, events = _this$props.events, components = _this$props.components, selectable = _this$props.selectable, getNow = _this$props.getNow, selected = _this$props.selected, date = _this$props.date, localizer = _this$props.localizer, longPressThreshold = _this$props.longPressThreshold, accessors = _this$props.accessors, getters = _this$props.getters, showAllEvents = _this$props.showAllEvents;\n            var _this$state = _this.state, needLimitMeasure = _this$state.needLimitMeasure, rowLimit = _this$state.rowLimit;\n            // let's not mutate props\n            var weeksEvents = eventsForWeek((0,_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(events), week[0], week[week.length - 1], accessors, localizer);\n            var sorted = sortWeekEvents(weeksEvents, accessors, localizer);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(DateContentRow, {\n                key: weekIdx,\n                ref: weekIdx === 0 ? _this.slotRowRef : undefined,\n                container: _this.getContainer,\n                className: \"rbc-month-row\",\n                getNow: getNow,\n                date: date,\n                range: week,\n                events: sorted,\n                maxRows: showAllEvents ? Infinity : rowLimit,\n                selected: selected,\n                selectable: selectable,\n                components: components,\n                accessors: accessors,\n                getters: getters,\n                localizer: localizer,\n                renderHeader: _this.readerDateHeading,\n                renderForMeasure: needLimitMeasure,\n                onShowMore: _this.handleShowMore,\n                onSelect: _this.handleSelectEvent,\n                onDoubleClick: _this.handleDoubleClickEvent,\n                onKeyPress: _this.handleKeyPressEvent,\n                onSelectSlot: _this.handleSelectSlot,\n                longPressThreshold: longPressThreshold,\n                rtl: _this.props.rtl,\n                resizable: _this.props.resizable,\n                showAllEvents: showAllEvents\n            });\n        };\n        _this.readerDateHeading = function(_ref) {\n            var date = _ref.date, className = _ref.className, props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, _excluded$6);\n            var _this$props2 = _this.props, currentDate = _this$props2.date, getDrilldownView = _this$props2.getDrilldownView, localizer = _this$props2.localizer;\n            var isOffRange = localizer.neq(date, currentDate, \"month\");\n            var isCurrent = localizer.isSameDate(date, currentDate);\n            var drilldownView = getDrilldownView(date);\n            var label = localizer.format(date, \"dateFormat\");\n            var DateHeaderComponent = _this.props.components.dateHeader || DateHeader;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", Object.assign({}, props, {\n                className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(className, isOffRange && \"rbc-off-range\", isCurrent && \"rbc-current\"),\n                role: \"cell\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(DateHeaderComponent, {\n                label: label,\n                date: date,\n                drilldownView: drilldownView,\n                isOffRange: isOffRange,\n                onDrillDown: function onDrillDown(e) {\n                    return _this.handleHeadingClick(date, drilldownView, e);\n                }\n            }));\n        };\n        _this.handleSelectSlot = function(range, slotInfo) {\n            _this._pendingSelection = _this._pendingSelection.concat(range);\n            clearTimeout(_this._selectTimer);\n            _this._selectTimer = setTimeout(function() {\n                return _this.selectDates(slotInfo);\n            });\n        };\n        _this.handleHeadingClick = function(date, view, e) {\n            e.preventDefault();\n            _this.clearSelection();\n            notify(_this.props.onDrillDown, [\n                date,\n                view\n            ]);\n        };\n        _this.handleSelectEvent = function() {\n            _this.clearSelection();\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                args[_key2] = arguments[_key2];\n            }\n            notify(_this.props.onSelectEvent, args);\n        };\n        _this.handleDoubleClickEvent = function() {\n            _this.clearSelection();\n            for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n                args[_key3] = arguments[_key3];\n            }\n            notify(_this.props.onDoubleClickEvent, args);\n        };\n        _this.handleKeyPressEvent = function() {\n            _this.clearSelection();\n            for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n                args[_key4] = arguments[_key4];\n            }\n            notify(_this.props.onKeyPressEvent, args);\n        };\n        _this.handleShowMore = function(events, date, cell, slot, target) {\n            var _this$props3 = _this.props, popup = _this$props3.popup, onDrillDown = _this$props3.onDrillDown, onShowMore = _this$props3.onShowMore, getDrilldownView = _this$props3.getDrilldownView, doShowMoreDrillDown = _this$props3.doShowMoreDrillDown;\n            //cancel any pending selections so only the event click goes through.\n            _this.clearSelection();\n            if (popup) {\n                var position = (0,dom_helpers_position__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(cell, _this.containerRef.current);\n                _this.setState({\n                    overlay: {\n                        date: date,\n                        events: events,\n                        position: position,\n                        target: target\n                    }\n                });\n            } else if (doShowMoreDrillDown) {\n                notify(onDrillDown, [\n                    date,\n                    getDrilldownView(date) || views.DAY\n                ]);\n            }\n            notify(onShowMore, [\n                events,\n                date,\n                slot\n            ]);\n        };\n        _this.overlayDisplay = function() {\n            _this.setState({\n                overlay: null\n            });\n        };\n        _this.state = {\n            rowLimit: 5,\n            needLimitMeasure: true,\n            date: null\n        };\n        _this.containerRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_9__.createRef)();\n        _this.slotRowRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_9__.createRef)();\n        _this._bgRows = [];\n        _this._pendingSelection = [];\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(MonthView, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(MonthView, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                var _this2 = this;\n                var running;\n                if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n                window.addEventListener(\"resize\", this._resizeListener = function() {\n                    if (!running) {\n                        dom_helpers_animationFrame__WEBPACK_IMPORTED_MODULE_17__.request(function() {\n                            running = false;\n                            _this2.setState({\n                                needLimitMeasure: true\n                            }); //eslint-disable-line\n                        });\n                    }\n                }, false);\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate() {\n                if (this.state.needLimitMeasure) this.measureRowLimit(this.props);\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                window.removeEventListener(\"resize\", this._resizeListener, false);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props4 = this.props, date = _this$props4.date, localizer = _this$props4.localizer, className = _this$props4.className, month = localizer.visibleDays(date, localizer), weeks = lodash_chunk__WEBPACK_IMPORTED_MODULE_15___default()(month, 7);\n                this._weekCount = weeks.length;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-month-view\", className),\n                    role: \"table\",\n                    \"aria-label\": \"Month View\",\n                    ref: this.containerRef\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-row rbc-month-header\",\n                    role: \"row\"\n                }, this.renderHeaders(weeks[0])), weeks.map(this.renderWeek), this.props.popup && this.renderOverlay());\n            }\n        },\n        {\n            key: \"renderHeaders\",\n            value: function renderHeaders(row) {\n                var _this$props5 = this.props, localizer = _this$props5.localizer, components = _this$props5.components;\n                var first = row[0];\n                var last = row[row.length - 1];\n                var HeaderComponent = components.header || Header;\n                return localizer.range(first, last, \"day\").map(function(day, idx) {\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        key: \"header_\" + idx,\n                        className: \"rbc-header\"\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(HeaderComponent, {\n                        date: day,\n                        localizer: localizer,\n                        label: localizer.format(day, \"weekdayFormat\")\n                    }));\n                });\n            }\n        },\n        {\n            key: \"renderOverlay\",\n            value: function renderOverlay() {\n                var _this$state$overlay, _this$state2, _this3 = this;\n                var overlay = (_this$state$overlay = (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : _this$state2.overlay) !== null && _this$state$overlay !== void 0 ? _this$state$overlay : {};\n                var _this$props6 = this.props, accessors = _this$props6.accessors, localizer = _this$props6.localizer, components = _this$props6.components, getters = _this$props6.getters, selected = _this$props6.selected, popupOffset = _this$props6.popupOffset, handleDragStart = _this$props6.handleDragStart;\n                var onHide = function onHide() {\n                    return _this3.setState({\n                        overlay: null\n                    });\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(PopOverlay, {\n                    overlay: overlay,\n                    accessors: accessors,\n                    localizer: localizer,\n                    components: components,\n                    getters: getters,\n                    selected: selected,\n                    popupOffset: popupOffset,\n                    ref: this.containerRef,\n                    handleKeyPressEvent: this.handleKeyPressEvent,\n                    handleSelectEvent: this.handleSelectEvent,\n                    handleDoubleClickEvent: this.handleDoubleClickEvent,\n                    handleDragStart: handleDragStart,\n                    show: !!overlay.position,\n                    overlayDisplay: this.overlayDisplay,\n                    onHide: onHide\n                });\n            /* return (\n        <Overlay\n          rootClose\n          placement=\"bottom\"\n          show={!!overlay.position}\n          onHide={() => this.setState({ overlay: null })}\n          target={() => overlay.target}\n        >\n          {({ props }) => (\n            <Popup\n              {...props}\n              popupOffset={popupOffset}\n              accessors={accessors}\n              getters={getters}\n              selected={selected}\n              components={components}\n              localizer={localizer}\n              position={overlay.position}\n              show={this.overlayDisplay}\n              events={overlay.events}\n              slotStart={overlay.date}\n              slotEnd={overlay.end}\n              onSelect={this.handleSelectEvent}\n              onDoubleClick={this.handleDoubleClickEvent}\n              onKeyPress={this.handleKeyPressEvent}\n              handleDragStart={this.props.handleDragStart}\n            />\n          )}\n        </Overlay>\n      ) */ }\n        },\n        {\n            key: \"measureRowLimit\",\n            value: function measureRowLimit() {\n                this.setState({\n                    needLimitMeasure: false,\n                    rowLimit: this.slotRowRef.current.getRowLimit()\n                });\n            }\n        },\n        {\n            key: \"selectDates\",\n            value: function selectDates(slotInfo) {\n                var slots = this._pendingSelection.slice();\n                this._pendingSelection = [];\n                slots.sort(function(a, b) {\n                    return +a - +b;\n                });\n                var start = new Date(slots[0]);\n                var end = new Date(slots[slots.length - 1]);\n                end.setDate(slots[slots.length - 1].getDate() + 1);\n                notify(this.props.onSelectSlot, {\n                    slots: slots,\n                    start: start,\n                    end: end,\n                    action: slotInfo.action,\n                    bounds: slotInfo.bounds,\n                    box: slotInfo.box\n                });\n            }\n        },\n        {\n            key: \"clearSelection\",\n            value: function clearSelection() {\n                clearTimeout(this._selectTimer);\n                this._pendingSelection = [];\n            }\n        }\n    ], [\n        {\n            key: \"getDerivedStateFromProps\",\n            value: function getDerivedStateFromProps(_ref2, state) {\n                var date = _ref2.date, localizer = _ref2.localizer;\n                return {\n                    date: date,\n                    needLimitMeasure: localizer.neq(date, state.date, \"month\")\n                };\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nMonthView.range = function(date, _ref3) {\n    var localizer = _ref3.localizer;\n    var start = localizer.firstVisibleDay(date, localizer);\n    var end = localizer.lastVisibleDay(date, localizer);\n    return {\n        start: start,\n        end: end\n    };\n};\nMonthView.navigate = function(date, action, _ref4) {\n    var localizer = _ref4.localizer;\n    switch(action){\n        case navigate.PREVIOUS:\n            return localizer.add(date, -1, \"month\");\n        case navigate.NEXT:\n            return localizer.add(date, 1, \"month\");\n        default:\n            return date;\n    }\n};\nMonthView.title = function(date, _ref5) {\n    var localizer = _ref5.localizer;\n    return localizer.format(date, \"monthHeaderFormat\");\n};\nvar getKey = function getKey(_ref) {\n    var min = _ref.min, max = _ref.max, step = _ref.step, slots = _ref.slots, localizer = _ref.localizer;\n    return \"\".concat(+localizer.startOf(min, \"minutes\")) + \"\".concat(+localizer.startOf(max, \"minutes\")) + \"\".concat(step, \"-\").concat(slots);\n};\nfunction getSlotMetrics(_ref2) {\n    var start = _ref2.min, end = _ref2.max, step = _ref2.step, timeslots = _ref2.timeslots, localizer = _ref2.localizer;\n    var key = getKey({\n        start: start,\n        end: end,\n        step: step,\n        timeslots: timeslots,\n        localizer: localizer\n    });\n    // DST differences are handled inside the localizer\n    var totalMin = 1 + localizer.getTotalMin(start, end);\n    var minutesFromMidnight = localizer.getMinutesFromMidnight(start);\n    var numGroups = Math.ceil((totalMin - 1) / (step * timeslots));\n    var numSlots = numGroups * timeslots;\n    var groups = new Array(numGroups);\n    var slots = new Array(numSlots);\n    // Each slot date is created from \"zero\", instead of adding `step` to\n    // the previous one, in order to avoid DST oddities\n    for(var grp = 0; grp < numGroups; grp++){\n        groups[grp] = new Array(timeslots);\n        for(var slot = 0; slot < timeslots; slot++){\n            var slotIdx = grp * timeslots + slot;\n            var minFromStart = slotIdx * step;\n            // A date with total minutes calculated from the start of the day\n            slots[slotIdx] = groups[grp][slot] = localizer.getSlotDate(start, minutesFromMidnight, minFromStart);\n        }\n    }\n    // Necessary to be able to select up until the last timeslot in a day\n    var lastSlotMinFromStart = slots.length * step;\n    slots.push(localizer.getSlotDate(start, minutesFromMidnight, lastSlotMinFromStart));\n    function positionFromDate(date) {\n        var diff = localizer.diff(start, date, \"minutes\") + localizer.getDstOffset(start, date);\n        return Math.min(diff, totalMin);\n    }\n    return {\n        groups: groups,\n        update: function update(args) {\n            if (getKey(args) !== key) return getSlotMetrics(args);\n            return this;\n        },\n        dateIsInGroup: function dateIsInGroup(date, groupIndex) {\n            var nextGroup = groups[groupIndex + 1];\n            return localizer.inRange(date, groups[groupIndex][0], nextGroup ? nextGroup[0] : end, \"minutes\");\n        },\n        nextSlot: function nextSlot(slot) {\n            // We cannot guarantee that the slot object must be in slots,\n            // because after each update, a new slots array will be created.\n            var next = slots[Math.min(slots.findIndex(function(s) {\n                return s === slot || localizer.eq(s, slot);\n            }) + 1, slots.length - 1)];\n            // in the case of the last slot we won't a long enough range so manually get it\n            if (localizer.eq(next, slot)) next = localizer.add(slot, step, \"minutes\");\n            return next;\n        },\n        closestSlotToPosition: function closestSlotToPosition(percent) {\n            var slot = Math.min(slots.length - 1, Math.max(0, Math.floor(percent * numSlots)));\n            return slots[slot];\n        },\n        closestSlotFromPoint: function closestSlotFromPoint(point, boundaryRect) {\n            var range = Math.abs(boundaryRect.top - boundaryRect.bottom);\n            return this.closestSlotToPosition((point.y - boundaryRect.top) / range);\n        },\n        closestSlotFromDate: function closestSlotFromDate(date) {\n            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            if (localizer.lt(date, start, \"minutes\")) return slots[0];\n            if (localizer.gt(date, end, \"minutes\")) return slots[slots.length - 1];\n            var diffMins = localizer.diff(start, date, \"minutes\");\n            return slots[(diffMins - diffMins % step) / step + offset];\n        },\n        startsBeforeDay: function startsBeforeDay(date) {\n            return localizer.lt(date, start, \"day\");\n        },\n        startsAfterDay: function startsAfterDay(date) {\n            return localizer.gt(date, end, \"day\");\n        },\n        startsBefore: function startsBefore(date) {\n            return localizer.lt(localizer.merge(start, date), start, \"minutes\");\n        },\n        startsAfter: function startsAfter(date) {\n            return localizer.gt(localizer.merge(end, date), end, \"minutes\");\n        },\n        getRange: function getRange(rangeStart, rangeEnd, ignoreMin, ignoreMax) {\n            if (!ignoreMin) rangeStart = localizer.min(end, localizer.max(start, rangeStart));\n            if (!ignoreMax) rangeEnd = localizer.min(end, localizer.max(start, rangeEnd));\n            var rangeStartMin = positionFromDate(rangeStart);\n            var rangeEndMin = positionFromDate(rangeEnd);\n            var top = rangeEndMin > step * numSlots && !localizer.eq(end, rangeEnd) ? (rangeStartMin - step) / (step * numSlots) * 100 : rangeStartMin / (step * numSlots) * 100;\n            return {\n                top: top,\n                height: rangeEndMin / (step * numSlots) * 100 - top,\n                start: positionFromDate(rangeStart),\n                startDate: rangeStart,\n                end: positionFromDate(rangeEnd),\n                endDate: rangeEnd\n            };\n        },\n        getCurrentTimePosition: function getCurrentTimePosition(rangeStart) {\n            var rangeStartMin = positionFromDate(rangeStart);\n            var top = rangeStartMin / (step * numSlots) * 100;\n            return top;\n        }\n    };\n}\nvar Event = /*#__PURE__*/ function() {\n    function Event(data, _ref) {\n        var accessors = _ref.accessors, slotMetrics = _ref.slotMetrics;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, Event);\n        var _slotMetrics$getRange = slotMetrics.getRange(accessors.start(data), accessors.end(data)), start = _slotMetrics$getRange.start, startDate = _slotMetrics$getRange.startDate, end = _slotMetrics$getRange.end, endDate = _slotMetrics$getRange.endDate, top = _slotMetrics$getRange.top, height = _slotMetrics$getRange.height;\n        this.start = start;\n        this.end = end;\n        this.startMs = +startDate;\n        this.endMs = +endDate;\n        this.top = top;\n        this.height = height;\n        this.data = data;\n    }\n    /**\n   * The event's width without any overlap.\n   */ return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Event, [\n        {\n            key: \"_width\",\n            get: function get() {\n                // The container event's width is determined by the maximum number of\n                // events in any of its rows.\n                if (this.rows) {\n                    var columns = this.rows.reduce(function(max, row) {\n                        return Math.max(max, row.leaves.length + 1);\n                    }, // add itself\n                    0) + 1; // add the container\n                    return 100 / columns;\n                }\n                // The row event's width is the space left by the container, divided\n                // among itself and its leaves.\n                if (this.leaves) {\n                    var availableWidth = 100 - this.container._width;\n                    return availableWidth / (this.leaves.length + 1);\n                }\n                // The leaf event's width is determined by its row's width\n                return this.row._width;\n            }\n        },\n        {\n            key: \"width\",\n            get: function get() {\n                var noOverlap = this._width;\n                var overlap = Math.min(100, this._width * 1.7);\n                // Containers can always grow.\n                if (this.rows) {\n                    return overlap;\n                }\n                // Rows can grow if they have leaves.\n                if (this.leaves) {\n                    return this.leaves.length > 0 ? overlap : noOverlap;\n                }\n                // Leaves can grow unless they're the last item in a row.\n                var leaves = this.row.leaves;\n                var index = leaves.indexOf(this);\n                return index === leaves.length - 1 ? noOverlap : overlap;\n            }\n        },\n        {\n            key: \"xOffset\",\n            get: function get() {\n                // Containers have no offset.\n                if (this.rows) return 0;\n                // Rows always start where their container ends.\n                if (this.leaves) return this.container._width;\n                // Leaves are spread out evenly on the space left by its row.\n                var _this$row = this.row, leaves = _this$row.leaves, xOffset = _this$row.xOffset, _width = _this$row._width;\n                var index = leaves.indexOf(this) + 1;\n                return xOffset + index * _width;\n            }\n        }\n    ]);\n}();\n/**\n * Return true if event a and b is considered to be on the same row.\n */ function onSameRow(a, b, minimumStartDifference) {\n    return(// Occupies the same start slot.\n    Math.abs(b.start - a.start) < minimumStartDifference || // A's start slot overlaps with b's end slot.\n    b.start > a.start && b.start < a.end);\n}\nfunction sortByRender(events) {\n    var sortedByTime = lodash_sortBy__WEBPACK_IMPORTED_MODULE_28___default()(events, [\n        \"startMs\",\n        function(e) {\n            return -e.endMs;\n        }\n    ]);\n    var sorted = [];\n    while(sortedByTime.length > 0){\n        var event = sortedByTime.shift();\n        sorted.push(event);\n        for(var i = 0; i < sortedByTime.length; i++){\n            var test = sortedByTime[i];\n            // Still inside this event, look for next.\n            if (event.endMs > test.startMs) continue;\n            // We've found the first event of the next event group.\n            // If that event is not right next to our current event, we have to\n            // move it here.\n            if (i > 0) {\n                var _event = sortedByTime.splice(i, 1)[0];\n                sorted.push(_event);\n            }\n            break;\n        }\n    }\n    return sorted;\n}\nfunction getStyledEvents$1(_ref2) {\n    var events = _ref2.events, minimumStartDifference = _ref2.minimumStartDifference, slotMetrics = _ref2.slotMetrics, accessors = _ref2.accessors;\n    // Create proxy events and order them so that we don't have\n    // to fiddle with z-indexes.\n    var proxies = events.map(function(event) {\n        return new Event(event, {\n            slotMetrics: slotMetrics,\n            accessors: accessors\n        });\n    });\n    var eventsInRenderOrder = sortByRender(proxies);\n    // Group overlapping events, while keeping order.\n    // Every event is always one of: container, row or leaf.\n    // Containers can contain rows, and rows can contain leaves.\n    var containerEvents = [];\n    var _loop = function _loop() {\n        var event = eventsInRenderOrder[i];\n        // Check if this event can go into a container event.\n        var container = containerEvents.find(function(c) {\n            return c.end > event.start || Math.abs(event.start - c.start) < minimumStartDifference;\n        });\n        // Couldn't find a container — that means this event is a container.\n        if (!container) {\n            event.rows = [];\n            containerEvents.push(event);\n            return 1; // continue\n        }\n        // Found a container for the event.\n        event.container = container;\n        // Check if the event can be placed in an existing row.\n        // Start looking from behind.\n        var row = null;\n        for(var j = container.rows.length - 1; !row && j >= 0; j--){\n            if (onSameRow(container.rows[j], event, minimumStartDifference)) {\n                row = container.rows[j];\n            }\n        }\n        if (row) {\n            // Found a row, so add it.\n            row.leaves.push(event);\n            event.row = row;\n        } else {\n            // Couldn't find a row – that means this event is a row.\n            event.leaves = [];\n            container.rows.push(event);\n        }\n    };\n    for(var i = 0; i < eventsInRenderOrder.length; i++){\n        if (_loop()) continue;\n    }\n    // Return the original events, along with their styles.\n    return eventsInRenderOrder.map(function(event) {\n        return {\n            event: event.data,\n            style: {\n                top: event.top,\n                height: event.height,\n                width: event.width,\n                xOffset: Math.max(0, event.xOffset)\n            }\n        };\n    });\n}\nfunction getMaxIdxDFS(node, maxIdx, visited) {\n    for(var i = 0; i < node.friends.length; ++i){\n        if (visited.indexOf(node.friends[i]) > -1) continue;\n        maxIdx = maxIdx > node.friends[i].idx ? maxIdx : node.friends[i].idx;\n        // TODO : trace it by not object but kinda index or something for performance\n        visited.push(node.friends[i]);\n        var newIdx = getMaxIdxDFS(node.friends[i], maxIdx, visited);\n        maxIdx = maxIdx > newIdx ? maxIdx : newIdx;\n    }\n    return maxIdx;\n}\nfunction noOverlap(_ref) {\n    var events = _ref.events, minimumStartDifference = _ref.minimumStartDifference, slotMetrics = _ref.slotMetrics, accessors = _ref.accessors;\n    var styledEvents = getStyledEvents$1({\n        events: events,\n        minimumStartDifference: minimumStartDifference,\n        slotMetrics: slotMetrics,\n        accessors: accessors\n    });\n    styledEvents.sort(function(a, b) {\n        a = a.style;\n        b = b.style;\n        if (a.top !== b.top) return a.top > b.top ? 1 : -1;\n        else if (a.height !== b.height) return a.top + a.height < b.top + b.height ? 1 : -1;\n        else return 0;\n    });\n    for(var i = 0; i < styledEvents.length; ++i){\n        styledEvents[i].friends = [];\n        delete styledEvents[i].style.left;\n        delete styledEvents[i].style.left;\n        delete styledEvents[i].idx;\n        delete styledEvents[i].size;\n    }\n    for(var _i2 = 0; _i2 < styledEvents.length - 1; ++_i2){\n        var se1 = styledEvents[_i2];\n        var y1 = se1.style.top;\n        var y2 = se1.style.top + se1.style.height;\n        for(var j = _i2 + 1; j < styledEvents.length; ++j){\n            var se2 = styledEvents[j];\n            var y3 = se2.style.top;\n            var y4 = se2.style.top + se2.style.height;\n            if (y3 >= y1 && y4 <= y2 || y4 > y1 && y4 <= y2 || y3 >= y1 && y3 < y2) {\n                // TODO : hashmap would be effective for performance\n                se1.friends.push(se2);\n                se2.friends.push(se1);\n            }\n        }\n    }\n    for(var _i4 = 0; _i4 < styledEvents.length; ++_i4){\n        var se = styledEvents[_i4];\n        var bitmap = [];\n        for(var _j2 = 0; _j2 < 100; ++_j2)bitmap.push(1); // 1 means available\n        for(var _j4 = 0; _j4 < se.friends.length; ++_j4)if (se.friends[_j4].idx !== undefined) bitmap[se.friends[_j4].idx] = 0; // 0 means reserved\n        se.idx = bitmap.indexOf(1);\n    }\n    for(var _i6 = 0; _i6 < styledEvents.length; ++_i6){\n        var size = 0;\n        if (styledEvents[_i6].size) continue;\n        var allFriends = [];\n        var maxIdx = getMaxIdxDFS(styledEvents[_i6], 0, allFriends);\n        size = 100 / (maxIdx + 1);\n        styledEvents[_i6].size = size;\n        for(var _j6 = 0; _j6 < allFriends.length; ++_j6)allFriends[_j6].size = size;\n    }\n    for(var _i8 = 0; _i8 < styledEvents.length; ++_i8){\n        var e = styledEvents[_i8];\n        e.style.left = e.idx * e.size;\n        // stretch to maximum\n        var _maxIdx = 0;\n        for(var _j8 = 0; _j8 < e.friends.length; ++_j8){\n            var idx = e.friends[_j8].idx;\n            _maxIdx = _maxIdx > idx ? _maxIdx : idx;\n        }\n        if (_maxIdx <= e.idx) e.size = 100 - e.idx * e.size;\n        // padding between events\n        // for this feature, `width` is not percentage based unit anymore\n        // it will be used with calc()\n        var padding = e.idx === 0 ? 0 : 3;\n        e.style.width = \"calc(\".concat(e.size, \"% - \").concat(padding, \"px)\");\n        e.style.height = \"calc(\".concat(e.style.height, \"% - 2px)\");\n        e.style.xOffset = \"calc(\".concat(e.style.left, \"% + \").concat(padding, \"px)\");\n    }\n    return styledEvents;\n}\n/*eslint no-unused-vars: \"off\"*/ var DefaultAlgorithms = {\n    overlap: getStyledEvents$1,\n    \"no-overlap\": noOverlap\n};\nfunction isFunction(a) {\n    return !!(a && a.constructor && a.call && a.apply);\n}\n//\nfunction getStyledEvents(_ref) {\n    _ref.events;\n    _ref.minimumStartDifference;\n    _ref.slotMetrics;\n    _ref.accessors;\n    var dayLayoutAlgorithm = _ref.dayLayoutAlgorithm;\n    var algorithm = dayLayoutAlgorithm;\n    if (dayLayoutAlgorithm in DefaultAlgorithms) algorithm = DefaultAlgorithms[dayLayoutAlgorithm];\n    if (!isFunction(algorithm)) {\n        // invalid algorithm\n        return [];\n    }\n    return algorithm.apply(this, arguments);\n}\nvar TimeSlotGroup = /*#__PURE__*/ function(_Component) {\n    function TimeSlotGroup() {\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, TimeSlotGroup);\n        return (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, TimeSlotGroup, arguments);\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(TimeSlotGroup, _Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(TimeSlotGroup, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, renderSlot = _this$props.renderSlot, resource = _this$props.resource, group = _this$props.group, getters = _this$props.getters, _this$props$component = _this$props.components, _this$props$component2 = _this$props$component === void 0 ? {} : _this$props$component, _this$props$component3 = _this$props$component2.timeSlotWrapper, Wrapper = _this$props$component3 === void 0 ? NoopWrapper : _this$props$component3;\n                var groupProps = getters ? getters.slotGroupProp(group) : {};\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", Object.assign({\n                    className: \"rbc-timeslot-group\"\n                }, groupProps), group.map(function(value, idx) {\n                    var slotProps = getters ? getters.slotProp(value, resource) : {};\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(Wrapper, {\n                        key: idx,\n                        value: value,\n                        resource: resource\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", Object.assign({}, slotProps, {\n                        className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-time-slot\", slotProps.className)\n                    }), renderSlot && renderSlot(value, idx)));\n                }));\n            }\n        }\n    ]);\n}(react__WEBPACK_IMPORTED_MODULE_9__.Component);\nfunction stringifyPercent(v) {\n    return typeof v === \"string\" ? v : v + \"%\";\n}\n/* eslint-disable react/prop-types */ function TimeGridEvent(props) {\n    var style = props.style, className = props.className, event = props.event, accessors = props.accessors, rtl = props.rtl, selected = props.selected, label = props.label, continuesPrior = props.continuesPrior, continuesAfter = props.continuesAfter, getters = props.getters, onClick = props.onClick, onDoubleClick = props.onDoubleClick, isBackgroundEvent = props.isBackgroundEvent, onKeyPress = props.onKeyPress, _props$components = props.components, Event = _props$components.event, EventWrapper = _props$components.eventWrapper;\n    var title = accessors.title(event);\n    var tooltip = accessors.tooltip(event);\n    var end = accessors.end(event);\n    var start = accessors.start(event);\n    var userProps = getters.eventProp(event, start, end, selected);\n    var inner = [\n        /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n            key: \"1\",\n            className: \"rbc-event-label\"\n        }, label),\n        /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n            key: \"2\",\n            className: \"rbc-event-content\"\n        }, Event ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(Event, {\n            event: event,\n            title: title\n        }) : title)\n    ];\n    var height = style.height, top = style.top, width = style.width, xOffset = style.xOffset;\n    var eventStyle = (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, userProps.style), {}, (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_13__[\"default\"])({\n        top: stringifyPercent(top),\n        height: stringifyPercent(height),\n        width: stringifyPercent(width)\n    }, rtl ? \"right\" : \"left\", stringifyPercent(xOffset)));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(EventWrapper, Object.assign({\n        type: \"time\"\n    }, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n        role: \"button\",\n        tabIndex: 0,\n        onClick: onClick,\n        onDoubleClick: onDoubleClick,\n        style: eventStyle,\n        onKeyDown: onKeyPress,\n        title: tooltip ? (typeof label === \"string\" ? label + \": \" : \"\") + tooltip : undefined,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(isBackgroundEvent ? \"rbc-background-event\" : \"rbc-event\", className, userProps.className, {\n            \"rbc-selected\": selected,\n            \"rbc-event-continues-earlier\": continuesPrior,\n            \"rbc-event-continues-later\": continuesAfter\n        })\n    }, inner));\n}\nvar DayColumnWrapper = function DayColumnWrapper(_ref) {\n    var children = _ref.children, className = _ref.className, style = _ref.style, innerRef = _ref.innerRef;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n        className: className,\n        style: style,\n        ref: innerRef\n    }, children);\n};\nvar DayColumnWrapper$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().forwardRef(function(props, ref) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(DayColumnWrapper, Object.assign({}, props, {\n        innerRef: ref\n    }));\n});\nvar _excluded$5 = [\n    \"dayProp\"\n], _excluded2$1 = [\n    \"eventContainerWrapper\"\n];\nvar DayColumn = /*#__PURE__*/ function(_React$Component) {\n    function DayColumn() {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, DayColumn);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, DayColumn, [].concat(_args));\n        _this.state = {\n            selecting: false,\n            timeIndicatorPosition: null\n        };\n        _this.intervalTriggered = false;\n        _this.renderEvents = function(_ref) {\n            var events = _ref.events, isBackgroundEvent = _ref.isBackgroundEvent;\n            var _this$props = _this.props, rtl = _this$props.rtl, selected = _this$props.selected, accessors = _this$props.accessors, localizer = _this$props.localizer, getters = _this$props.getters, components = _this$props.components, step = _this$props.step, timeslots = _this$props.timeslots, dayLayoutAlgorithm = _this$props.dayLayoutAlgorithm, resizable = _this$props.resizable;\n            var _this2 = _this, slotMetrics = _this2.slotMetrics;\n            var messages = localizer.messages;\n            var styledEvents = getStyledEvents({\n                events: events,\n                accessors: accessors,\n                slotMetrics: slotMetrics,\n                minimumStartDifference: Math.ceil(step * timeslots / 2),\n                dayLayoutAlgorithm: dayLayoutAlgorithm\n            });\n            return styledEvents.map(function(_ref2, idx) {\n                var event = _ref2.event, style = _ref2.style;\n                var end = accessors.end(event);\n                var start = accessors.start(event);\n                var format = \"eventTimeRangeFormat\";\n                var label;\n                var startsBeforeDay = slotMetrics.startsBeforeDay(start);\n                var startsAfterDay = slotMetrics.startsAfterDay(end);\n                if (startsBeforeDay) format = \"eventTimeRangeEndFormat\";\n                else if (startsAfterDay) format = \"eventTimeRangeStartFormat\";\n                if (startsBeforeDay && startsAfterDay) label = messages.allDay;\n                else label = localizer.format({\n                    start: start,\n                    end: end\n                }, format);\n                var continuesPrior = startsBeforeDay || slotMetrics.startsBefore(start);\n                var continuesAfter = startsAfterDay || slotMetrics.startsAfter(end);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGridEvent, {\n                    style: style,\n                    event: event,\n                    label: label,\n                    key: \"evt_\" + idx,\n                    getters: getters,\n                    rtl: rtl,\n                    components: components,\n                    continuesPrior: continuesPrior,\n                    continuesAfter: continuesAfter,\n                    accessors: accessors,\n                    resource: _this.props.resource,\n                    selected: isSelected(event, selected),\n                    onClick: function onClick(e) {\n                        return _this._select((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, event), _this.props.resource && {\n                            sourceResource: _this.props.resource\n                        }), isBackgroundEvent && {\n                            isBackgroundEvent: true\n                        }), e);\n                    },\n                    onDoubleClick: function onDoubleClick(e) {\n                        return _this._doubleClick(event, e);\n                    },\n                    isBackgroundEvent: isBackgroundEvent,\n                    onKeyPress: function onKeyPress(e) {\n                        return _this._keyPress(event, e);\n                    },\n                    resizable: resizable\n                });\n            });\n        };\n        _this._selectable = function() {\n            var node = _this.containerRef.current;\n            var _this$props2 = _this.props, longPressThreshold = _this$props2.longPressThreshold, localizer = _this$props2.localizer;\n            var selector = _this._selector = new Selection(function() {\n                return node;\n            }, {\n                longPressThreshold: longPressThreshold\n            });\n            var maybeSelect = function maybeSelect(box) {\n                var onSelecting = _this.props.onSelecting;\n                var current = _this.state || {};\n                var state = selectionState(box);\n                var start = state.startDate, end = state.endDate;\n                if (onSelecting) {\n                    if (localizer.eq(current.startDate, start, \"minutes\") && localizer.eq(current.endDate, end, \"minutes\") || onSelecting({\n                        start: start,\n                        end: end,\n                        resourceId: _this.props.resource\n                    }) === false) return;\n                }\n                if (_this.state.start !== state.start || _this.state.end !== state.end || _this.state.selecting !== state.selecting) {\n                    _this.setState(state);\n                }\n            };\n            var selectionState = function selectionState(point) {\n                var currentSlot = _this.slotMetrics.closestSlotFromPoint(point, getBoundsForNode(node));\n                if (!_this.state.selecting) {\n                    _this._initialSlot = currentSlot;\n                }\n                var initialSlot = _this._initialSlot;\n                if (localizer.lte(initialSlot, currentSlot)) {\n                    currentSlot = _this.slotMetrics.nextSlot(currentSlot);\n                } else if (localizer.gt(initialSlot, currentSlot)) {\n                    initialSlot = _this.slotMetrics.nextSlot(initialSlot);\n                }\n                var selectRange = _this.slotMetrics.getRange(localizer.min(initialSlot, currentSlot), localizer.max(initialSlot, currentSlot));\n                return (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, selectRange), {}, {\n                    selecting: true,\n                    top: \"\".concat(selectRange.top, \"%\"),\n                    height: \"\".concat(selectRange.height, \"%\")\n                });\n            };\n            var selectorClicksHandler = function selectorClicksHandler(box, actionType) {\n                if (!isEvent(_this.containerRef.current, box)) {\n                    var _selectionState = selectionState(box), startDate = _selectionState.startDate, endDate = _selectionState.endDate;\n                    _this._selectSlot({\n                        startDate: startDate,\n                        endDate: endDate,\n                        action: actionType,\n                        box: box\n                    });\n                }\n                _this.setState({\n                    selecting: false\n                });\n            };\n            selector.on(\"selecting\", maybeSelect);\n            selector.on(\"selectStart\", maybeSelect);\n            selector.on(\"beforeSelect\", function(box) {\n                if (_this.props.selectable !== \"ignoreEvents\") return;\n                return !isEvent(_this.containerRef.current, box);\n            });\n            selector.on(\"click\", function(box) {\n                return selectorClicksHandler(box, \"click\");\n            });\n            selector.on(\"doubleClick\", function(box) {\n                return selectorClicksHandler(box, \"doubleClick\");\n            });\n            selector.on(\"select\", function(bounds) {\n                if (_this.state.selecting) {\n                    _this._selectSlot((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, _this.state), {}, {\n                        action: \"select\",\n                        bounds: bounds\n                    }));\n                    _this.setState({\n                        selecting: false\n                    });\n                }\n            });\n            selector.on(\"reset\", function() {\n                if (_this.state.selecting) {\n                    _this.setState({\n                        selecting: false\n                    });\n                }\n            });\n        };\n        _this._teardownSelectable = function() {\n            if (!_this._selector) return;\n            _this._selector.teardown();\n            _this._selector = null;\n        };\n        _this._selectSlot = function(_ref3) {\n            var startDate = _ref3.startDate, endDate = _ref3.endDate, action = _ref3.action, bounds = _ref3.bounds, box = _ref3.box;\n            var current = startDate, slots = [];\n            while(_this.props.localizer.lte(current, endDate)){\n                slots.push(current);\n                current = new Date(+current + _this.props.step * 60 * 1000); // using Date ensures not to create an endless loop the day DST begins\n            }\n            notify(_this.props.onSelectSlot, {\n                slots: slots,\n                start: startDate,\n                end: endDate,\n                resourceId: _this.props.resource,\n                action: action,\n                bounds: bounds,\n                box: box\n            });\n        };\n        _this._select = function() {\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                args[_key2] = arguments[_key2];\n            }\n            notify(_this.props.onSelectEvent, args);\n        };\n        _this._doubleClick = function() {\n            for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n                args[_key3] = arguments[_key3];\n            }\n            notify(_this.props.onDoubleClickEvent, args);\n        };\n        _this._keyPress = function() {\n            for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n                args[_key4] = arguments[_key4];\n            }\n            notify(_this.props.onKeyPressEvent, args);\n        };\n        _this.slotMetrics = getSlotMetrics(_this.props);\n        _this.containerRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_9__.createRef)();\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(DayColumn, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(DayColumn, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.selectable && this._selectable();\n                if (this.props.isNow) {\n                    this.setTimeIndicatorPositionUpdateInterval();\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this._teardownSelectable();\n                this.clearTimeIndicatorInterval();\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps, prevState) {\n                if (this.props.selectable && !prevProps.selectable) this._selectable();\n                if (!this.props.selectable && prevProps.selectable) this._teardownSelectable();\n                var _this$props3 = this.props, getNow = _this$props3.getNow, isNow = _this$props3.isNow, localizer = _this$props3.localizer, date = _this$props3.date, min = _this$props3.min, max = _this$props3.max;\n                var getNowChanged = localizer.neq(prevProps.getNow(), getNow(), \"minutes\");\n                if (prevProps.isNow !== isNow || getNowChanged) {\n                    this.clearTimeIndicatorInterval();\n                    if (isNow) {\n                        var tail = !getNowChanged && localizer.eq(prevProps.date, date, \"minutes\") && prevState.timeIndicatorPosition === this.state.timeIndicatorPosition;\n                        this.setTimeIndicatorPositionUpdateInterval(tail);\n                    }\n                } else if (isNow && (localizer.neq(prevProps.min, min, \"minutes\") || localizer.neq(prevProps.max, max, \"minutes\"))) {\n                    this.positionTimeIndicator();\n                }\n            }\n        },\n        {\n            key: \"setTimeIndicatorPositionUpdateInterval\",\n            value: function setTimeIndicatorPositionUpdateInterval() {\n                var _this3 = this;\n                var tail = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n                if (!this.intervalTriggered && !tail) {\n                    this.positionTimeIndicator();\n                }\n                this._timeIndicatorTimeout = window.setTimeout(function() {\n                    _this3.intervalTriggered = true;\n                    _this3.positionTimeIndicator();\n                    _this3.setTimeIndicatorPositionUpdateInterval();\n                }, 60000);\n            }\n        },\n        {\n            key: \"clearTimeIndicatorInterval\",\n            value: function clearTimeIndicatorInterval() {\n                this.intervalTriggered = false;\n                window.clearTimeout(this._timeIndicatorTimeout);\n            }\n        },\n        {\n            key: \"positionTimeIndicator\",\n            value: function positionTimeIndicator() {\n                var _this$props4 = this.props, min = _this$props4.min, max = _this$props4.max, getNow = _this$props4.getNow;\n                var current = getNow();\n                if (current >= min && current <= max) {\n                    var top = this.slotMetrics.getCurrentTimePosition(current);\n                    this.intervalTriggered = true;\n                    this.setState({\n                        timeIndicatorPosition: top\n                    });\n                } else {\n                    this.clearTimeIndicatorInterval();\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props5 = this.props, date = _this$props5.date, max = _this$props5.max, rtl = _this$props5.rtl, isNow = _this$props5.isNow, resource = _this$props5.resource, accessors = _this$props5.accessors, localizer = _this$props5.localizer, _this$props5$getters = _this$props5.getters, dayProp = _this$props5$getters.dayProp, getters = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props5$getters, _excluded$5), _this$props5$componen = _this$props5.components, EventContainer = _this$props5$componen.eventContainerWrapper, components = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props5$componen, _excluded2$1);\n                this.slotMetrics = this.slotMetrics.update(this.props);\n                var slotMetrics = this.slotMetrics;\n                var _this$state = this.state, selecting = _this$state.selecting, top = _this$state.top, height = _this$state.height, startDate = _this$state.startDate, endDate = _this$state.endDate;\n                var selectDates = {\n                    start: startDate,\n                    end: endDate\n                };\n                var _dayProp = dayProp(max, resource), className = _dayProp.className, style = _dayProp.style;\n                var DayColumnWrapperComponent = components.dayColumnWrapper || DayColumnWrapper$1;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(DayColumnWrapperComponent, {\n                    ref: this.containerRef,\n                    date: date,\n                    style: style,\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(className, \"rbc-day-slot\", \"rbc-time-column\", isNow && \"rbc-now\", isNow && \"rbc-today\", // WHY\n                    selecting && \"rbc-slot-selecting\"),\n                    slotMetrics: slotMetrics,\n                    resource: resource\n                }, slotMetrics.groups.map(function(grp, idx) {\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeSlotGroup, {\n                        key: idx,\n                        group: grp,\n                        resource: resource,\n                        getters: getters,\n                        components: components\n                    });\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(EventContainer, {\n                    localizer: localizer,\n                    resource: resource,\n                    accessors: accessors,\n                    getters: getters,\n                    components: components,\n                    slotMetrics: slotMetrics\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-events-container\", rtl && \"rtl\")\n                }, this.renderEvents({\n                    events: this.props.backgroundEvents,\n                    isBackgroundEvent: true\n                }), this.renderEvents({\n                    events: this.props.events\n                }))), selecting && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-slot-selection\",\n                    style: {\n                        top: top,\n                        height: height\n                    }\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", null, localizer.format(selectDates, \"selectRangeFormat\"))), isNow && this.intervalTriggered && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-current-time-indicator\",\n                    style: {\n                        top: \"\".concat(this.state.timeIndicatorPosition, \"%\")\n                    }\n                }));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nDayColumn.defaultProps = {\n    dragThroughEvents: true,\n    timeslots: 2\n};\nvar ResourceHeader = function ResourceHeader(_ref) {\n    var label = _ref.label;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement((react__WEBPACK_IMPORTED_MODULE_9___default().Fragment), null, label);\n};\nvar TimeGridHeader = /*#__PURE__*/ function(_React$Component) {\n    function TimeGridHeader() {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, TimeGridHeader);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, TimeGridHeader, [].concat(args));\n        _this.handleHeaderClick = function(date, view, e) {\n            e.preventDefault();\n            notify(_this.props.onDrillDown, [\n                date,\n                view\n            ]);\n        };\n        _this.renderRow = function(resource) {\n            var _this$props = _this.props, events = _this$props.events, rtl = _this$props.rtl, selectable = _this$props.selectable, getNow = _this$props.getNow, range = _this$props.range, getters = _this$props.getters, localizer = _this$props.localizer, accessors = _this$props.accessors, components = _this$props.components, resizable = _this$props.resizable;\n            var resourceId = accessors.resourceId(resource);\n            var eventsToDisplay = resource ? events.filter(function(event) {\n                return accessors.resource(event) === resourceId;\n            }) : events;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(DateContentRow, {\n                isAllDay: true,\n                rtl: rtl,\n                getNow: getNow,\n                minRows: 2,\n                maxRows: _this.props.allDayMaxRows + 1,\n                range: range,\n                events: eventsToDisplay,\n                resourceId: resourceId,\n                className: \"rbc-allday-cell\",\n                selectable: selectable,\n                selected: _this.props.selected,\n                components: components,\n                accessors: accessors,\n                getters: getters,\n                localizer: localizer,\n                onSelect: _this.props.onSelectEvent,\n                onShowMore: _this.props.onShowMore,\n                onDoubleClick: _this.props.onDoubleClickEvent,\n                onKeyPress: _this.props.onKeyPressEvent,\n                onSelectSlot: _this.props.onSelectSlot,\n                longPressThreshold: _this.props.longPressThreshold,\n                resizable: resizable\n            });\n        };\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(TimeGridHeader, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(TimeGridHeader, [\n        {\n            key: \"renderHeaderCells\",\n            value: function renderHeaderCells(range) {\n                var _this2 = this;\n                var _this$props2 = this.props, localizer = _this$props2.localizer, getDrilldownView = _this$props2.getDrilldownView, getNow = _this$props2.getNow, dayProp = _this$props2.getters.dayProp, _this$props2$componen = _this$props2.components.header, HeaderComponent = _this$props2$componen === void 0 ? Header : _this$props2$componen;\n                var today = getNow();\n                return range.map(function(date, i) {\n                    var drilldownView = getDrilldownView(date);\n                    var label = localizer.format(date, \"dayFormat\");\n                    var _dayProp = dayProp(date), className = _dayProp.className, style = _dayProp.style;\n                    var header = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(HeaderComponent, {\n                        date: date,\n                        label: label,\n                        localizer: localizer\n                    });\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        key: i,\n                        style: style,\n                        className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-header\", className, localizer.isSameDate(date, today) && \"rbc-today\")\n                    }, drilldownView ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"button\", {\n                        type: \"button\",\n                        className: \"rbc-button-link\",\n                        onClick: function onClick(e) {\n                            return _this2.handleHeaderClick(date, drilldownView, e);\n                        }\n                    }, header) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", null, header));\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this3 = this;\n                var _this$props3 = this.props, width = _this$props3.width, rtl = _this$props3.rtl, resources = _this$props3.resources, range = _this$props3.range, events = _this$props3.events, getNow = _this$props3.getNow, accessors = _this$props3.accessors, selectable = _this$props3.selectable, components = _this$props3.components, getters = _this$props3.getters, scrollRef = _this$props3.scrollRef, localizer = _this$props3.localizer, isOverflowing = _this$props3.isOverflowing, _this$props3$componen = _this$props3.components, TimeGutterHeader = _this$props3$componen.timeGutterHeader, _this$props3$componen2 = _this$props3$componen.resourceHeader, ResourceHeaderComponent = _this$props3$componen2 === void 0 ? ResourceHeader : _this$props3$componen2, resizable = _this$props3.resizable;\n                var style = {};\n                if (isOverflowing) {\n                    style[rtl ? \"marginLeft\" : \"marginRight\"] = \"\".concat((0,dom_helpers_scrollbarSize__WEBPACK_IMPORTED_MODULE_29__[\"default\"])() - 1, \"px\");\n                }\n                var groupedEvents = resources.groupEvents(events);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    style: style,\n                    ref: scrollRef,\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-time-header\", isOverflowing && \"rbc-overflowing\")\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-label rbc-time-header-gutter\",\n                    style: {\n                        width: width,\n                        minWidth: width,\n                        maxWidth: width\n                    }\n                }, TimeGutterHeader && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGutterHeader, null)), resources.map(function(_ref, idx) {\n                    var _ref2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_ref, 2), id = _ref2[0], resource = _ref2[1];\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        className: \"rbc-time-header-content\",\n                        key: id || idx\n                    }, resource && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        className: \"rbc-row rbc-row-resource\",\n                        key: \"resource_\".concat(idx)\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        className: \"rbc-header\"\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(ResourceHeaderComponent, {\n                        index: idx,\n                        label: accessors.resourceTitle(resource),\n                        resource: resource\n                    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        className: \"rbc-row rbc-time-header-cell\".concat(range.length <= 1 ? \" rbc-time-header-cell-single-day\" : \"\")\n                    }, _this3.renderHeaderCells(range)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(DateContentRow, {\n                        isAllDay: true,\n                        rtl: rtl,\n                        getNow: getNow,\n                        minRows: 2,\n                        maxRows: _this3.props.allDayMaxRows + 1,\n                        range: range,\n                        events: groupedEvents.get(id) || [],\n                        resourceId: resource && id,\n                        className: \"rbc-allday-cell\",\n                        selectable: selectable,\n                        selected: _this3.props.selected,\n                        components: components,\n                        accessors: accessors,\n                        getters: getters,\n                        localizer: localizer,\n                        onSelect: _this3.props.onSelectEvent,\n                        onShowMore: _this3.props.onShowMore,\n                        onDoubleClick: _this3.props.onDoubleClickEvent,\n                        onKeyDown: _this3.props.onKeyPressEvent,\n                        onSelectSlot: _this3.props.onSelectSlot,\n                        longPressThreshold: _this3.props.longPressThreshold,\n                        resizable: resizable\n                    }));\n                }));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nvar TimeGridHeaderResources = /*#__PURE__*/ function(_React$Component) {\n    function TimeGridHeaderResources() {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, TimeGridHeaderResources);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, TimeGridHeaderResources, [].concat(args));\n        _this.handleHeaderClick = function(date, view, e) {\n            e.preventDefault();\n            notify(_this.props.onDrillDown, [\n                date,\n                view\n            ]);\n        };\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(TimeGridHeaderResources, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(TimeGridHeaderResources, [\n        {\n            key: \"renderHeaderCells\",\n            value: function renderHeaderCells(range) {\n                var _this2 = this;\n                var _this$props = this.props, localizer = _this$props.localizer, getDrilldownView = _this$props.getDrilldownView, getNow = _this$props.getNow, dayProp = _this$props.getters.dayProp, _this$props$component = _this$props.components, _this$props$component2 = _this$props$component.header, HeaderComponent = _this$props$component2 === void 0 ? Header : _this$props$component2, _this$props$component3 = _this$props$component.resourceHeader, ResourceHeaderComponent = _this$props$component3 === void 0 ? ResourceHeader : _this$props$component3, resources = _this$props.resources, accessors = _this$props.accessors, events = _this$props.events, rtl = _this$props.rtl, selectable = _this$props.selectable, components = _this$props.components, getters = _this$props.getters, resizable = _this$props.resizable;\n                var today = getNow();\n                var groupedEvents = resources.groupEvents(events);\n                return range.map(function(date, idx) {\n                    var drilldownView = getDrilldownView(date);\n                    var label = localizer.format(date, \"dayFormat\");\n                    var _dayProp = dayProp(date), className = _dayProp.className, style = _dayProp.style;\n                    var header = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(HeaderComponent, {\n                        date: date,\n                        label: label,\n                        localizer: localizer\n                    });\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        key: idx,\n                        className: \"rbc-time-header-content rbc-resource-grouping\"\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        className: \"rbc-row rbc-time-header-cell\".concat(range.length <= 1 ? \" rbc-time-header-cell-single-day\" : \"\")\n                    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        style: style,\n                        className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-header\", className, localizer.isSameDate(date, today) && \"rbc-today\")\n                    }, drilldownView ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"button\", {\n                        type: \"button\",\n                        className: \"rbc-button-link\",\n                        onClick: function onClick(e) {\n                            return _this2.handleHeaderClick(date, drilldownView, e);\n                        }\n                    }, header) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", null, header))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        className: \"rbc-row\"\n                    }, resources.map(function(_ref, idx) {\n                        var _ref2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_ref, 2), id = _ref2[0], resource = _ref2[1];\n                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                            key: \"resource_\".concat(id, \"_\").concat(idx),\n                            className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-header\", className, localizer.isSameDate(date, today) && \"rbc-today\")\n                        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(ResourceHeaderComponent, {\n                            index: idx,\n                            label: accessors.resourceTitle(resource),\n                            resource: resource\n                        }));\n                    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        className: \"rbc-row rbc-m-b-negative-3 rbc-h-full\"\n                    }, resources.map(function(_ref3, idx) {\n                        var _ref4 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_ref3, 2), id = _ref4[0], resource = _ref4[1];\n                        // Filter the grouped events by the current date.\n                        var filteredEvents = (groupedEvents.get(id) || []).filter(function(event) {\n                            return localizer.isSameDate(event.start, date) || localizer.isSameDate(event.end, date);\n                        });\n                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(DateContentRow, {\n                            key: \"resource_\".concat(id, \"_\").concat(idx),\n                            isAllDay: true,\n                            rtl: rtl,\n                            getNow: getNow,\n                            minRows: 2,\n                            maxRows: _this2.props.allDayMaxRows + 1,\n                            range: [\n                                date\n                            ] // This ensures that only the single day is rendered\n                            ,\n                            events: filteredEvents // Only show filtered events for this day.\n                            ,\n                            resourceId: resource && id,\n                            className: \"rbc-allday-cell\",\n                            selectable: selectable,\n                            selected: _this2.props.selected,\n                            components: components,\n                            accessors: accessors,\n                            getters: getters,\n                            localizer: localizer,\n                            onSelect: _this2.props.onSelectEvent,\n                            onShowMore: _this2.props.onShowMore,\n                            onDoubleClick: _this2.props.onDoubleClickEvent,\n                            onKeyDown: _this2.props.onKeyPressEvent,\n                            onSelectSlot: _this2.props.onSelectSlot,\n                            longPressThreshold: _this2.props.longPressThreshold,\n                            resizable: resizable\n                        });\n                    })));\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props2 = this.props, width = _this$props2.width, rtl = _this$props2.rtl, range = _this$props2.range, scrollRef = _this$props2.scrollRef, isOverflowing = _this$props2.isOverflowing, TimeGutterHeader = _this$props2.components.timeGutterHeader;\n                var style = {};\n                if (isOverflowing) {\n                    style[rtl ? \"marginLeft\" : \"marginRight\"] = \"\".concat((0,dom_helpers_scrollbarSize__WEBPACK_IMPORTED_MODULE_29__[\"default\"])() - 1, \"px\");\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    style: style,\n                    ref: scrollRef,\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-time-header\", isOverflowing && \"rbc-overflowing\")\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: \"rbc-label rbc-time-header-gutter\",\n                    style: {\n                        width: width,\n                        minWidth: width,\n                        maxWidth: width\n                    }\n                }, TimeGutterHeader && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGutterHeader, null)), this.renderHeaderCells(range));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\n/**\n * Since the TimeGutter only displays the 'times' of slots in a day, and is separate\n * from the Day Columns themselves, we check to see if the range contains an offset difference\n * and, if so, change the beginning and end 'date' by a day to properly display the slots times\n * used.\n */ function adjustForDST(_ref) {\n    var min = _ref.min, max = _ref.max, localizer = _ref.localizer;\n    if (localizer.getTimezoneOffset(min) !== localizer.getTimezoneOffset(max)) {\n        return {\n            start: localizer.add(min, -1, \"day\"),\n            end: localizer.add(max, -1, \"day\")\n        };\n    }\n    return {\n        start: min,\n        end: max\n    };\n}\nvar TimeGutter = function TimeGutter(_ref2) {\n    var min = _ref2.min, max = _ref2.max, timeslots = _ref2.timeslots, step = _ref2.step, localizer = _ref2.localizer, getNow = _ref2.getNow, resource = _ref2.resource, components = _ref2.components, getters = _ref2.getters, gutterRef = _ref2.gutterRef;\n    var TimeGutterWrapper = components.timeGutterWrapper;\n    var _useMemo = (0,react__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return adjustForDST({\n            min: min,\n            max: max,\n            localizer: localizer\n        });\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        min === null || min === void 0 ? void 0 : min.toISOString(),\n        max === null || max === void 0 ? void 0 : max.toISOString(),\n        localizer\n    ]), start = _useMemo.start, end = _useMemo.end;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_9__.useState)(getSlotMetrics({\n        min: start,\n        max: end,\n        timeslots: timeslots,\n        step: step,\n        localizer: localizer\n    })), _useState2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_useState, 2), slotMetrics = _useState2[0], setSlotMetrics = _useState2[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_9__.useEffect)(function() {\n        if (slotMetrics) {\n            setSlotMetrics(slotMetrics.update({\n                min: start,\n                max: end,\n                timeslots: timeslots,\n                step: step,\n                localizer: localizer\n            }));\n        }\n    /**\n     * We don't want this to fire when slotMetrics is updated as it would recursively bomb\n     */ // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        start === null || start === void 0 ? void 0 : start.toISOString(),\n        end === null || end === void 0 ? void 0 : end.toISOString(),\n        timeslots,\n        step\n    ]);\n    var renderSlot = (0,react__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(value, idx) {\n        if (idx) return null; // don't return the first (0) idx\n        var isNow = slotMetrics.dateIsInGroup(getNow(), idx);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", {\n            className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-label\", isNow && \"rbc-now\")\n        }, localizer.format(value, \"timeGutterFormat\"));\n    }, [\n        slotMetrics,\n        localizer,\n        getNow\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGutterWrapper, {\n        slotMetrics: slotMetrics\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n        className: \"rbc-time-gutter rbc-time-column\",\n        ref: gutterRef\n    }, slotMetrics.groups.map(function(grp, idx) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeSlotGroup, {\n            key: idx,\n            group: grp,\n            resource: resource,\n            components: components,\n            renderSlot: renderSlot,\n            getters: getters\n        });\n    })));\n};\nvar TimeGutter$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().forwardRef(function(props, ref) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGutter, Object.assign({\n        gutterRef: ref\n    }, props));\n});\nvar NONE = {};\nfunction Resources(resources, accessors) {\n    return {\n        map: function map(fn) {\n            if (!resources) return [\n                fn([\n                    NONE,\n                    null\n                ], 0)\n            ];\n            return resources.map(function(resource, idx) {\n                return fn([\n                    accessors.resourceId(resource),\n                    resource\n                ], idx);\n            });\n        },\n        groupEvents: function groupEvents(events) {\n            var eventsByResource = new Map();\n            if (!resources) {\n                // Return all events if resources are not provided\n                eventsByResource.set(NONE, events);\n                return eventsByResource;\n            }\n            events.forEach(function(event) {\n                var id = accessors.resource(event) || NONE;\n                if (Array.isArray(id)) {\n                    id.forEach(function(item) {\n                        var resourceEvents = eventsByResource.get(item) || [];\n                        resourceEvents.push(event);\n                        eventsByResource.set(item, resourceEvents);\n                    });\n                } else {\n                    var resourceEvents = eventsByResource.get(id) || [];\n                    resourceEvents.push(event);\n                    eventsByResource.set(id, resourceEvents);\n                }\n            });\n            return eventsByResource;\n        }\n    };\n}\nvar TimeGrid = /*#__PURE__*/ function(_Component) {\n    function TimeGrid(props) {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, TimeGrid);\n        _this = (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, TimeGrid, [\n            props\n        ]);\n        _this.handleScroll = function(e) {\n            if (_this.scrollRef.current) {\n                _this.scrollRef.current.scrollLeft = e.target.scrollLeft;\n            }\n        };\n        _this.handleResize = function() {\n            dom_helpers_animationFrame__WEBPACK_IMPORTED_MODULE_17__.cancel(_this.rafHandle);\n            _this.rafHandle = dom_helpers_animationFrame__WEBPACK_IMPORTED_MODULE_17__.request(_this.checkOverflow);\n        };\n        _this.handleKeyPressEvent = function() {\n            _this.clearSelection();\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            notify(_this.props.onKeyPressEvent, args);\n        };\n        _this.handleSelectEvent = function() {\n            //cancel any pending selections so only the event click goes through.\n            _this.clearSelection();\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                args[_key2] = arguments[_key2];\n            }\n            notify(_this.props.onSelectEvent, args);\n        };\n        _this.handleDoubleClickEvent = function() {\n            _this.clearSelection();\n            for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n                args[_key3] = arguments[_key3];\n            }\n            notify(_this.props.onDoubleClickEvent, args);\n        };\n        _this.handleShowMore = function(events, date, cell, slot, target) {\n            var _this$props = _this.props, popup = _this$props.popup, onDrillDown = _this$props.onDrillDown, onShowMore = _this$props.onShowMore, getDrilldownView = _this$props.getDrilldownView, doShowMoreDrillDown = _this$props.doShowMoreDrillDown;\n            _this.clearSelection();\n            if (popup) {\n                var position = (0,dom_helpers_position__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(cell, _this.containerRef.current);\n                _this.setState({\n                    overlay: {\n                        date: date,\n                        events: events,\n                        position: (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, position), {}, {\n                            width: \"200px\"\n                        }),\n                        target: target\n                    }\n                });\n            } else if (doShowMoreDrillDown) {\n                notify(onDrillDown, [\n                    date,\n                    getDrilldownView(date) || views.DAY\n                ]);\n            }\n            notify(onShowMore, [\n                events,\n                date,\n                slot\n            ]);\n        };\n        _this.handleSelectAllDaySlot = function(slots, slotInfo) {\n            var onSelectSlot = _this.props.onSelectSlot;\n            var start = new Date(slots[0]);\n            var end = new Date(slots[slots.length - 1]);\n            end.setDate(slots[slots.length - 1].getDate() + 1);\n            notify(onSelectSlot, {\n                slots: slots,\n                start: start,\n                end: end,\n                action: slotInfo.action,\n                resourceId: slotInfo.resourceId\n            });\n        };\n        _this.overlayDisplay = function() {\n            _this.setState({\n                overlay: null\n            });\n        };\n        _this.checkOverflow = function() {\n            if (_this._updatingOverflow) return;\n            var content = _this.contentRef.current;\n            if (!(content !== null && content !== void 0 && content.scrollHeight)) return;\n            var isOverflowing = content.scrollHeight > content.clientHeight;\n            if (_this.state.isOverflowing !== isOverflowing) {\n                _this._updatingOverflow = true;\n                _this.setState({\n                    isOverflowing: isOverflowing\n                }, function() {\n                    _this._updatingOverflow = false;\n                });\n            }\n        };\n        _this.memoizedResources = (0,memoize_one__WEBPACK_IMPORTED_MODULE_46__[\"default\"])(function(resources, accessors) {\n            return Resources(resources, accessors);\n        });\n        _this.state = {\n            gutterWidth: undefined,\n            isOverflowing: null\n        };\n        _this.scrollRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createRef();\n        _this.contentRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createRef();\n        _this.containerRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createRef();\n        _this._scrollRatio = null;\n        _this.gutterRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_9__.createRef)();\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(TimeGrid, _Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(TimeGrid, [\n        {\n            key: \"getSnapshotBeforeUpdate\",\n            value: function getSnapshotBeforeUpdate() {\n                this.checkOverflow();\n                return null;\n            }\n        },\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                if (this.props.width == null) {\n                    this.measureGutter();\n                }\n                this.calculateScroll();\n                this.applyScroll();\n                window.addEventListener(\"resize\", this.handleResize);\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                window.removeEventListener(\"resize\", this.handleResize);\n                dom_helpers_animationFrame__WEBPACK_IMPORTED_MODULE_17__.cancel(this.rafHandle);\n                if (this.measureGutterAnimationFrameRequest) {\n                    window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);\n                }\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate() {\n                this.applyScroll();\n            }\n        },\n        {\n            key: \"renderDayColumn\",\n            value: function renderDayColumn(date, id, resource, groupedEvents, groupedBackgroundEvents, localizer, accessors, components, dayLayoutAlgorithm, now) {\n                var _this$props2 = this.props, min = _this$props2.min, max = _this$props2.max;\n                var daysEvents = (groupedEvents.get(id) || []).filter(function(event) {\n                    return localizer.inRange(date, accessors.start(event), accessors.end(event), \"day\");\n                });\n                var daysBackgroundEvents = (groupedBackgroundEvents.get(id) || []).filter(function(event) {\n                    return localizer.inRange(date, accessors.start(event), accessors.end(event), \"day\");\n                });\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(DayColumn, Object.assign({}, this.props, {\n                    localizer: localizer,\n                    min: localizer.merge(date, min),\n                    max: localizer.merge(date, max),\n                    resource: resource && id,\n                    components: components,\n                    isNow: localizer.isSameDate(date, now),\n                    key: \"\".concat(id, \"-\").concat(date),\n                    date: date,\n                    events: daysEvents,\n                    backgroundEvents: daysBackgroundEvents,\n                    dayLayoutAlgorithm: dayLayoutAlgorithm\n                }));\n            }\n        },\n        {\n            key: \"renderResourcesFirst\",\n            value: function renderResourcesFirst(range, resources, groupedEvents, groupedBackgroundEvents, localizer, accessors, now, components, dayLayoutAlgorithm) {\n                var _this2 = this;\n                return resources.map(function(_ref) {\n                    var _ref2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_ref, 2), id = _ref2[0], resource = _ref2[1];\n                    return range.map(function(date) {\n                        return _this2.renderDayColumn(date, id, resource, groupedEvents, groupedBackgroundEvents, localizer, accessors, components, dayLayoutAlgorithm, now);\n                    });\n                });\n            }\n        },\n        {\n            key: \"renderRangeFirst\",\n            value: function renderRangeFirst(range, resources, groupedEvents, groupedBackgroundEvents, localizer, accessors, now, components, dayLayoutAlgorithm) {\n                var _this3 = this;\n                return range.map(function(date) {\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                        style: {\n                            display: \"flex\",\n                            minHeight: \"100%\",\n                            flex: 1\n                        },\n                        key: date\n                    }, resources.map(function(_ref3) {\n                        var _ref4 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_ref3, 2), id = _ref4[0], resource = _ref4[1];\n                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                            style: {\n                                flex: 1\n                            },\n                            key: accessors.resourceId(resource)\n                        }, _this3.renderDayColumn(date, id, resource, groupedEvents, groupedBackgroundEvents, localizer, accessors, components, dayLayoutAlgorithm, now));\n                    }));\n                });\n            }\n        },\n        {\n            key: \"renderEvents\",\n            value: function renderEvents(range, events, backgroundEvents, now) {\n                var _this$props3 = this.props, accessors = _this$props3.accessors, localizer = _this$props3.localizer, resourceGroupingLayout = _this$props3.resourceGroupingLayout, components = _this$props3.components, dayLayoutAlgorithm = _this$props3.dayLayoutAlgorithm;\n                var resources = this.memoizedResources(this.props.resources, accessors);\n                var groupedEvents = resources.groupEvents(events);\n                var groupedBackgroundEvents = resources.groupEvents(backgroundEvents);\n                if (!resourceGroupingLayout) {\n                    return this.renderResourcesFirst(range, resources, groupedEvents, groupedBackgroundEvents, localizer, accessors, now, components, dayLayoutAlgorithm);\n                } else {\n                    return this.renderRangeFirst(range, resources, groupedEvents, groupedBackgroundEvents, localizer, accessors, now, components, dayLayoutAlgorithm);\n                }\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props$allDayMax;\n                var _this$props4 = this.props, events = _this$props4.events, backgroundEvents = _this$props4.backgroundEvents, range = _this$props4.range, width = _this$props4.width, rtl = _this$props4.rtl, selected = _this$props4.selected, getNow = _this$props4.getNow, resources = _this$props4.resources, components = _this$props4.components, accessors = _this$props4.accessors, getters = _this$props4.getters, localizer = _this$props4.localizer, min = _this$props4.min, max = _this$props4.max, showMultiDayTimes = _this$props4.showMultiDayTimes, longPressThreshold = _this$props4.longPressThreshold, resizable = _this$props4.resizable, resourceGroupingLayout = _this$props4.resourceGroupingLayout;\n                width = width || this.state.gutterWidth;\n                var start = range[0], end = range[range.length - 1];\n                this.slots = range.length;\n                var allDayEvents = [], rangeEvents = [], rangeBackgroundEvents = [];\n                events.forEach(function(event) {\n                    if (inRange(event, start, end, accessors, localizer)) {\n                        var eStart = accessors.start(event), eEnd = accessors.end(event);\n                        if (accessors.allDay(event) || localizer.startAndEndAreDateOnly(eStart, eEnd) || !showMultiDayTimes && !localizer.isSameDate(eStart, eEnd)) {\n                            allDayEvents.push(event);\n                        } else {\n                            rangeEvents.push(event);\n                        }\n                    }\n                });\n                backgroundEvents.forEach(function(event) {\n                    if (inRange(event, start, end, accessors, localizer)) {\n                        rangeBackgroundEvents.push(event);\n                    }\n                });\n                allDayEvents.sort(function(a, b) {\n                    return sortEvents(a, b, accessors, localizer);\n                });\n                var headerProps = {\n                    range: range,\n                    events: allDayEvents,\n                    width: width,\n                    rtl: rtl,\n                    getNow: getNow,\n                    localizer: localizer,\n                    selected: selected,\n                    allDayMaxRows: this.props.showAllEvents ? Infinity : (_this$props$allDayMax = this.props.allDayMaxRows) !== null && _this$props$allDayMax !== void 0 ? _this$props$allDayMax : Infinity,\n                    resources: this.memoizedResources(resources, accessors),\n                    selectable: this.props.selectable,\n                    accessors: accessors,\n                    getters: getters,\n                    components: components,\n                    scrollRef: this.scrollRef,\n                    isOverflowing: this.state.isOverflowing,\n                    longPressThreshold: longPressThreshold,\n                    onSelectSlot: this.handleSelectAllDaySlot,\n                    onSelectEvent: this.handleSelectEvent,\n                    onShowMore: this.handleShowMore,\n                    onDoubleClickEvent: this.props.onDoubleClickEvent,\n                    onKeyPressEvent: this.props.onKeyPressEvent,\n                    onDrillDown: this.props.onDrillDown,\n                    getDrilldownView: this.props.getDrilldownView,\n                    resizable: resizable\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"rbc-time-view\", resources && \"rbc-time-view-resources\"),\n                    ref: this.containerRef\n                }, resources && resources.length > 1 && resourceGroupingLayout ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGridHeaderResources, headerProps) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGridHeader, headerProps), this.props.popup && this.renderOverlay(), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n                    ref: this.contentRef,\n                    className: \"rbc-time-content\",\n                    onScroll: this.handleScroll\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGutter$1, {\n                    date: start,\n                    ref: this.gutterRef,\n                    localizer: localizer,\n                    min: localizer.merge(start, min),\n                    max: localizer.merge(start, max),\n                    step: this.props.step,\n                    getNow: this.props.getNow,\n                    timeslots: this.props.timeslots,\n                    components: components,\n                    className: \"rbc-time-gutter\",\n                    getters: getters\n                }), this.renderEvents(range, rangeEvents, rangeBackgroundEvents, getNow())));\n            }\n        },\n        {\n            key: \"renderOverlay\",\n            value: function renderOverlay() {\n                var _this$state$overlay, _this$state, _this4 = this;\n                var overlay = (_this$state$overlay = (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.overlay) !== null && _this$state$overlay !== void 0 ? _this$state$overlay : {};\n                var _this$props5 = this.props, accessors = _this$props5.accessors, localizer = _this$props5.localizer, components = _this$props5.components, getters = _this$props5.getters, selected = _this$props5.selected, popupOffset = _this$props5.popupOffset, handleDragStart = _this$props5.handleDragStart;\n                var onHide = function onHide() {\n                    return _this4.setState({\n                        overlay: null\n                    });\n                };\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(PopOverlay, {\n                    overlay: overlay,\n                    accessors: accessors,\n                    localizer: localizer,\n                    components: components,\n                    getters: getters,\n                    selected: selected,\n                    popupOffset: popupOffset,\n                    ref: this.containerRef,\n                    handleKeyPressEvent: this.handleKeyPressEvent,\n                    handleSelectEvent: this.handleSelectEvent,\n                    handleDoubleClickEvent: this.handleDoubleClickEvent,\n                    handleDragStart: handleDragStart,\n                    show: !!overlay.position,\n                    overlayDisplay: this.overlayDisplay,\n                    onHide: onHide\n                });\n            }\n        },\n        {\n            key: \"clearSelection\",\n            value: function clearSelection() {\n                clearTimeout(this._selectTimer);\n                this._pendingSelection = [];\n            }\n        },\n        {\n            key: \"measureGutter\",\n            value: function measureGutter() {\n                var _this5 = this;\n                if (this.measureGutterAnimationFrameRequest) {\n                    window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest);\n                }\n                this.measureGutterAnimationFrameRequest = window.requestAnimationFrame(function() {\n                    var _this5$gutterRef;\n                    var width = (_this5$gutterRef = _this5.gutterRef) !== null && _this5$gutterRef !== void 0 && _this5$gutterRef.current ? (0,dom_helpers_width__WEBPACK_IMPORTED_MODULE_27__[\"default\"])(_this5.gutterRef.current) : undefined;\n                    if (width && _this5.state.gutterWidth !== width) {\n                        _this5.setState({\n                            gutterWidth: width\n                        });\n                    }\n                });\n            }\n        },\n        {\n            key: \"applyScroll\",\n            value: function applyScroll() {\n                // If auto-scroll is disabled, we don't actually apply the scroll\n                if (this._scrollRatio != null && this.props.enableAutoScroll === true) {\n                    var content = this.contentRef.current;\n                    content.scrollTop = content.scrollHeight * this._scrollRatio;\n                    // Only do this once\n                    this._scrollRatio = null;\n                }\n            }\n        },\n        {\n            key: \"calculateScroll\",\n            value: function calculateScroll() {\n                var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n                var min = props.min, max = props.max, scrollToTime = props.scrollToTime, localizer = props.localizer;\n                var diffMillis = localizer.diff(localizer.merge(scrollToTime, min), scrollToTime, \"milliseconds\");\n                var totalMillis = localizer.diff(min, max, \"milliseconds\");\n                this._scrollRatio = diffMillis / totalMillis;\n            }\n        }\n    ]);\n}(react__WEBPACK_IMPORTED_MODULE_9__.Component);\nTimeGrid.defaultProps = {\n    step: 30,\n    timeslots: 2,\n    // To be compatible with old versions, default as `false`.\n    resourceGroupingLayout: false\n};\nvar _excluded$4 = [\n    \"date\",\n    \"localizer\",\n    \"min\",\n    \"max\",\n    \"scrollToTime\",\n    \"enableAutoScroll\"\n];\nvar Day = /*#__PURE__*/ function(_React$Component) {\n    function Day() {\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, Day);\n        return (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, Day, arguments);\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Day, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Day, [\n        {\n            key: \"render\",\n            value: function render() {\n                /**\n       * This allows us to default min, max, and scrollToTime\n       * using our localizer. This is necessary until such time\n       * as TODO: TimeGrid is converted to a functional component.\n       */ var _this$props = this.props, date = _this$props.date, localizer = _this$props.localizer, _this$props$min = _this$props.min, min = _this$props$min === void 0 ? localizer.startOf(new Date(), \"day\") : _this$props$min, _this$props$max = _this$props.max, max = _this$props$max === void 0 ? localizer.endOf(new Date(), \"day\") : _this$props$max, _this$props$scrollToT = _this$props.scrollToTime, scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), \"day\") : _this$props$scrollToT, _this$props$enableAut = _this$props.enableAutoScroll, enableAutoScroll = _this$props$enableAut === void 0 ? true : _this$props$enableAut, props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props, _excluded$4);\n                var range = Day.range(date, {\n                    localizer: localizer\n                });\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGrid, Object.assign({}, props, {\n                    range: range,\n                    eventOffset: 10,\n                    localizer: localizer,\n                    min: min,\n                    max: max,\n                    scrollToTime: scrollToTime,\n                    enableAutoScroll: enableAutoScroll\n                }));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nDay.range = function(date, _ref) {\n    var localizer = _ref.localizer;\n    return [\n        localizer.startOf(date, \"day\")\n    ];\n};\nDay.navigate = function(date, action, _ref2) {\n    var localizer = _ref2.localizer;\n    switch(action){\n        case navigate.PREVIOUS:\n            return localizer.add(date, -1, \"day\");\n        case navigate.NEXT:\n            return localizer.add(date, 1, \"day\");\n        default:\n            return date;\n    }\n};\nDay.title = function(date, _ref3) {\n    var localizer = _ref3.localizer;\n    return localizer.format(date, \"dayHeaderFormat\");\n};\nvar _excluded$3 = [\n    \"date\",\n    \"localizer\",\n    \"min\",\n    \"max\",\n    \"scrollToTime\",\n    \"enableAutoScroll\"\n];\nvar Week = /*#__PURE__*/ function(_React$Component) {\n    function Week() {\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, Week);\n        return (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, Week, arguments);\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Week, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Week, [\n        {\n            key: \"render\",\n            value: function render() {\n                /**\n       * This allows us to default min, max, and scrollToTime\n       * using our localizer. This is necessary until such time\n       * as TimeGrid is converted to a functional component.\n       */ var _this$props = this.props, date = _this$props.date, localizer = _this$props.localizer, _this$props$min = _this$props.min, min = _this$props$min === void 0 ? localizer.startOf(new Date(), \"day\") : _this$props$min, _this$props$max = _this$props.max, max = _this$props$max === void 0 ? localizer.endOf(new Date(), \"day\") : _this$props$max, _this$props$scrollToT = _this$props.scrollToTime, scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), \"day\") : _this$props$scrollToT, _this$props$enableAut = _this$props.enableAutoScroll, enableAutoScroll = _this$props$enableAut === void 0 ? true : _this$props$enableAut, props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props, _excluded$3);\n                var range = Week.range(date, this.props);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGrid, Object.assign({}, props, {\n                    range: range,\n                    eventOffset: 15,\n                    localizer: localizer,\n                    min: min,\n                    max: max,\n                    scrollToTime: scrollToTime,\n                    enableAutoScroll: enableAutoScroll\n                }));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nWeek.defaultProps = TimeGrid.defaultProps;\nWeek.navigate = function(date, action, _ref) {\n    var localizer = _ref.localizer;\n    switch(action){\n        case navigate.PREVIOUS:\n            return localizer.add(date, -1, \"week\");\n        case navigate.NEXT:\n            return localizer.add(date, 1, \"week\");\n        default:\n            return date;\n    }\n};\nWeek.range = function(date, _ref2) {\n    var localizer = _ref2.localizer;\n    var firstOfWeek = localizer.startOfWeek();\n    var start = localizer.startOf(date, \"week\", firstOfWeek);\n    var end = localizer.endOf(date, \"week\", firstOfWeek);\n    return localizer.range(start, end);\n};\nWeek.title = function(date, _ref3) {\n    var localizer = _ref3.localizer;\n    var _Week$range = Week.range(date, {\n        localizer: localizer\n    }), _Week$range2 = (0,_babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_30__[\"default\"])(_Week$range), start = _Week$range2[0], rest = _Week$range2.slice(1);\n    return localizer.format({\n        start: start,\n        end: rest.pop()\n    }, \"dayRangeHeaderFormat\");\n};\nvar _excluded$2 = [\n    \"date\",\n    \"localizer\",\n    \"min\",\n    \"max\",\n    \"scrollToTime\",\n    \"enableAutoScroll\"\n];\nfunction workWeekRange(date, options) {\n    return Week.range(date, options).filter(function(d) {\n        return [\n            6,\n            0\n        ].indexOf(d.getDay()) === -1;\n    });\n}\nvar WorkWeek = /*#__PURE__*/ function(_React$Component) {\n    function WorkWeek() {\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, WorkWeek);\n        return (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, WorkWeek, arguments);\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(WorkWeek, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(WorkWeek, [\n        {\n            key: \"render\",\n            value: function render() {\n                /**\n       * This allows us to default min, max, and scrollToTime\n       * using our localizer. This is necessary until such time\n       * as TimeGrid is converted to a functional component.\n       */ var _this$props = this.props, date = _this$props.date, localizer = _this$props.localizer, _this$props$min = _this$props.min, min = _this$props$min === void 0 ? localizer.startOf(new Date(), \"day\") : _this$props$min, _this$props$max = _this$props.max, max = _this$props$max === void 0 ? localizer.endOf(new Date(), \"day\") : _this$props$max, _this$props$scrollToT = _this$props.scrollToTime, scrollToTime = _this$props$scrollToT === void 0 ? localizer.startOf(new Date(), \"day\") : _this$props$scrollToT, _this$props$enableAut = _this$props.enableAutoScroll, enableAutoScroll = _this$props$enableAut === void 0 ? true : _this$props$enableAut, props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props, _excluded$2);\n                var range = workWeekRange(date, this.props);\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeGrid, Object.assign({}, props, {\n                    range: range,\n                    eventOffset: 15,\n                    localizer: localizer,\n                    min: min,\n                    max: max,\n                    scrollToTime: scrollToTime,\n                    enableAutoScroll: enableAutoScroll\n                }));\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nWorkWeek.defaultProps = TimeGrid.defaultProps;\nWorkWeek.range = workWeekRange;\nWorkWeek.navigate = Week.navigate;\nWorkWeek.title = function(date, _ref) {\n    var localizer = _ref.localizer;\n    var _workWeekRange = workWeekRange(date, {\n        localizer: localizer\n    }), _workWeekRange2 = (0,_babel_runtime_helpers_esm_toArray__WEBPACK_IMPORTED_MODULE_30__[\"default\"])(_workWeekRange), start = _workWeekRange2[0], rest = _workWeekRange2.slice(1);\n    return localizer.format({\n        start: start,\n        end: rest.pop()\n    }, \"dayRangeHeaderFormat\");\n};\nvar DEFAULT_LENGTH = 30;\nfunction Agenda(_ref) {\n    var accessors = _ref.accessors, components = _ref.components, date = _ref.date, events = _ref.events, getters = _ref.getters, _ref$length = _ref.length, length = _ref$length === void 0 ? DEFAULT_LENGTH : _ref$length, localizer = _ref.localizer, onDoubleClickEvent = _ref.onDoubleClickEvent, onSelectEvent = _ref.onSelectEvent, selected = _ref.selected;\n    var headerRef = (0,react__WEBPACK_IMPORTED_MODULE_9__.useRef)(null);\n    var dateColRef = (0,react__WEBPACK_IMPORTED_MODULE_9__.useRef)(null);\n    var timeColRef = (0,react__WEBPACK_IMPORTED_MODULE_9__.useRef)(null);\n    var contentRef = (0,react__WEBPACK_IMPORTED_MODULE_9__.useRef)(null);\n    var tbodyRef = (0,react__WEBPACK_IMPORTED_MODULE_9__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_9__.useEffect)(function() {\n        _adjustHeader();\n    });\n    var renderDay = function renderDay(day, events, dayKey) {\n        var Event = components.event, AgendaDate = components.date;\n        events = events.filter(function(e) {\n            return inRange(e, localizer.startOf(day, \"day\"), localizer.endOf(day, \"day\"), accessors, localizer);\n        });\n        return events.map(function(event, idx) {\n            var title = accessors.title(event);\n            var end = accessors.end(event);\n            var start = accessors.start(event);\n            var userProps = getters.eventProp(event, start, end, isSelected(event, selected));\n            var dateLabel = idx === 0 && localizer.format(day, \"agendaDateFormat\");\n            var first = idx === 0 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"td\", {\n                rowSpan: events.length,\n                className: \"rbc-agenda-date-cell\"\n            }, AgendaDate ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(AgendaDate, {\n                day: day,\n                label: dateLabel\n            }) : dateLabel) : false;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"tr\", {\n                key: dayKey + \"_\" + idx,\n                className: userProps.className,\n                style: userProps.style\n            }, first, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"td\", {\n                className: \"rbc-agenda-time-cell\"\n            }, timeRangeLabel(day, event)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"td\", {\n                className: \"rbc-agenda-event-cell\",\n                onClick: function onClick(e) {\n                    return onSelectEvent && onSelectEvent(event, e);\n                },\n                onDoubleClick: function onDoubleClick(e) {\n                    return onDoubleClickEvent && onDoubleClickEvent(event, e);\n                }\n            }, Event ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(Event, {\n                event: event,\n                title: title\n            }) : title));\n        }, []);\n    };\n    var timeRangeLabel = function timeRangeLabel(day, event) {\n        var labelClass = \"\", TimeComponent = components.time, label = localizer.messages.allDay;\n        var end = accessors.end(event);\n        var start = accessors.start(event);\n        if (!accessors.allDay(event)) {\n            if (localizer.eq(start, end)) {\n                label = localizer.format(start, \"agendaTimeFormat\");\n            } else if (localizer.isSameDate(start, end)) {\n                label = localizer.format({\n                    start: start,\n                    end: end\n                }, \"agendaTimeRangeFormat\");\n            } else if (localizer.isSameDate(day, start)) {\n                label = localizer.format(start, \"agendaTimeFormat\");\n            } else if (localizer.isSameDate(day, end)) {\n                label = localizer.format(end, \"agendaTimeFormat\");\n            }\n        }\n        if (localizer.gt(day, start, \"day\")) labelClass = \"rbc-continues-prior\";\n        if (localizer.lt(day, end, \"day\")) labelClass += \" rbc-continues-after\";\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", {\n            className: labelClass.trim()\n        }, TimeComponent ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(TimeComponent, {\n            event: event,\n            day: day,\n            label: label\n        }) : label);\n    };\n    var _adjustHeader = function _adjustHeader() {\n        if (!tbodyRef.current) return;\n        var header = headerRef.current;\n        var firstRow = tbodyRef.current.firstChild;\n        if (!firstRow) return;\n        var isOverflowing = contentRef.current.scrollHeight > contentRef.current.clientHeight;\n        var _widths = [];\n        var widths = _widths;\n        _widths = [\n            (0,dom_helpers_width__WEBPACK_IMPORTED_MODULE_27__[\"default\"])(firstRow.children[0]),\n            (0,dom_helpers_width__WEBPACK_IMPORTED_MODULE_27__[\"default\"])(firstRow.children[1])\n        ];\n        if (widths[0] !== _widths[0] || widths[1] !== _widths[1]) {\n            dateColRef.current.style.width = _widths[0] + \"px\";\n            timeColRef.current.style.width = _widths[1] + \"px\";\n        }\n        if (isOverflowing) {\n            (0,dom_helpers_addClass__WEBPACK_IMPORTED_MODULE_31__[\"default\"])(header, \"rbc-header-overflowing\");\n            header.style.marginRight = (0,dom_helpers_scrollbarSize__WEBPACK_IMPORTED_MODULE_29__[\"default\"])() + \"px\";\n        } else {\n            (0,dom_helpers_removeClass__WEBPACK_IMPORTED_MODULE_32__[\"default\"])(header, \"rbc-header-overflowing\");\n        }\n    };\n    var messages = localizer.messages;\n    var end = localizer.add(date, length, \"day\");\n    var range = localizer.range(date, end, \"day\");\n    events = events.filter(function(event) {\n        return inRange(event, localizer.startOf(date, \"day\"), localizer.endOf(end, \"day\"), accessors, localizer);\n    });\n    events.sort(function(a, b) {\n        return +accessors.start(a) - +accessors.start(b);\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n        className: \"rbc-agenda-view\"\n    }, events.length !== 0 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement((react__WEBPACK_IMPORTED_MODULE_9___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"table\", {\n        ref: headerRef,\n        className: \"rbc-agenda-table\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"thead\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"tr\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"th\", {\n        className: \"rbc-header\",\n        ref: dateColRef\n    }, messages.date), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"th\", {\n        className: \"rbc-header\",\n        ref: timeColRef\n    }, messages.time), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"th\", {\n        className: \"rbc-header\"\n    }, messages.event)))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", {\n        className: \"rbc-agenda-content\",\n        ref: contentRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"table\", {\n        className: \"rbc-agenda-table\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"tbody\", {\n        ref: tbodyRef\n    }, range.map(function(day, idx) {\n        return renderDay(day, events, idx);\n    }))))) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"span\", {\n        className: \"rbc-agenda-empty\"\n    }, messages.noEventsInRange));\n}\nAgenda.range = function(start, _ref2) {\n    var _ref2$length = _ref2.length, length = _ref2$length === void 0 ? DEFAULT_LENGTH : _ref2$length, localizer = _ref2.localizer;\n    var end = localizer.add(start, length, \"day\");\n    return {\n        start: start,\n        end: end\n    };\n};\nAgenda.navigate = function(date, action, _ref3) {\n    var _ref3$length = _ref3.length, length = _ref3$length === void 0 ? DEFAULT_LENGTH : _ref3$length, localizer = _ref3.localizer;\n    switch(action){\n        case navigate.PREVIOUS:\n            return localizer.add(date, -length, \"day\");\n        case navigate.NEXT:\n            return localizer.add(date, length, \"day\");\n        default:\n            return date;\n    }\n};\nAgenda.title = function(start, _ref4) {\n    var _ref4$length = _ref4.length, length = _ref4$length === void 0 ? DEFAULT_LENGTH : _ref4$length, localizer = _ref4.localizer;\n    var end = localizer.add(start, length, \"day\");\n    return localizer.format({\n        start: start,\n        end: end\n    }, \"agendaHeaderFormat\");\n};\nvar VIEWS = (0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_13__[\"default\"])((0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_13__[\"default\"])({}, views.MONTH, MonthView), views.WEEK, Week), views.WORK_WEEK, WorkWeek), views.DAY, Day), views.AGENDA, Agenda);\nvar _excluded$1 = [\n    \"action\",\n    \"date\",\n    \"today\"\n];\nfunction moveDate(View, _ref) {\n    var action = _ref.action, date = _ref.date, today = _ref.today, props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, _excluded$1);\n    View = typeof View === \"string\" ? VIEWS[View] : View;\n    switch(action){\n        case navigate.TODAY:\n            date = today || new Date();\n            break;\n        case navigate.DATE:\n            break;\n        default:\n            invariant__WEBPACK_IMPORTED_MODULE_11___default()(View && typeof View.navigate === \"function\", \"Calendar View components must implement a static `.navigate(date, action)` method.s\");\n            date = View.navigate(date, action, props);\n    }\n    return date;\n}\n/**\n * Retrieve via an accessor-like property\n *\n *    accessor(obj, 'name')   // => retrieves obj['name']\n *    accessor(data, func)    // => retrieves func(data)\n *    ... otherwise null\n */ function accessor(data, field) {\n    var value = null;\n    if (typeof field === \"function\") value = field(data);\n    else if (typeof field === \"string\" && (0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(data) === \"object\" && data != null && field in data) value = data[field];\n    return value;\n}\nvar wrapAccessor = function wrapAccessor(acc) {\n    return function(data) {\n        return accessor(data, acc);\n    };\n};\nvar _excluded = [\n    \"view\",\n    \"date\",\n    \"getNow\",\n    \"onNavigate\"\n], _excluded2 = [\n    \"view\",\n    \"toolbar\",\n    \"events\",\n    \"backgroundEvents\",\n    \"resourceGroupingLayout\",\n    \"style\",\n    \"className\",\n    \"elementProps\",\n    \"date\",\n    \"getNow\",\n    \"length\",\n    \"showMultiDayTimes\",\n    \"onShowMore\",\n    \"doShowMoreDrillDown\",\n    \"components\",\n    \"formats\",\n    \"messages\",\n    \"culture\"\n];\nfunction viewNames(_views) {\n    if (Array.isArray(_views)) {\n        return _views;\n    }\n    var views = [];\n    for(var _i = 0, _Object$entries = Object.entries(_views); _i < _Object$entries.length; _i++){\n        var _Object$entries$_i = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_Object$entries[_i], 2), key = _Object$entries$_i[0], value = _Object$entries$_i[1];\n        if (value) {\n            views.push(key);\n        }\n    }\n    return views;\n}\nfunction isValidView(view, _ref) {\n    var _views = _ref.views;\n    var names = viewNames(_views);\n    return names.indexOf(view) !== -1;\n}\nvar Calendar = /*#__PURE__*/ function(_React$Component) {\n    function Calendar() {\n        var _this;\n        (0,_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this, Calendar);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = (0,_babel_runtime_helpers_esm_callSuper__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this, Calendar, [].concat(_args));\n        _this.getViews = function() {\n            var views = _this.props.views;\n            if (Array.isArray(views)) {\n                return lodash_transform__WEBPACK_IMPORTED_MODULE_36___default()(views, function(obj, name) {\n                    return obj[name] = VIEWS[name];\n                }, {});\n            }\n            if ((0,_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(views) === \"object\") {\n                return lodash_mapValues__WEBPACK_IMPORTED_MODULE_34___default()(views, function(value, key) {\n                    if (value === true) {\n                        return VIEWS[key];\n                    }\n                    return value;\n                });\n            }\n            return VIEWS;\n        };\n        _this.getView = function() {\n            var views = _this.getViews();\n            return views[_this.props.view];\n        };\n        _this.getDrilldownView = function(date) {\n            var _this$props = _this.props, view = _this$props.view, drilldownView = _this$props.drilldownView, getDrilldownView = _this$props.getDrilldownView;\n            if (!getDrilldownView) return drilldownView;\n            return getDrilldownView(date, view, Object.keys(_this.getViews()));\n        };\n        /**\n     *\n     * @param date\n     * @param viewComponent\n     * @param {'month'|'week'|'work_week'|'day'|'agenda'} [view] - optional\n     * parameter. It appears when range change on view changing. It could be handy\n     * when you need to have both: range and view type at once, i.e. for manage rbc\n     * state via url\n     */ _this.handleRangeChange = function(date, viewComponent, view) {\n            var _this$props2 = _this.props, onRangeChange = _this$props2.onRangeChange, localizer = _this$props2.localizer;\n            if (onRangeChange) {\n                if (viewComponent.range) {\n                    onRangeChange(viewComponent.range(date, {\n                        localizer: localizer\n                    }), view);\n                } else {\n                    if (true) {\n                        console.error(\"onRangeChange prop not supported for this view\");\n                    }\n                }\n            }\n        };\n        _this.handleNavigate = function(action, newDate) {\n            var _this$props3 = _this.props, view = _this$props3.view, date = _this$props3.date, getNow = _this$props3.getNow, onNavigate = _this$props3.onNavigate, props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props3, _excluded);\n            var ViewComponent = _this.getView();\n            var today = getNow();\n            date = moveDate(ViewComponent, (0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props), {}, {\n                action: action,\n                date: newDate || date || today,\n                today: today\n            }));\n            onNavigate(date, view, action);\n            _this.handleRangeChange(date, ViewComponent);\n        };\n        _this.handleViewChange = function(view) {\n            if (view !== _this.props.view && isValidView(view, _this.props)) {\n                _this.props.onView(view);\n            }\n            var views = _this.getViews();\n            _this.handleRangeChange(_this.props.date || _this.props.getNow(), views[view], view);\n        };\n        _this.handleSelectEvent = function() {\n            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                args[_key2] = arguments[_key2];\n            }\n            notify(_this.props.onSelectEvent, args);\n        };\n        _this.handleDoubleClickEvent = function() {\n            for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n                args[_key3] = arguments[_key3];\n            }\n            notify(_this.props.onDoubleClickEvent, args);\n        };\n        _this.handleKeyPressEvent = function() {\n            for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n                args[_key4] = arguments[_key4];\n            }\n            notify(_this.props.onKeyPressEvent, args);\n        };\n        _this.handleSelectSlot = function(slotInfo) {\n            notify(_this.props.onSelectSlot, slotInfo);\n        };\n        _this.handleDrillDown = function(date, view) {\n            var onDrillDown = _this.props.onDrillDown;\n            if (onDrillDown) {\n                onDrillDown(date, view, _this.drilldownView);\n                return;\n            }\n            if (view) _this.handleViewChange(view);\n            _this.handleNavigate(navigate.DATE, date);\n        };\n        _this.state = {\n            context: Calendar.getContext(_this.props)\n        };\n        return _this;\n    }\n    (0,_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Calendar, _React$Component);\n    return (0,_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(Calendar, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props4 = this.props, view = _this$props4.view, toolbar = _this$props4.toolbar, events = _this$props4.events, backgroundEvents = _this$props4.backgroundEvents, resourceGroupingLayout = _this$props4.resourceGroupingLayout, style = _this$props4.style, className = _this$props4.className, elementProps = _this$props4.elementProps, current = _this$props4.date, getNow = _this$props4.getNow, length = _this$props4.length, showMultiDayTimes = _this$props4.showMultiDayTimes, onShowMore = _this$props4.onShowMore, doShowMoreDrillDown = _this$props4.doShowMoreDrillDown;\n                _this$props4.components;\n                _this$props4.formats;\n                _this$props4.messages;\n                _this$props4.culture;\n                var props = (0,_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this$props4, _excluded2);\n                current = current || getNow();\n                var View = this.getView();\n                var _this$state$context = this.state.context, accessors = _this$state$context.accessors, components = _this$state$context.components, getters = _this$state$context.getters, localizer = _this$state$context.localizer, viewNames = _this$state$context.viewNames;\n                var CalToolbar = components.toolbar || Toolbar;\n                var label = View.title(current, {\n                    localizer: localizer,\n                    length: length\n                });\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(\"div\", Object.assign({}, elementProps, {\n                    className: (0,clsx__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(className, \"rbc-calendar\", props.rtl && \"rbc-rtl\"),\n                    style: style\n                }), toolbar && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(CalToolbar, {\n                    date: current,\n                    view: view,\n                    views: viewNames,\n                    label: label,\n                    onView: this.handleViewChange,\n                    onNavigate: this.handleNavigate,\n                    localizer: localizer\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_9___default().createElement(View, Object.assign({}, props, {\n                    events: events,\n                    backgroundEvents: backgroundEvents,\n                    date: current,\n                    getNow: getNow,\n                    length: length,\n                    localizer: localizer,\n                    getters: getters,\n                    components: components,\n                    accessors: accessors,\n                    showMultiDayTimes: showMultiDayTimes,\n                    getDrilldownView: this.getDrilldownView,\n                    onNavigate: this.handleNavigate,\n                    onDrillDown: this.handleDrillDown,\n                    onSelectEvent: this.handleSelectEvent,\n                    onDoubleClickEvent: this.handleDoubleClickEvent,\n                    onKeyPressEvent: this.handleKeyPressEvent,\n                    onSelectSlot: this.handleSelectSlot,\n                    onShowMore: onShowMore,\n                    doShowMoreDrillDown: doShowMoreDrillDown,\n                    resourceGroupingLayout: resourceGroupingLayout\n                })));\n            }\n        }\n    ], [\n        {\n            key: \"getDerivedStateFromProps\",\n            value: function getDerivedStateFromProps(nextProps) {\n                return {\n                    context: Calendar.getContext(nextProps)\n                };\n            }\n        },\n        {\n            key: \"getContext\",\n            value: function getContext(_ref2) {\n                var startAccessor = _ref2.startAccessor, endAccessor = _ref2.endAccessor, allDayAccessor = _ref2.allDayAccessor, tooltipAccessor = _ref2.tooltipAccessor, titleAccessor = _ref2.titleAccessor, resourceAccessor = _ref2.resourceAccessor, resourceIdAccessor = _ref2.resourceIdAccessor, resourceTitleAccessor = _ref2.resourceTitleAccessor, eventPropGetter = _ref2.eventPropGetter, backgroundEventPropGetter = _ref2.backgroundEventPropGetter, slotPropGetter = _ref2.slotPropGetter, slotGroupPropGetter = _ref2.slotGroupPropGetter, dayPropGetter = _ref2.dayPropGetter, view = _ref2.view, views = _ref2.views, localizer = _ref2.localizer, culture = _ref2.culture, _ref2$messages = _ref2.messages, messages$1 = _ref2$messages === void 0 ? {} : _ref2$messages, _ref2$components = _ref2.components, components = _ref2$components === void 0 ? {} : _ref2$components, _ref2$formats = _ref2.formats, formats = _ref2$formats === void 0 ? {} : _ref2$formats;\n                var names = viewNames(views);\n                var msgs = messages(messages$1);\n                return {\n                    viewNames: names,\n                    localizer: mergeWithDefaults(localizer, culture, formats, msgs),\n                    getters: {\n                        eventProp: function eventProp() {\n                            return eventPropGetter && eventPropGetter.apply(void 0, arguments) || {};\n                        },\n                        backgroundEventProp: function backgroundEventProp() {\n                            return backgroundEventPropGetter && backgroundEventPropGetter.apply(void 0, arguments) || {};\n                        },\n                        slotProp: function slotProp() {\n                            return slotPropGetter && slotPropGetter.apply(void 0, arguments) || {};\n                        },\n                        slotGroupProp: function slotGroupProp() {\n                            return slotGroupPropGetter && slotGroupPropGetter.apply(void 0, arguments) || {};\n                        },\n                        dayProp: function dayProp() {\n                            return dayPropGetter && dayPropGetter.apply(void 0, arguments) || {};\n                        }\n                    },\n                    components: lodash_defaults__WEBPACK_IMPORTED_MODULE_33___default()(components[view] || {}, lodash_omit__WEBPACK_IMPORTED_MODULE_35___default()(components, names), {\n                        eventWrapper: NoopWrapper,\n                        backgroundEventWrapper: NoopWrapper,\n                        eventContainerWrapper: NoopWrapper,\n                        dateCellWrapper: NoopWrapper,\n                        weekWrapper: NoopWrapper,\n                        timeSlotWrapper: NoopWrapper,\n                        timeGutterWrapper: NoopWrapper\n                    }),\n                    accessors: {\n                        start: wrapAccessor(startAccessor),\n                        end: wrapAccessor(endAccessor),\n                        allDay: wrapAccessor(allDayAccessor),\n                        tooltip: wrapAccessor(tooltipAccessor),\n                        title: wrapAccessor(titleAccessor),\n                        resource: wrapAccessor(resourceAccessor),\n                        resourceId: wrapAccessor(resourceIdAccessor),\n                        resourceTitle: wrapAccessor(resourceTitleAccessor)\n                    }\n                };\n            }\n        }\n    ]);\n}((react__WEBPACK_IMPORTED_MODULE_9___default().Component));\nCalendar.defaultProps = {\n    events: [],\n    backgroundEvents: [],\n    elementProps: {},\n    popup: false,\n    toolbar: true,\n    view: views.MONTH,\n    views: [\n        views.MONTH,\n        views.WEEK,\n        views.DAY,\n        views.AGENDA\n    ],\n    step: 30,\n    length: 30,\n    allDayMaxRows: Infinity,\n    doShowMoreDrillDown: true,\n    drilldownView: views.DAY,\n    titleAccessor: \"title\",\n    tooltipAccessor: \"title\",\n    allDayAccessor: \"allDay\",\n    startAccessor: \"start\",\n    endAccessor: \"end\",\n    resourceAccessor: \"resourceId\",\n    resourceIdAccessor: \"id\",\n    resourceTitleAccessor: \"title\",\n    longPressThreshold: 250,\n    getNow: function getNow() {\n        return new Date();\n    },\n    dayLayoutAlgorithm: \"overlap\"\n};\nvar Calendar$1 = (0,uncontrollable__WEBPACK_IMPORTED_MODULE_10__.uncontrollable)(Calendar, {\n    view: \"onView\",\n    date: \"onNavigate\",\n    selected: \"onSelectEvent\"\n});\nvar weekRangeFormat$5 = function weekRangeFormat(_ref, culture, local) {\n    var start = _ref.start, end = _ref.end;\n    return local.format(start, \"MMMM DD\", culture) + \" – \" + // updated to use this localizer 'eq()' method\n    local.format(end, local.eq(start, end, \"month\") ? \"DD\" : \"MMMM DD\", culture);\n};\nvar dateRangeFormat$5 = function dateRangeFormat(_ref2, culture, local) {\n    var start = _ref2.start, end = _ref2.end;\n    return local.format(start, \"L\", culture) + \" – \" + local.format(end, \"L\", culture);\n};\nvar timeRangeFormat$5 = function timeRangeFormat(_ref3, culture, local) {\n    var start = _ref3.start, end = _ref3.end;\n    return local.format(start, \"LT\", culture) + \" – \" + local.format(end, \"LT\", culture);\n};\nvar timeRangeStartFormat$5 = function timeRangeStartFormat(_ref4, culture, local) {\n    var start = _ref4.start;\n    return local.format(start, \"LT\", culture) + \" – \";\n};\nvar timeRangeEndFormat$5 = function timeRangeEndFormat(_ref5, culture, local) {\n    var end = _ref5.end;\n    return \" – \" + local.format(end, \"LT\", culture);\n};\nvar formats$5 = {\n    dateFormat: \"DD\",\n    dayFormat: \"DD ddd\",\n    weekdayFormat: \"ddd\",\n    selectRangeFormat: timeRangeFormat$5,\n    eventTimeRangeFormat: timeRangeFormat$5,\n    eventTimeRangeStartFormat: timeRangeStartFormat$5,\n    eventTimeRangeEndFormat: timeRangeEndFormat$5,\n    timeGutterFormat: \"LT\",\n    monthHeaderFormat: \"MMMM YYYY\",\n    dayHeaderFormat: \"dddd MMM DD\",\n    dayRangeHeaderFormat: weekRangeFormat$5,\n    agendaHeaderFormat: dateRangeFormat$5,\n    agendaDateFormat: \"ddd MMM DD\",\n    agendaTimeFormat: \"LT\",\n    agendaTimeRangeFormat: timeRangeFormat$5\n};\nfunction fixUnit$2(unit) {\n    var datePart = unit ? unit.toLowerCase() : unit;\n    if (datePart === \"FullYear\") {\n        datePart = \"year\";\n    } else if (!datePart) {\n        datePart = undefined;\n    }\n    return datePart;\n}\nfunction moment(moment) {\n    var locale = function locale(m, c) {\n        return c ? m.locale(c) : m;\n    };\n    function getTimezoneOffset(date) {\n        // ensures this gets cast to timezone\n        return moment(date).toDate().getTimezoneOffset();\n    }\n    function getDstOffset(start, end) {\n        var _st$_z$name, _st$_z;\n        // convert to moment, in case\n        // Calculate the offset in the timezone of the Events (local)\n        // not in the timezone of the calendar (moment.tz)\n        var st = moment(start).local();\n        var ed = moment(end).local();\n        // if not using moment timezone\n        if (!moment.tz) {\n            return st.toDate().getTimezoneOffset() - ed.toDate().getTimezoneOffset();\n        }\n        /**\n     * If using moment-timezone, and a timezone has been applied, then\n     * use this to get the proper timezone offset, otherwise default\n     * the timezone to the browser local\n     */ var tzName = (_st$_z$name = st === null || st === void 0 ? void 0 : (_st$_z = st._z) === null || _st$_z === void 0 ? void 0 : _st$_z.name) !== null && _st$_z$name !== void 0 ? _st$_z$name : moment.tz.guess();\n        var startOffset = moment.tz.zone(tzName).utcOffset(+st);\n        var endOffset = moment.tz.zone(tzName).utcOffset(+ed);\n        return startOffset - endOffset;\n    }\n    function getDayStartDstOffset(start) {\n        var dayStart = moment(start).startOf(\"day\");\n        return getDstOffset(dayStart, start);\n    }\n    /*** BEGIN localized date arithmetic methods with moment ***/ function defineComparators(a, b, unit) {\n        var datePart = fixUnit$2(unit);\n        var dtA = datePart ? moment(a).startOf(datePart) : moment(a);\n        var dtB = datePart ? moment(b).startOf(datePart) : moment(b);\n        return [\n            dtA,\n            dtB,\n            datePart\n        ];\n    }\n    function startOf() {\n        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var unit = arguments.length > 1 ? arguments[1] : undefined;\n        var datePart = fixUnit$2(unit);\n        if (datePart) {\n            return moment(date).startOf(datePart).toDate();\n        }\n        return moment(date).toDate();\n    }\n    function endOf() {\n        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var unit = arguments.length > 1 ? arguments[1] : undefined;\n        var datePart = fixUnit$2(unit);\n        if (datePart) {\n            return moment(date).endOf(datePart).toDate();\n        }\n        return moment(date).toDate();\n    }\n    // moment comparison operations *always* convert both sides to moment objects\n    // prior to running the comparisons\n    function eq(a, b, unit) {\n        var _defineComparators = defineComparators(a, b, unit), _defineComparators2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators, 3), dtA = _defineComparators2[0], dtB = _defineComparators2[1], datePart = _defineComparators2[2];\n        return dtA.isSame(dtB, datePart);\n    }\n    function neq(a, b, unit) {\n        return !eq(a, b, unit);\n    }\n    function gt(a, b, unit) {\n        var _defineComparators3 = defineComparators(a, b, unit), _defineComparators4 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators3, 3), dtA = _defineComparators4[0], dtB = _defineComparators4[1], datePart = _defineComparators4[2];\n        return dtA.isAfter(dtB, datePart);\n    }\n    function lt(a, b, unit) {\n        var _defineComparators5 = defineComparators(a, b, unit), _defineComparators6 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators5, 3), dtA = _defineComparators6[0], dtB = _defineComparators6[1], datePart = _defineComparators6[2];\n        return dtA.isBefore(dtB, datePart);\n    }\n    function gte(a, b, unit) {\n        var _defineComparators7 = defineComparators(a, b, unit), _defineComparators8 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators7, 3), dtA = _defineComparators8[0], dtB = _defineComparators8[1], datePart = _defineComparators8[2];\n        return dtA.isSameOrBefore(dtB, datePart);\n    }\n    function lte(a, b, unit) {\n        var _defineComparators9 = defineComparators(a, b, unit), _defineComparators10 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators9, 3), dtA = _defineComparators10[0], dtB = _defineComparators10[1], datePart = _defineComparators10[2];\n        return dtA.isSameOrBefore(dtB, datePart);\n    }\n    function inRange(day, min, max) {\n        var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"day\";\n        var datePart = fixUnit$2(unit);\n        var mDay = moment(day);\n        var mMin = moment(min);\n        var mMax = moment(max);\n        return mDay.isBetween(mMin, mMax, datePart, \"[]\");\n    }\n    function min(dateA, dateB) {\n        var dtA = moment(dateA);\n        var dtB = moment(dateB);\n        var minDt = moment.min(dtA, dtB);\n        return minDt.toDate();\n    }\n    function max(dateA, dateB) {\n        var dtA = moment(dateA);\n        var dtB = moment(dateB);\n        var maxDt = moment.max(dtA, dtB);\n        return maxDt.toDate();\n    }\n    function merge(date, time) {\n        if (!date && !time) return null;\n        var tm = moment(time).format(\"HH:mm:ss\");\n        var dt = moment(date).startOf(\"day\").format(\"MM/DD/YYYY\");\n        // We do it this way to avoid issues when timezone switching\n        return moment(\"\".concat(dt, \" \").concat(tm), \"MM/DD/YYYY HH:mm:ss\").toDate();\n    }\n    function add(date, adder, unit) {\n        var datePart = fixUnit$2(unit);\n        return moment(date).add(adder, datePart).toDate();\n    }\n    function range(start, end) {\n        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"day\";\n        var datePart = fixUnit$2(unit);\n        // because the add method will put these in tz, we have to start that way\n        var current = moment(start).toDate();\n        var days = [];\n        while(lte(current, end)){\n            days.push(current);\n            current = add(current, 1, datePart);\n        }\n        return days;\n    }\n    function ceil(date, unit) {\n        var datePart = fixUnit$2(unit);\n        var floor = startOf(date, datePart);\n        return eq(floor, date) ? floor : add(floor, 1, datePart);\n    }\n    function diff(a, b) {\n        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"day\";\n        var datePart = fixUnit$2(unit);\n        // don't use 'defineComparators' here, as we don't want to mutate the values\n        var dtA = moment(a);\n        var dtB = moment(b);\n        return dtB.diff(dtA, datePart);\n    }\n    function minutes(date) {\n        var dt = moment(date);\n        return dt.minutes();\n    }\n    function firstOfWeek(culture) {\n        var data = culture ? moment.localeData(culture) : moment.localeData();\n        return data ? data.firstDayOfWeek() : 0;\n    }\n    function firstVisibleDay(date) {\n        return moment(date).startOf(\"month\").startOf(\"week\").toDate();\n    }\n    function lastVisibleDay(date) {\n        return moment(date).endOf(\"month\").endOf(\"week\").toDate();\n    }\n    function visibleDays(date) {\n        var current = firstVisibleDay(date);\n        var last = lastVisibleDay(date);\n        var days = [];\n        while(lte(current, last)){\n            days.push(current);\n            current = add(current, 1, \"d\");\n        }\n        return days;\n    }\n    /*** END localized date arithmetic methods with moment ***/ /**\n   * Moved from TimeSlots.js, this method overrides the method of the same name\n   * in the localizer.js, using moment to construct the js Date\n   * @param {Date} dt - date to start with\n   * @param {Number} minutesFromMidnight\n   * @param {Number} offset\n   * @returns {Date}\n   */ function getSlotDate(dt, minutesFromMidnight, offset) {\n        return moment(dt).startOf(\"day\").minute(minutesFromMidnight + offset).toDate();\n    }\n    // moment will automatically handle DST differences in it's calculations\n    function getTotalMin(start, end) {\n        return diff(start, end, \"minutes\");\n    }\n    function getMinutesFromMidnight(start) {\n        var dayStart = moment(start).startOf(\"day\");\n        var day = moment(start);\n        return day.diff(dayStart, \"minutes\") + getDayStartDstOffset(start);\n    }\n    // These two are used by DateSlotMetrics\n    function continuesPrior(start, first) {\n        var mStart = moment(start);\n        var mFirst = moment(first);\n        return mStart.isBefore(mFirst, \"day\");\n    }\n    function continuesAfter(start, end, last) {\n        var mEnd = moment(end);\n        var mLast = moment(last);\n        return mEnd.isSameOrAfter(mLast, \"minutes\");\n    }\n    function daySpan(start, end) {\n        var mStart = moment(start);\n        var mEnd = moment(end);\n        var dur = moment.duration(mEnd.diff(mStart));\n        return dur.days();\n    }\n    // These two are used by eventLevels\n    function sortEvents(_ref6) {\n        var _ref6$evtA = _ref6.evtA, aStart = _ref6$evtA.start, aEnd = _ref6$evtA.end, aAllDay = _ref6$evtA.allDay, _ref6$evtB = _ref6.evtB, bStart = _ref6$evtB.start, bEnd = _ref6$evtB.end, bAllDay = _ref6$evtB.allDay;\n        var startSort = +startOf(aStart, \"day\") - +startOf(bStart, \"day\");\n        var durA = daySpan(aStart, aEnd);\n        var durB = daySpan(bStart, bEnd);\n        return startSort || // sort by start Day first\n        durB - durA || // events spanning multiple days go first\n        !!bAllDay - !!aAllDay || // then allDay single day events\n        +aStart - +bStart || // then sort by start time *don't need moment conversion here\n        +aEnd - +bEnd // then sort by end time *don't need moment conversion here either\n        ;\n    }\n    function inEventRange(_ref7) {\n        var _ref7$event = _ref7.event, start = _ref7$event.start, end = _ref7$event.end, _ref7$range = _ref7.range, rangeStart = _ref7$range.start, rangeEnd = _ref7$range.end;\n        var startOfDay = moment(start).startOf(\"day\");\n        var eEnd = moment(end);\n        var rStart = moment(rangeStart);\n        var rEnd = moment(rangeEnd);\n        var startsBeforeEnd = startOfDay.isSameOrBefore(rEnd, \"day\");\n        // when the event is zero duration we need to handle a bit differently\n        var sameMin = !startOfDay.isSame(eEnd, \"minutes\");\n        var endsAfterStart = sameMin ? eEnd.isAfter(rStart, \"minutes\") : eEnd.isSameOrAfter(rStart, \"minutes\");\n        return startsBeforeEnd && endsAfterStart;\n    }\n    function isSameDate(date1, date2) {\n        var dt = moment(date1);\n        var dt2 = moment(date2);\n        return dt.isSame(dt2, \"day\");\n    }\n    /**\n   * This method, called once in the localizer constructor, is used by eventLevels\n   * 'eventSegments()' to assist in determining the 'span' of the event in the display,\n   * specifically when using a timezone that is greater than the browser native timezone.\n   * @returns number\n   */ function browserTZOffset() {\n        /**\n     * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from\n     * what you see in it's string, so we have to jump through some hoops to get a value\n     * we can actually compare.\n     */ var dt = new Date();\n        var neg = /-/.test(dt.toString()) ? \"-\" : \"\";\n        var dtOffset = dt.getTimezoneOffset();\n        var comparator = Number(\"\".concat(neg).concat(Math.abs(dtOffset)));\n        // moment correctly provides positive/negative offset, as expected\n        var mtOffset = moment().utcOffset();\n        return mtOffset > comparator ? 1 : 0;\n    }\n    return new DateLocalizer({\n        formats: formats$5,\n        firstOfWeek: firstOfWeek,\n        firstVisibleDay: firstVisibleDay,\n        lastVisibleDay: lastVisibleDay,\n        visibleDays: visibleDays,\n        format: function format(value, _format, culture) {\n            return locale(moment(value), culture).format(_format);\n        },\n        lt: lt,\n        lte: lte,\n        gt: gt,\n        gte: gte,\n        eq: eq,\n        neq: neq,\n        merge: merge,\n        inRange: inRange,\n        startOf: startOf,\n        endOf: endOf,\n        range: range,\n        add: add,\n        diff: diff,\n        ceil: ceil,\n        min: min,\n        max: max,\n        minutes: minutes,\n        getSlotDate: getSlotDate,\n        getTimezoneOffset: getTimezoneOffset,\n        getDstOffset: getDstOffset,\n        getTotalMin: getTotalMin,\n        getMinutesFromMidnight: getMinutesFromMidnight,\n        continuesPrior: continuesPrior,\n        continuesAfter: continuesAfter,\n        sortEvents: sortEvents,\n        inEventRange: inEventRange,\n        isSameDate: isSameDate,\n        daySpan: daySpan,\n        browserTZOffset: browserTZOffset\n    });\n}\nfunction pluralizeUnit(unit) {\n    return /s$/.test(unit) ? unit : unit + \"s\";\n}\nvar weekRangeFormat$4 = function weekRangeFormat(_ref, culture, local) {\n    var start = _ref.start, end = _ref.end;\n    return local.format(start, \"MMMM dd\", culture) + \" – \" + // updated to use this localizer 'eq()' method\n    local.format(end, local.eq(start, end, \"month\") ? \"dd\" : \"MMMM dd\", culture);\n};\nvar dateRangeFormat$4 = function dateRangeFormat(_ref2, culture, local) {\n    var start = _ref2.start, end = _ref2.end;\n    return local.format(start, \"D\", culture) + \" – \" + local.format(end, \"D\", culture);\n};\nvar timeRangeFormat$4 = function timeRangeFormat(_ref3, culture, local) {\n    var start = _ref3.start, end = _ref3.end;\n    return local.format(start, \"t\", culture) + \" – \" + local.format(end, \"t\", culture);\n};\nvar timeRangeStartFormat$4 = function timeRangeStartFormat(_ref4, culture, local) {\n    var start = _ref4.start;\n    return local.format(start, \"t\", culture) + \" – \";\n};\nvar timeRangeEndFormat$4 = function timeRangeEndFormat(_ref5, culture, local) {\n    var end = _ref5.end;\n    return \" – \" + local.format(end, \"t\", culture);\n};\nvar formats$4 = {\n    dateFormat: \"dd\",\n    dayFormat: \"dd EEE\",\n    weekdayFormat: \"EEE\",\n    selectRangeFormat: timeRangeFormat$4,\n    eventTimeRangeFormat: timeRangeFormat$4,\n    eventTimeRangeStartFormat: timeRangeStartFormat$4,\n    eventTimeRangeEndFormat: timeRangeEndFormat$4,\n    timeGutterFormat: \"t\",\n    monthHeaderFormat: \"MMMM yyyy\",\n    dayHeaderFormat: \"EEEE MMM dd\",\n    dayRangeHeaderFormat: weekRangeFormat$4,\n    agendaHeaderFormat: dateRangeFormat$4,\n    agendaDateFormat: \"EEE MMM dd\",\n    agendaTimeFormat: \"t\",\n    agendaTimeRangeFormat: timeRangeFormat$4\n};\nfunction fixUnit$1(unit) {\n    var datePart = unit ? pluralizeUnit(unit.toLowerCase()) : unit;\n    if (datePart === \"FullYear\") {\n        datePart = \"year\";\n    } else if (!datePart) {\n        datePart = undefined;\n    }\n    return datePart;\n}\n// Luxon does not currently have weekInfo by culture\n// Luxon uses 1 based values for month and weekday\n// So we default to Sunday (7)\nfunction luxon(DateTime) {\n    var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref6$firstDayOfWeek = _ref6.firstDayOfWeek, firstDayOfWeek = _ref6$firstDayOfWeek === void 0 ? 7 : _ref6$firstDayOfWeek;\n    function formatDate(value, format) {\n        return DateTime.fromJSDate(value).toFormat(format);\n    }\n    function formatDateWithCulture(value, culture, format) {\n        return DateTime.fromJSDate(value).setLocale(culture).toFormat(format);\n    }\n    /*** BEGIN localized date arithmetic methods with Luxon ***/ function defineComparators(a, b, unit) {\n        var datePart = fixUnit$1(unit);\n        var dtA = datePart ? DateTime.fromJSDate(a).startOf(datePart) : DateTime.fromJSDate(a);\n        var dtB = datePart ? DateTime.fromJSDate(b).startOf(datePart) : DateTime.fromJSDate(b);\n        return [\n            dtA,\n            dtB,\n            datePart\n        ];\n    }\n    // Since Luxon (and current Intl API) has no support\n    // for culture based weekInfo, we need to handle\n    // the start of the week differently\n    // depending on locale, the firstDayOfWeek could also be Saturday, Sunday or Monday\n    function startOfDTWeek(dtObj) {\n        var weekday = dtObj.weekday;\n        if (weekday === firstDayOfWeek) {\n            return dtObj.startOf(\"day\"); // already beginning of week\n        } else if (firstDayOfWeek === 1) {\n            return dtObj.startOf(\"week\"); // fow is Monday, which is Luxon default\n        }\n        var diff = firstDayOfWeek === 7 ? weekday : weekday + (7 - firstDayOfWeek);\n        return dtObj.minus({\n            day: diff\n        }).startOf(\"day\");\n    }\n    function endOfDTWeek(dtObj) {\n        var weekday = dtObj.weekday;\n        var eow = firstDayOfWeek === 1 ? 7 : firstDayOfWeek - 1;\n        if (weekday === eow) {\n            return dtObj.endOf(\"day\"); // already last day of the week\n        } else if (firstDayOfWeek === 1) {\n            return dtObj.endOf(\"week\"); // use Luxon default (Sunday)\n        }\n        var fromDate = firstDayOfWeek > eow ? dtObj.plus({\n            day: firstDayOfWeek - eow\n        }) : dtObj;\n        return fromDate.set({\n            weekday: eow\n        }).endOf(\"day\");\n    }\n    // This returns a DateTime instance\n    function startOfDT() {\n        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n        var unit = arguments.length > 1 ? arguments[1] : undefined;\n        var datePart = fixUnit$1(unit);\n        if (datePart) {\n            var dt = DateTime.fromJSDate(date);\n            return datePart.includes(\"week\") ? startOfDTWeek(dt) : dt.startOf(datePart);\n        }\n        return DateTime.fromJSDate(date);\n    }\n    function firstOfWeek() {\n        return firstDayOfWeek;\n    }\n    // This returns a JS Date from a DateTime instance\n    function startOf() {\n        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n        var unit = arguments.length > 1 ? arguments[1] : undefined;\n        return startOfDT(date, unit).toJSDate();\n    }\n    // This returns a DateTime instance\n    function endOfDT() {\n        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n        var unit = arguments.length > 1 ? arguments[1] : undefined;\n        var datePart = fixUnit$1(unit);\n        if (datePart) {\n            var dt = DateTime.fromJSDate(date);\n            return datePart.includes(\"week\") ? endOfDTWeek(dt) : dt.endOf(datePart);\n        }\n        return DateTime.fromJSDate(date);\n    }\n    function endOf() {\n        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n        var unit = arguments.length > 1 ? arguments[1] : undefined;\n        return endOfDT(date, unit).toJSDate();\n    }\n    function eq(a, b, unit) {\n        var _defineComparators = defineComparators(a, b, unit), _defineComparators2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators, 2), dtA = _defineComparators2[0], dtB = _defineComparators2[1];\n        return +dtA == +dtB;\n    }\n    function neq(a, b, unit) {\n        return !eq(a, b, unit);\n    }\n    function gt(a, b, unit) {\n        var _defineComparators3 = defineComparators(a, b, unit), _defineComparators4 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators3, 2), dtA = _defineComparators4[0], dtB = _defineComparators4[1];\n        return +dtA > +dtB;\n    }\n    function lt(a, b, unit) {\n        var _defineComparators5 = defineComparators(a, b, unit), _defineComparators6 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators5, 2), dtA = _defineComparators6[0], dtB = _defineComparators6[1];\n        return +dtA < +dtB;\n    }\n    function gte(a, b, unit) {\n        var _defineComparators7 = defineComparators(a, b, unit), _defineComparators8 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators7, 2), dtA = _defineComparators8[0], dtB = _defineComparators8[1];\n        return +dtA >= +dtB;\n    }\n    function lte(a, b, unit) {\n        var _defineComparators9 = defineComparators(a, b, unit), _defineComparators10 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators9, 2), dtA = _defineComparators10[0], dtB = _defineComparators10[1];\n        return +dtA <= +dtB;\n    }\n    function inRange(day, min, max) {\n        var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"day\";\n        var datePart = fixUnit$1(unit);\n        var mDay = startOfDT(day, datePart);\n        var mMin = startOfDT(min, datePart);\n        var mMax = startOfDT(max, datePart);\n        return +mDay >= +mMin && +mDay <= +mMax;\n    }\n    function min(dateA, dateB) {\n        var dtA = DateTime.fromJSDate(dateA);\n        var dtB = DateTime.fromJSDate(dateB);\n        var minDt = DateTime.min(dtA, dtB);\n        return minDt.toJSDate();\n    }\n    function max(dateA, dateB) {\n        var dtA = DateTime.fromJSDate(dateA);\n        var dtB = DateTime.fromJSDate(dateB);\n        var maxDt = DateTime.max(dtA, dtB);\n        return maxDt.toJSDate();\n    }\n    function merge(date, time) {\n        if (!date && !time) return null;\n        var tm = DateTime.fromJSDate(time);\n        var dt = startOfDT(date, \"day\");\n        return dt.set({\n            hour: tm.hour,\n            minute: tm.minute,\n            second: tm.second,\n            millisecond: tm.millisecond\n        }).toJSDate();\n    }\n    function add(date, adder, unit) {\n        var datePart = fixUnit$1(unit);\n        return DateTime.fromJSDate(date).plus((0,_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_13__[\"default\"])({}, datePart, adder)).toJSDate();\n    }\n    function range(start, end) {\n        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"day\";\n        var datePart = fixUnit$1(unit);\n        var current = DateTime.fromJSDate(start).toJSDate(); // this is to get it to tz\n        var days = [];\n        while(lte(current, end)){\n            days.push(current);\n            current = add(current, 1, datePart);\n        }\n        return days;\n    }\n    function ceil(date, unit) {\n        var datePart = fixUnit$1(unit);\n        var floor = startOf(date, datePart);\n        return eq(floor, date) ? floor : add(floor, 1, datePart);\n    }\n    function diff(a, b) {\n        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"day\";\n        var datePart = fixUnit$1(unit);\n        // don't use 'defineComparators' here, as we don't want to mutate the values\n        var dtA = DateTime.fromJSDate(a);\n        var dtB = DateTime.fromJSDate(b);\n        return Math.floor(dtB.diff(dtA, datePart, {\n            conversionAccuracy: \"longterm\"\n        }).toObject()[datePart]);\n    }\n    function firstVisibleDay(date) {\n        var startOfMonth = startOfDT(date, \"month\");\n        return startOfDTWeek(startOfMonth).toJSDate();\n    }\n    function lastVisibleDay(date) {\n        var endOfMonth = endOfDT(date, \"month\");\n        return endOfDTWeek(endOfMonth).toJSDate();\n    }\n    function visibleDays(date) {\n        var current = firstVisibleDay(date);\n        var last = lastVisibleDay(date);\n        var days = [];\n        while(lte(current, last)){\n            days.push(current);\n            current = add(current, 1, \"day\");\n        }\n        return days;\n    }\n    /*** END localized date arithmetic methods with moment ***/ /**\n   * Moved from TimeSlots.js, this method overrides the method of the same name\n   * in the localizer.js, using moment to construct the js Date\n   * @param {Date} dt - date to start with\n   * @param {Number} minutesFromMidnight\n   * @param {Number} offset\n   * @returns {Date}\n   */ function getSlotDate(dt, minutesFromMidnight, offset) {\n        return startOfDT(dt, \"day\").set({\n            minutes: minutesFromMidnight + offset\n        }).toJSDate();\n    }\n    // Luxon will automatically handle DST differences in it's calculations\n    function getTotalMin(start, end) {\n        return diff(start, end, \"minutes\");\n    }\n    function getMinutesFromMidnight(start) {\n        var dayStart = startOfDT(start, \"day\");\n        var day = DateTime.fromJSDate(start);\n        return Math.round(day.diff(dayStart, \"minutes\", {\n            conversionAccuracy: \"longterm\"\n        }).toObject().minutes);\n    }\n    // These two are used by DateSlotMetrics\n    function continuesPrior(start, first) {\n        return lt(start, first);\n    }\n    function continuesAfter(start, end, last) {\n        return gte(end, last);\n    }\n    function daySpan(start, end) {\n        var dtStart = DateTime.fromJSDate(start);\n        var dtEnd = DateTime.fromJSDate(end);\n        return dtEnd.diff(dtStart).as(\"days\");\n    }\n    // These two are used by eventLevels\n    function sortEvents(_ref7) {\n        var _ref7$evtA = _ref7.evtA, aStart = _ref7$evtA.start, aEnd = _ref7$evtA.end, aAllDay = _ref7$evtA.allDay, _ref7$evtB = _ref7.evtB, bStart = _ref7$evtB.start, bEnd = _ref7$evtB.end, bAllDay = _ref7$evtB.allDay;\n        var startSort = +startOf(aStart, \"day\") - +startOf(bStart, \"day\");\n        var durA = daySpan(aStart, aEnd);\n        var durB = daySpan(bStart, bEnd);\n        return startSort || // sort by start Day first\n        durB - durA || // events spanning multiple days go first\n        !!bAllDay - !!aAllDay || // then allDay single day events\n        +aStart - +bStart || // then sort by start time *don't need moment conversion here\n        +aEnd - +bEnd // then sort by end time *don't need moment conversion here either\n        ;\n    }\n    function inEventRange(_ref8) {\n        var _ref8$event = _ref8.event, start = _ref8$event.start, end = _ref8$event.end, _ref8$range = _ref8.range, rangeStart = _ref8$range.start, rangeEnd = _ref8$range.end;\n        var eStart = startOf(start, \"day\");\n        var startsBeforeEnd = lte(eStart, rangeEnd, \"day\");\n        // when the event is zero duration we need to handle a bit differently\n        var sameMin = neq(eStart, end, \"minutes\");\n        var endsAfterStart = sameMin ? gt(end, rangeStart, \"minutes\") : gte(end, rangeStart, \"minutes\");\n        return startsBeforeEnd && endsAfterStart;\n    }\n    // moment treats 'day' and 'date' equality very different\n    // moment(date1).isSame(date2, 'day') would test that they were both the same day of the week\n    // moment(date1).isSame(date2, 'date') would test that they were both the same date of the month of the year\n    function isSameDate(date1, date2) {\n        var dt = DateTime.fromJSDate(date1);\n        var dt2 = DateTime.fromJSDate(date2);\n        return dt.hasSame(dt2, \"day\");\n    }\n    /**\n   * This method, called once in the localizer constructor, is used by eventLevels\n   * 'eventSegments()' to assist in determining the 'span' of the event in the display,\n   * specifically when using a timezone that is greater than the browser native timezone.\n   * @returns number\n   */ function browserTZOffset() {\n        /**\n     * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from\n     * what you see in it's string, so we have to jump through some hoops to get a value\n     * we can actually compare.\n     */ var dt = new Date();\n        var neg = /-/.test(dt.toString()) ? \"-\" : \"\";\n        var dtOffset = dt.getTimezoneOffset();\n        var comparator = Number(\"\".concat(neg).concat(Math.abs(dtOffset)));\n        // moment correctly provides positive/negative offset, as expected\n        var mtOffset = DateTime.local().offset;\n        return mtOffset > comparator ? 1 : 0;\n    }\n    return new DateLocalizer({\n        format: function format(value, _format, culture) {\n            if (culture) {\n                return formatDateWithCulture(value, culture, _format);\n            }\n            return formatDate(value, _format);\n        },\n        formats: formats$4,\n        firstOfWeek: firstOfWeek,\n        firstVisibleDay: firstVisibleDay,\n        lastVisibleDay: lastVisibleDay,\n        visibleDays: visibleDays,\n        lt: lt,\n        lte: lte,\n        gt: gt,\n        gte: gte,\n        eq: eq,\n        neq: neq,\n        merge: merge,\n        inRange: inRange,\n        startOf: startOf,\n        endOf: endOf,\n        range: range,\n        add: add,\n        diff: diff,\n        ceil: ceil,\n        min: min,\n        max: max,\n        getSlotDate: getSlotDate,\n        getTotalMin: getTotalMin,\n        getMinutesFromMidnight: getMinutesFromMidnight,\n        continuesPrior: continuesPrior,\n        continuesAfter: continuesAfter,\n        sortEvents: sortEvents,\n        inEventRange: inEventRange,\n        isSameDate: isSameDate,\n        daySpan: daySpan,\n        browserTZOffset: browserTZOffset\n    });\n}\nvar dateRangeFormat$3 = function dateRangeFormat(_ref, culture, local) {\n    var start = _ref.start, end = _ref.end;\n    return local.format(start, \"d\", culture) + \" – \" + local.format(end, \"d\", culture);\n};\nvar timeRangeFormat$3 = function timeRangeFormat(_ref2, culture, local) {\n    var start = _ref2.start, end = _ref2.end;\n    return local.format(start, \"t\", culture) + \" – \" + local.format(end, \"t\", culture);\n};\nvar timeRangeStartFormat$3 = function timeRangeStartFormat(_ref3, culture, local) {\n    var start = _ref3.start;\n    return local.format(start, \"t\", culture) + \" – \";\n};\nvar timeRangeEndFormat$3 = function timeRangeEndFormat(_ref4, culture, local) {\n    var end = _ref4.end;\n    return \" – \" + local.format(end, \"t\", culture);\n};\nvar weekRangeFormat$3 = function weekRangeFormat(_ref5, culture, local) {\n    var start = _ref5.start, end = _ref5.end;\n    return local.format(start, \"MMM dd\", culture) + \" – \" + local.format(end, (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.eq)(start, end, \"month\") ? \"dd\" : \"MMM dd\", culture);\n};\nvar formats$3 = {\n    dateFormat: \"dd\",\n    dayFormat: \"ddd dd/MM\",\n    weekdayFormat: \"ddd\",\n    selectRangeFormat: timeRangeFormat$3,\n    eventTimeRangeFormat: timeRangeFormat$3,\n    eventTimeRangeStartFormat: timeRangeStartFormat$3,\n    eventTimeRangeEndFormat: timeRangeEndFormat$3,\n    timeGutterFormat: \"t\",\n    monthHeaderFormat: \"Y\",\n    dayHeaderFormat: \"dddd MMM dd\",\n    dayRangeHeaderFormat: weekRangeFormat$3,\n    agendaHeaderFormat: dateRangeFormat$3,\n    agendaDateFormat: \"ddd MMM dd\",\n    agendaTimeFormat: \"t\",\n    agendaTimeRangeFormat: timeRangeFormat$3\n};\nfunction oldGlobalize(globalize) {\n    function getCulture(culture) {\n        return culture ? globalize.findClosestCulture(culture) : globalize.culture();\n    }\n    function firstOfWeek(culture) {\n        culture = getCulture(culture);\n        return culture && culture.calendar.firstDay || 0;\n    }\n    return new DateLocalizer({\n        firstOfWeek: firstOfWeek,\n        formats: formats$3,\n        format: function format(value, _format, culture) {\n            return globalize.format(value, _format, culture);\n        }\n    });\n}\n// TODO: fix the globalizeLocalizer to work with globalize 1.x\nvar dateRangeFormat$2 = function dateRangeFormat(_ref, culture, local) {\n    var start = _ref.start, end = _ref.end;\n    return local.format(start, {\n        date: \"short\"\n    }, culture) + \" – \" + local.format(end, {\n        date: \"short\"\n    }, culture);\n};\nvar timeRangeFormat$2 = function timeRangeFormat(_ref2, culture, local) {\n    var start = _ref2.start, end = _ref2.end;\n    return local.format(start, {\n        time: \"short\"\n    }, culture) + \" – \" + local.format(end, {\n        time: \"short\"\n    }, culture);\n};\nvar timeRangeStartFormat$2 = function timeRangeStartFormat(_ref3, culture, local) {\n    var start = _ref3.start;\n    return local.format(start, {\n        time: \"short\"\n    }, culture) + \" – \";\n};\nvar timeRangeEndFormat$2 = function timeRangeEndFormat(_ref4, culture, local) {\n    var end = _ref4.end;\n    return \" – \" + local.format(end, {\n        time: \"short\"\n    }, culture);\n};\nvar weekRangeFormat$2 = function weekRangeFormat(_ref5, culture, local) {\n    var start = _ref5.start, end = _ref5.end;\n    return local.format(start, \"MMM dd\", culture) + \" – \" + local.format(end, (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.eq)(start, end, \"month\") ? \"dd\" : \"MMM dd\", culture);\n};\nvar formats$2 = {\n    dateFormat: \"dd\",\n    dayFormat: \"eee dd/MM\",\n    weekdayFormat: \"eee\",\n    selectRangeFormat: timeRangeFormat$2,\n    eventTimeRangeFormat: timeRangeFormat$2,\n    eventTimeRangeStartFormat: timeRangeStartFormat$2,\n    eventTimeRangeEndFormat: timeRangeEndFormat$2,\n    timeGutterFormat: {\n        time: \"short\"\n    },\n    monthHeaderFormat: \"MMMM yyyy\",\n    dayHeaderFormat: \"eeee MMM dd\",\n    dayRangeHeaderFormat: weekRangeFormat$2,\n    agendaHeaderFormat: dateRangeFormat$2,\n    agendaDateFormat: \"eee MMM dd\",\n    agendaTimeFormat: {\n        time: \"short\"\n    },\n    agendaTimeRangeFormat: timeRangeFormat$2\n};\nfunction globalize(globalize) {\n    var locale = function locale(culture) {\n        return culture ? globalize(culture) : globalize;\n    };\n    // return the first day of the week from the locale data. Defaults to 'world'\n    // territory if no territory is derivable from CLDR.\n    // Failing to use CLDR supplemental (not loaded?), revert to the original\n    // method of getting first day of week.\n    function firstOfWeek(culture) {\n        try {\n            var days = [\n                \"sun\",\n                \"mon\",\n                \"tue\",\n                \"wed\",\n                \"thu\",\n                \"fri\",\n                \"sat\"\n            ];\n            var cldr = locale(culture).cldr;\n            var territory = cldr.attributes.territory;\n            var weekData = cldr.get(\"supplemental\").weekData;\n            var firstDay = weekData.firstDay[territory || \"001\"];\n            return days.indexOf(firstDay);\n        } catch (e) {\n            if (true) {\n                console.error(\"Failed to accurately determine first day of the week.\" + \" Is supplemental data loaded into CLDR?\");\n            }\n            // maybe cldr supplemental is not loaded? revert to original method\n            var date = new Date();\n            //cldr-data doesn't seem to be zero based\n            var localeDay = Math.max(parseInt(locale(culture).formatDate(date, {\n                raw: \"e\"\n            }), 10) - 1, 0);\n            return Math.abs(date.getDay() - localeDay);\n        }\n    }\n    if (!globalize.load) return oldGlobalize(globalize);\n    return new DateLocalizer({\n        firstOfWeek: firstOfWeek,\n        formats: formats$2,\n        format: function format(value, _format, culture) {\n            _format = typeof _format === \"string\" ? {\n                raw: _format\n            } : _format;\n            return locale(culture).formatDate(value, _format);\n        }\n    });\n}\nvar dateRangeFormat$1 = function dateRangeFormat(_ref, culture, local) {\n    var start = _ref.start, end = _ref.end;\n    return \"\".concat(local.format(start, \"P\", culture), \" – \").concat(local.format(end, \"P\", culture));\n};\nvar timeRangeFormat$1 = function timeRangeFormat(_ref2, culture, local) {\n    var start = _ref2.start, end = _ref2.end;\n    return \"\".concat(local.format(start, \"p\", culture), \" – \").concat(local.format(end, \"p\", culture));\n};\nvar timeRangeStartFormat$1 = function timeRangeStartFormat(_ref3, culture, local) {\n    var start = _ref3.start;\n    return \"\".concat(local.format(start, \"h:mma\", culture), \" – \");\n};\nvar timeRangeEndFormat$1 = function timeRangeEndFormat(_ref4, culture, local) {\n    var end = _ref4.end;\n    return \" – \".concat(local.format(end, \"h:mma\", culture));\n};\nvar weekRangeFormat$1 = function weekRangeFormat(_ref5, culture, local) {\n    var start = _ref5.start, end = _ref5.end;\n    return \"\".concat(local.format(start, \"MMMM dd\", culture), \" – \").concat(local.format(end, (0,date_arithmetic__WEBPACK_IMPORTED_MODULE_12__.eq)(start, end, \"month\") ? \"dd\" : \"MMMM dd\", culture));\n};\nvar formats$1 = {\n    dateFormat: \"dd\",\n    dayFormat: \"dd eee\",\n    weekdayFormat: \"ccc\",\n    selectRangeFormat: timeRangeFormat$1,\n    eventTimeRangeFormat: timeRangeFormat$1,\n    eventTimeRangeStartFormat: timeRangeStartFormat$1,\n    eventTimeRangeEndFormat: timeRangeEndFormat$1,\n    timeGutterFormat: \"p\",\n    monthHeaderFormat: \"MMMM yyyy\",\n    dayHeaderFormat: \"cccc MMM dd\",\n    dayRangeHeaderFormat: weekRangeFormat$1,\n    agendaHeaderFormat: dateRangeFormat$1,\n    agendaDateFormat: \"ccc MMM dd\",\n    agendaTimeFormat: \"p\",\n    agendaTimeRangeFormat: timeRangeFormat$1\n};\nvar dateFnsLocalizer = function dateFnsLocalizer(_ref6) {\n    var startOfWeek = _ref6.startOfWeek, getDay = _ref6.getDay, _format = _ref6.format, locales = _ref6.locales;\n    return new DateLocalizer({\n        formats: formats$1,\n        firstOfWeek: function firstOfWeek(culture) {\n            return getDay(startOfWeek(new Date(), {\n                locale: locales[culture]\n            }));\n        },\n        format: function format(value, formatString, culture) {\n            return _format(new Date(value), formatString, {\n                locale: locales[culture]\n            });\n        }\n    });\n};\nvar weekRangeFormat = function weekRangeFormat(_ref, culture, local) {\n    var start = _ref.start, end = _ref.end;\n    return local.format(start, \"MMMM DD\", culture) + \" – \" + // updated to use this localizer 'eq()' method\n    local.format(end, local.eq(start, end, \"month\") ? \"DD\" : \"MMMM DD\", culture);\n};\nvar dateRangeFormat = function dateRangeFormat(_ref2, culture, local) {\n    var start = _ref2.start, end = _ref2.end;\n    return local.format(start, \"L\", culture) + \" – \" + local.format(end, \"L\", culture);\n};\nvar timeRangeFormat = function timeRangeFormat(_ref3, culture, local) {\n    var start = _ref3.start, end = _ref3.end;\n    return local.format(start, \"LT\", culture) + \" – \" + local.format(end, \"LT\", culture);\n};\nvar timeRangeStartFormat = function timeRangeStartFormat(_ref4, culture, local) {\n    var start = _ref4.start;\n    return local.format(start, \"LT\", culture) + \" – \";\n};\nvar timeRangeEndFormat = function timeRangeEndFormat(_ref5, culture, local) {\n    var end = _ref5.end;\n    return \" – \" + local.format(end, \"LT\", culture);\n};\nvar formats = {\n    dateFormat: \"DD\",\n    dayFormat: \"DD ddd\",\n    weekdayFormat: \"ddd\",\n    selectRangeFormat: timeRangeFormat,\n    eventTimeRangeFormat: timeRangeFormat,\n    eventTimeRangeStartFormat: timeRangeStartFormat,\n    eventTimeRangeEndFormat: timeRangeEndFormat,\n    timeGutterFormat: \"LT\",\n    monthHeaderFormat: \"MMMM YYYY\",\n    dayHeaderFormat: \"dddd MMM DD\",\n    dayRangeHeaderFormat: weekRangeFormat,\n    agendaHeaderFormat: dateRangeFormat,\n    agendaDateFormat: \"ddd MMM DD\",\n    agendaTimeFormat: \"LT\",\n    agendaTimeRangeFormat: timeRangeFormat\n};\nfunction fixUnit(unit) {\n    var datePart = unit ? unit.toLowerCase() : unit;\n    if (datePart === \"FullYear\") {\n        datePart = \"year\";\n    } else if (!datePart) {\n        datePart = undefined;\n    }\n    return datePart;\n}\nfunction dayjs(dayjsLib) {\n    // load dayjs plugins\n    dayjsLib.extend((dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_37___default()));\n    dayjsLib.extend((dayjs_plugin_isSameOrAfter__WEBPACK_IMPORTED_MODULE_38___default()));\n    dayjsLib.extend((dayjs_plugin_isSameOrBefore__WEBPACK_IMPORTED_MODULE_39___default()));\n    dayjsLib.extend((dayjs_plugin_localeData__WEBPACK_IMPORTED_MODULE_40___default()));\n    dayjsLib.extend((dayjs_plugin_localizedFormat__WEBPACK_IMPORTED_MODULE_41___default()));\n    dayjsLib.extend((dayjs_plugin_minMax__WEBPACK_IMPORTED_MODULE_42___default()));\n    dayjsLib.extend((dayjs_plugin_utc__WEBPACK_IMPORTED_MODULE_43___default()));\n    var locale = function locale(dj, c) {\n        return c ? dj.locale(c) : dj;\n    };\n    // if the timezone plugin is loaded,\n    // then use the timezone aware version\n    var dayjs = dayjsLib.tz ? dayjsLib.tz : dayjsLib;\n    function getTimezoneOffset(date) {\n        // ensures this gets cast to timezone\n        return dayjs(date).toDate().getTimezoneOffset();\n    }\n    function getDstOffset(start, end) {\n        var _st$tz$$x$$timezone;\n        // convert to dayjs, in case\n        var st = dayjs(start);\n        var ed = dayjs(end);\n        // if not using the dayjs timezone plugin\n        if (!dayjs.tz) {\n            return st.toDate().getTimezoneOffset() - ed.toDate().getTimezoneOffset();\n        }\n        /**\n     * If a default timezone has been applied, then\n     * use this to get the proper timezone offset, otherwise default\n     * the timezone to the browser local\n     */ var tzName = (_st$tz$$x$$timezone = st.tz().$x.$timezone) !== null && _st$tz$$x$$timezone !== void 0 ? _st$tz$$x$$timezone : dayjsLib.tz.guess();\n        // invert offsets to be inline with moment.js\n        var startOffset = -dayjs.tz(+st, tzName).utcOffset();\n        var endOffset = -dayjs.tz(+ed, tzName).utcOffset();\n        return startOffset - endOffset;\n    }\n    function getDayStartDstOffset(start) {\n        var dayStart = dayjs(start).startOf(\"day\");\n        return getDstOffset(dayStart, start);\n    }\n    /*** BEGIN localized date arithmetic methods with dayjs ***/ function defineComparators(a, b, unit) {\n        var datePart = fixUnit(unit);\n        var dtA = datePart ? dayjs(a).startOf(datePart) : dayjs(a);\n        var dtB = datePart ? dayjs(b).startOf(datePart) : dayjs(b);\n        return [\n            dtA,\n            dtB,\n            datePart\n        ];\n    }\n    function startOf() {\n        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var unit = arguments.length > 1 ? arguments[1] : undefined;\n        var datePart = fixUnit(unit);\n        if (datePart) {\n            return dayjs(date).startOf(datePart).toDate();\n        }\n        return dayjs(date).toDate();\n    }\n    function endOf() {\n        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var unit = arguments.length > 1 ? arguments[1] : undefined;\n        var datePart = fixUnit(unit);\n        if (datePart) {\n            return dayjs(date).endOf(datePart).toDate();\n        }\n        return dayjs(date).toDate();\n    }\n    // dayjs comparison operations *always* convert both sides to dayjs objects\n    // prior to running the comparisons\n    function eq(a, b, unit) {\n        var _defineComparators = defineComparators(a, b, unit), _defineComparators2 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators, 3), dtA = _defineComparators2[0], dtB = _defineComparators2[1], datePart = _defineComparators2[2];\n        return dtA.isSame(dtB, datePart);\n    }\n    function neq(a, b, unit) {\n        return !eq(a, b, unit);\n    }\n    function gt(a, b, unit) {\n        var _defineComparators3 = defineComparators(a, b, unit), _defineComparators4 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators3, 3), dtA = _defineComparators4[0], dtB = _defineComparators4[1], datePart = _defineComparators4[2];\n        return dtA.isAfter(dtB, datePart);\n    }\n    function lt(a, b, unit) {\n        var _defineComparators5 = defineComparators(a, b, unit), _defineComparators6 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators5, 3), dtA = _defineComparators6[0], dtB = _defineComparators6[1], datePart = _defineComparators6[2];\n        return dtA.isBefore(dtB, datePart);\n    }\n    function gte(a, b, unit) {\n        var _defineComparators7 = defineComparators(a, b, unit), _defineComparators8 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators7, 3), dtA = _defineComparators8[0], dtB = _defineComparators8[1], datePart = _defineComparators8[2];\n        return dtA.isSameOrBefore(dtB, datePart);\n    }\n    function lte(a, b, unit) {\n        var _defineComparators9 = defineComparators(a, b, unit), _defineComparators10 = (0,_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(_defineComparators9, 3), dtA = _defineComparators10[0], dtB = _defineComparators10[1], datePart = _defineComparators10[2];\n        return dtA.isSameOrBefore(dtB, datePart);\n    }\n    function inRange(day, min, max) {\n        var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"day\";\n        var datePart = fixUnit(unit);\n        var djDay = dayjs(day);\n        var djMin = dayjs(min);\n        var djMax = dayjs(max);\n        return djDay.isBetween(djMin, djMax, datePart, \"[]\");\n    }\n    function min(dateA, dateB) {\n        var dtA = dayjs(dateA);\n        var dtB = dayjs(dateB);\n        var minDt = dayjsLib.min(dtA, dtB);\n        return minDt.toDate();\n    }\n    function max(dateA, dateB) {\n        var dtA = dayjs(dateA);\n        var dtB = dayjs(dateB);\n        var maxDt = dayjsLib.max(dtA, dtB);\n        return maxDt.toDate();\n    }\n    function merge(date, time) {\n        if (!date && !time) return null;\n        var tm = dayjs(time).format(\"HH:mm:ss\");\n        var dt = dayjs(date).startOf(\"day\").format(\"MM/DD/YYYY\");\n        // We do it this way to avoid issues when timezone switching\n        return dayjsLib(\"\".concat(dt, \" \").concat(tm), \"MM/DD/YYYY HH:mm:ss\").toDate();\n    }\n    function add(date, adder, unit) {\n        var datePart = fixUnit(unit);\n        return dayjs(date).add(adder, datePart).toDate();\n    }\n    function range(start, end) {\n        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"day\";\n        var datePart = fixUnit(unit);\n        // because the add method will put these in tz, we have to start that way\n        var current = dayjs(start).toDate();\n        var days = [];\n        while(lte(current, end)){\n            days.push(current);\n            current = add(current, 1, datePart);\n        }\n        return days;\n    }\n    function ceil(date, unit) {\n        var datePart = fixUnit(unit);\n        var floor = startOf(date, datePart);\n        return eq(floor, date) ? floor : add(floor, 1, datePart);\n    }\n    function diff(a, b) {\n        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"day\";\n        var datePart = fixUnit(unit);\n        // don't use 'defineComparators' here, as we don't want to mutate the values\n        var dtA = dayjs(a);\n        var dtB = dayjs(b);\n        return dtB.diff(dtA, datePart);\n    }\n    function minutes(date) {\n        var dt = dayjs(date);\n        return dt.minutes();\n    }\n    function firstOfWeek(culture) {\n        var data = culture ? dayjsLib.localeData(culture) : dayjsLib.localeData();\n        return data ? data.firstDayOfWeek() : 0;\n    }\n    function firstVisibleDay(date) {\n        return dayjs(date).startOf(\"month\").startOf(\"week\").toDate();\n    }\n    function lastVisibleDay(date) {\n        return dayjs(date).endOf(\"month\").endOf(\"week\").toDate();\n    }\n    function visibleDays(date) {\n        var current = firstVisibleDay(date);\n        var last = lastVisibleDay(date);\n        var days = [];\n        while(lte(current, last)){\n            days.push(current);\n            current = add(current, 1, \"d\");\n        }\n        return days;\n    }\n    /*** END localized date arithmetic methods with dayjs ***/ /**\n   * Moved from TimeSlots.js, this method overrides the method of the same name\n   * in the localizer.js, using dayjs to construct the js Date\n   * @param {Date} dt - date to start with\n   * @param {Number} minutesFromMidnight\n   * @param {Number} offset\n   * @returns {Date}\n   */ function getSlotDate(dt, minutesFromMidnight, offset) {\n        return dayjs(dt).startOf(\"day\").minute(minutesFromMidnight + offset).toDate();\n    }\n    // dayjs will automatically handle DST differences in it's calculations\n    function getTotalMin(start, end) {\n        return diff(start, end, \"minutes\");\n    }\n    function getMinutesFromMidnight(start) {\n        var dayStart = dayjs(start).startOf(\"day\");\n        var day = dayjs(start);\n        return day.diff(dayStart, \"minutes\") + getDayStartDstOffset(start);\n    }\n    // These two are used by DateSlotMetrics\n    function continuesPrior(start, first) {\n        var djStart = dayjs(start);\n        var djFirst = dayjs(first);\n        return djStart.isBefore(djFirst, \"day\");\n    }\n    function continuesAfter(start, end, last) {\n        var djEnd = dayjs(end);\n        var djLast = dayjs(last);\n        return djEnd.isSameOrAfter(djLast, \"minutes\");\n    }\n    function daySpan(start, end) {\n        var startDay = dayjs(start);\n        var endDay = dayjs(end);\n        return endDay.diff(startDay, \"day\");\n    }\n    // These two are used by eventLevels\n    function sortEvents(_ref6) {\n        var _ref6$evtA = _ref6.evtA, aStart = _ref6$evtA.start, aEnd = _ref6$evtA.end, aAllDay = _ref6$evtA.allDay, _ref6$evtB = _ref6.evtB, bStart = _ref6$evtB.start, bEnd = _ref6$evtB.end, bAllDay = _ref6$evtB.allDay;\n        var startSort = +startOf(aStart, \"day\") - +startOf(bStart, \"day\");\n        var durA = daySpan(aStart, aEnd);\n        var durB = daySpan(bStart, bEnd);\n        return startSort || // sort by start Day first\n        durB - durA || // events spanning multiple days go first\n        !!bAllDay - !!aAllDay || // then allDay single day events\n        +aStart - +bStart || // then sort by start time *don't need dayjs conversion here\n        +aEnd - +bEnd // then sort by end time *don't need dayjs conversion here either\n        ;\n    }\n    function inEventRange(_ref7) {\n        var _ref7$event = _ref7.event, start = _ref7$event.start, end = _ref7$event.end, _ref7$range = _ref7.range, rangeStart = _ref7$range.start, rangeEnd = _ref7$range.end;\n        var startOfDay = dayjs(start).startOf(\"day\");\n        var eEnd = dayjs(end);\n        var rStart = dayjs(rangeStart);\n        var rEnd = dayjs(rangeEnd);\n        var startsBeforeEnd = startOfDay.isSameOrBefore(rEnd, \"day\");\n        // when the event is zero duration we need to handle a bit differently\n        var sameMin = !startOfDay.isSame(eEnd, \"minutes\");\n        var endsAfterStart = sameMin ? eEnd.isAfter(rStart, \"minutes\") : eEnd.isSameOrAfter(rStart, \"minutes\");\n        return startsBeforeEnd && endsAfterStart;\n    }\n    function isSameDate(date1, date2) {\n        var dt = dayjs(date1);\n        var dt2 = dayjs(date2);\n        return dt.isSame(dt2, \"day\");\n    }\n    /**\n   * This method, called once in the localizer constructor, is used by eventLevels\n   * 'eventSegments()' to assist in determining the 'span' of the event in the display,\n   * specifically when using a timezone that is greater than the browser native timezone.\n   * @returns number\n   */ function browserTZOffset() {\n        /**\n     * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from\n     * what you see in it's string, so we have to jump through some hoops to get a value\n     * we can actually compare.\n     */ var dt = new Date();\n        var neg = /-/.test(dt.toString()) ? \"-\" : \"\";\n        var dtOffset = dt.getTimezoneOffset();\n        var comparator = Number(\"\".concat(neg).concat(Math.abs(dtOffset)));\n        // dayjs correctly provides positive/negative offset, as expected\n        var mtOffset = dayjs().utcOffset();\n        return mtOffset > comparator ? 1 : 0;\n    }\n    return new DateLocalizer({\n        formats: formats,\n        firstOfWeek: firstOfWeek,\n        firstVisibleDay: firstVisibleDay,\n        lastVisibleDay: lastVisibleDay,\n        visibleDays: visibleDays,\n        format: function format(value, _format, culture) {\n            return locale(dayjs(value), culture).format(_format);\n        },\n        lt: lt,\n        lte: lte,\n        gt: gt,\n        gte: gte,\n        eq: eq,\n        neq: neq,\n        merge: merge,\n        inRange: inRange,\n        startOf: startOf,\n        endOf: endOf,\n        range: range,\n        add: add,\n        diff: diff,\n        ceil: ceil,\n        min: min,\n        max: max,\n        minutes: minutes,\n        getSlotDate: getSlotDate,\n        getTimezoneOffset: getTimezoneOffset,\n        getDstOffset: getDstOffset,\n        getTotalMin: getTotalMin,\n        getMinutesFromMidnight: getMinutesFromMidnight,\n        continuesPrior: continuesPrior,\n        continuesAfter: continuesAfter,\n        sortEvents: sortEvents,\n        inEventRange: inEventRange,\n        isSameDate: isSameDate,\n        browserTZOffset: browserTZOffset\n    });\n}\nvar components = {\n    eventWrapper: NoopWrapper,\n    timeSlotWrapper: NoopWrapper,\n    dateCellWrapper: NoopWrapper\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/dist/react-big-calendar.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/EventCell.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/EventCell.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\"));\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _callSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/callSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/callSuper.js\"));\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _clsx = _interopRequireDefault(__webpack_require__(/*! clsx */ \"(ssr)/./node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js\"));\nvar _excluded = [\n    \"style\",\n    \"className\",\n    \"event\",\n    \"selected\",\n    \"isAllDay\",\n    \"onSelect\",\n    \"onDoubleClick\",\n    \"onKeyPress\",\n    \"localizer\",\n    \"continuesPrior\",\n    \"continuesAfter\",\n    \"accessors\",\n    \"getters\",\n    \"children\",\n    \"components\",\n    \"slotStart\",\n    \"slotEnd\"\n];\nvar EventCell = /*#__PURE__*/ function(_React$Component) {\n    function EventCell() {\n        (0, _classCallCheck2.default)(this, EventCell);\n        return (0, _callSuper2.default)(this, EventCell, arguments);\n    }\n    (0, _inherits2.default)(EventCell, _React$Component);\n    return (0, _createClass2.default)(EventCell, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, style = _this$props.style, className = _this$props.className, event = _this$props.event, selected = _this$props.selected, isAllDay = _this$props.isAllDay, onSelect = _this$props.onSelect, _onDoubleClick = _this$props.onDoubleClick, onKeyPress = _this$props.onKeyPress, localizer = _this$props.localizer, continuesPrior = _this$props.continuesPrior, continuesAfter = _this$props.continuesAfter, accessors = _this$props.accessors, getters = _this$props.getters, children = _this$props.children, _this$props$component = _this$props.components, Event = _this$props$component.event, EventWrapper = _this$props$component.eventWrapper, slotStart = _this$props.slotStart, slotEnd = _this$props.slotEnd, props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n                delete props.resizable;\n                var title = accessors.title(event);\n                var tooltip = accessors.tooltip(event);\n                var end = accessors.end(event);\n                var start = accessors.start(event);\n                var allDay = accessors.allDay(event);\n                var showAsAllDay = isAllDay || allDay || localizer.diff(start, localizer.ceil(end, \"day\"), \"day\") > 1;\n                var userProps = getters.eventProp(event, start, end, selected);\n                var content = /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: \"rbc-event-content\",\n                    title: tooltip || undefined\n                }, Event ? /*#__PURE__*/ _react.default.createElement(Event, {\n                    event: event,\n                    continuesPrior: continuesPrior,\n                    continuesAfter: continuesAfter,\n                    title: title,\n                    isAllDay: allDay,\n                    localizer: localizer,\n                    slotStart: slotStart,\n                    slotEnd: slotEnd\n                }) : title);\n                return /*#__PURE__*/ _react.default.createElement(EventWrapper, Object.assign({}, this.props, {\n                    type: \"date\"\n                }), /*#__PURE__*/ _react.default.createElement(\"div\", Object.assign({}, props, {\n                    style: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, userProps.style), style),\n                    className: (0, _clsx.default)(\"rbc-event\", className, userProps.className, {\n                        \"rbc-selected\": selected,\n                        \"rbc-event-allday\": showAsAllDay,\n                        \"rbc-event-continues-prior\": continuesPrior,\n                        \"rbc-event-continues-after\": continuesAfter\n                    }),\n                    onClick: function onClick(e) {\n                        return onSelect && onSelect(event, e);\n                    },\n                    onDoubleClick: function onDoubleClick(e) {\n                        return _onDoubleClick && _onDoubleClick(event, e);\n                    },\n                    onKeyDown: function onKeyDown(e) {\n                        return onKeyPress && onKeyPress(event, e);\n                    }\n                }), typeof children === \"function\" ? children(content) : content));\n            }\n        }\n    ]);\n}(_react.default.Component);\nvar _default = exports[\"default\"] = EventCell;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/EventCell.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/EventRow.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/EventRow.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _callSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/callSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/callSuper.js\"));\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\"));\nvar _clsx = _interopRequireDefault(__webpack_require__(/*! clsx */ \"(ssr)/./node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _EventRowMixin = _interopRequireDefault(__webpack_require__(/*! ./EventRowMixin */ \"(ssr)/./node_modules/react-big-calendar/lib/EventRowMixin.js\"));\nvar EventRow = /*#__PURE__*/ function(_React$Component) {\n    function EventRow() {\n        (0, _classCallCheck2.default)(this, EventRow);\n        return (0, _callSuper2.default)(this, EventRow, arguments);\n    }\n    (0, _inherits2.default)(EventRow, _React$Component);\n    return (0, _createClass2.default)(EventRow, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _this = this;\n                var _this$props = this.props, segments = _this$props.segments, slots = _this$props.slotMetrics.slots, className = _this$props.className;\n                var lastEnd = 1;\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: (0, _clsx.default)(className, \"rbc-row\")\n                }, segments.reduce(function(row, _ref, li) {\n                    var event = _ref.event, left = _ref.left, right = _ref.right, span = _ref.span;\n                    var key = \"_lvl_\" + li;\n                    var gap = left - lastEnd;\n                    var content = _EventRowMixin.default.renderEvent(_this.props, event);\n                    if (gap) row.push(_EventRowMixin.default.renderSpan(slots, gap, \"\".concat(key, \"_gap\")));\n                    row.push(_EventRowMixin.default.renderSpan(slots, span, key, content));\n                    lastEnd = right + 1;\n                    return row;\n                }, []));\n            }\n        }\n    ]);\n}(_react.default.Component);\nEventRow.defaultProps = (0, _objectSpread2.default)({}, _EventRowMixin.default.defaultProps);\nvar _default = exports[\"default\"] = EventRow;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9FdmVudFJvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLHlCQUF5QkMsNEpBQStEO0FBQzVGRSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWUsR0FBRyxLQUFLO0FBQ3ZCLElBQUlFLGlCQUFpQlAsdUJBQXVCQyxtQkFBT0EsQ0FBQywwR0FBc0M7QUFDMUYsSUFBSU8sbUJBQW1CUix1QkFBdUJDLG1CQUFPQSxDQUFDLDRHQUF1QztBQUM3RixJQUFJUSxnQkFBZ0JULHVCQUF1QkMsbUJBQU9BLENBQUMsc0dBQW9DO0FBQ3ZGLElBQUlTLGNBQWNWLHVCQUF1QkMsbUJBQU9BLENBQUMsa0dBQWtDO0FBQ25GLElBQUlVLGFBQWFYLHVCQUF1QkMsbUJBQU9BLENBQUMsZ0dBQWlDO0FBQ2pGLElBQUlXLFFBQVFaLHVCQUF1QkMsbUJBQU9BLENBQUMsc0ZBQU07QUFDakQsSUFBSVksU0FBU2IsdUJBQXVCQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUNuRCxJQUFJYSxpQkFBaUJkLHVCQUF1QkMsbUJBQU9BLENBQUMscUZBQWlCO0FBQ3JFLElBQUljLFdBQVcsV0FBVyxHQUFFLFNBQVVDLGdCQUFnQjtJQUNwRCxTQUFTRDtRQUNOLElBQUdQLGlCQUFpQk4sT0FBTyxFQUFFLElBQUksRUFBRWE7UUFDcEMsT0FBTyxDQUFDLEdBQUdMLFlBQVlSLE9BQU8sRUFBRSxJQUFJLEVBQUVhLFVBQVVFO0lBQ2xEO0lBQ0MsSUFBR04sV0FBV1QsT0FBTyxFQUFFYSxVQUFVQztJQUNsQyxPQUFPLENBQUMsR0FBR1AsY0FBY1AsT0FBTyxFQUFFYSxVQUFVO1FBQUM7WUFDM0NHLEtBQUs7WUFDTFosT0FBTyxTQUFTYTtnQkFDZCxJQUFJQyxRQUFRLElBQUk7Z0JBQ2hCLElBQUlDLGNBQWMsSUFBSSxDQUFDQyxLQUFLLEVBQzFCQyxXQUFXRixZQUFZRSxRQUFRLEVBQy9CQyxRQUFRSCxZQUFZSSxXQUFXLENBQUNELEtBQUssRUFDckNFLFlBQVlMLFlBQVlLLFNBQVM7Z0JBQ25DLElBQUlDLFVBQVU7Z0JBQ2QsT0FBTyxXQUFXLEdBQUVkLE9BQU9YLE9BQU8sQ0FBQzBCLGFBQWEsQ0FBQyxPQUFPO29CQUN0REYsV0FBVyxDQUFDLEdBQUdkLE1BQU1WLE9BQU8sRUFBRXdCLFdBQVc7Z0JBQzNDLEdBQUdILFNBQVNNLE1BQU0sQ0FBQyxTQUFVQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsRUFBRTtvQkFDeEMsSUFBSUMsUUFBUUYsS0FBS0UsS0FBSyxFQUNwQkMsT0FBT0gsS0FBS0csSUFBSSxFQUNoQkMsUUFBUUosS0FBS0ksS0FBSyxFQUNsQkMsT0FBT0wsS0FBS0ssSUFBSTtvQkFDbEIsSUFBSWxCLE1BQU0sVUFBVWM7b0JBQ3BCLElBQUlLLE1BQU1ILE9BQU9QO29CQUNqQixJQUFJVyxVQUFVeEIsZUFBZVosT0FBTyxDQUFDcUMsV0FBVyxDQUFDbkIsTUFBTUUsS0FBSyxFQUFFVztvQkFDOUQsSUFBSUksS0FBS1AsSUFBSVUsSUFBSSxDQUFDMUIsZUFBZVosT0FBTyxDQUFDdUMsVUFBVSxDQUFDakIsT0FBT2EsS0FBSyxHQUFHSyxNQUFNLENBQUN4QixLQUFLO29CQUMvRVksSUFBSVUsSUFBSSxDQUFDMUIsZUFBZVosT0FBTyxDQUFDdUMsVUFBVSxDQUFDakIsT0FBT1ksTUFBTWxCLEtBQUtvQjtvQkFDN0RYLFVBQVVRLFFBQVE7b0JBQ2xCLE9BQU9MO2dCQUNULEdBQUcsRUFBRTtZQUNQO1FBQ0Y7S0FBRTtBQUNKLEVBQUVqQixPQUFPWCxPQUFPLENBQUN5QyxTQUFTO0FBQzFCNUIsU0FBUzZCLFlBQVksR0FBRyxDQUFDLEdBQUdyQyxlQUFlTCxPQUFPLEVBQUUsQ0FBQyxHQUFHWSxlQUFlWixPQUFPLENBQUMwQyxZQUFZO0FBQzNGLElBQUlDLFdBQVd4QyxrQkFBZSxHQUFHVSIsInNvdXJjZXMiOlsid2VicGFjazovL2FyYmVpdHNwbGFuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJpZy1jYWxlbmRhci9saWIvRXZlbnRSb3cuanM/ZmY5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG52YXIgX2NhbGxTdXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NhbGxTdXBlclwiKSk7XG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xudmFyIF9jbHN4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xzeFwiKSk7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9FdmVudFJvd01peGluID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9FdmVudFJvd01peGluXCIpKTtcbnZhciBFdmVudFJvdyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBmdW5jdGlvbiBFdmVudFJvdygpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBFdmVudFJvdyk7XG4gICAgcmV0dXJuICgwLCBfY2FsbFN1cGVyMi5kZWZhdWx0KSh0aGlzLCBFdmVudFJvdywgYXJndW1lbnRzKTtcbiAgfVxuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShFdmVudFJvdywgX1JlYWN0JENvbXBvbmVudCk7XG4gIHJldHVybiAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShFdmVudFJvdywgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzZWdtZW50cyA9IF90aGlzJHByb3BzLnNlZ21lbnRzLFxuICAgICAgICBzbG90cyA9IF90aGlzJHByb3BzLnNsb3RNZXRyaWNzLnNsb3RzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWU7XG4gICAgICB2YXIgbGFzdEVuZCA9IDE7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShjbGFzc05hbWUsICdyYmMtcm93JylcbiAgICAgIH0sIHNlZ21lbnRzLnJlZHVjZShmdW5jdGlvbiAocm93LCBfcmVmLCBsaSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBfcmVmLmV2ZW50LFxuICAgICAgICAgIGxlZnQgPSBfcmVmLmxlZnQsXG4gICAgICAgICAgcmlnaHQgPSBfcmVmLnJpZ2h0LFxuICAgICAgICAgIHNwYW4gPSBfcmVmLnNwYW47XG4gICAgICAgIHZhciBrZXkgPSAnX2x2bF8nICsgbGk7XG4gICAgICAgIHZhciBnYXAgPSBsZWZ0IC0gbGFzdEVuZDtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBfRXZlbnRSb3dNaXhpbi5kZWZhdWx0LnJlbmRlckV2ZW50KF90aGlzLnByb3BzLCBldmVudCk7XG4gICAgICAgIGlmIChnYXApIHJvdy5wdXNoKF9FdmVudFJvd01peGluLmRlZmF1bHQucmVuZGVyU3BhbihzbG90cywgZ2FwLCBcIlwiLmNvbmNhdChrZXksIFwiX2dhcFwiKSkpO1xuICAgICAgICByb3cucHVzaChfRXZlbnRSb3dNaXhpbi5kZWZhdWx0LnJlbmRlclNwYW4oc2xvdHMsIHNwYW4sIGtleSwgY29udGVudCkpO1xuICAgICAgICBsYXN0RW5kID0gcmlnaHQgKyAxO1xuICAgICAgICByZXR1cm4gcm93O1xuICAgICAgfSwgW10pKTtcbiAgICB9XG4gIH1dKTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcbkV2ZW50Um93LmRlZmF1bHRQcm9wcyA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgX0V2ZW50Um93TWl4aW4uZGVmYXVsdC5kZWZhdWx0UHJvcHMpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRSb3c7Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX29iamVjdFNwcmVhZDIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsIl9jYWxsU3VwZXIyIiwiX2luaGVyaXRzMiIsIl9jbHN4IiwiX3JlYWN0IiwiX0V2ZW50Um93TWl4aW4iLCJFdmVudFJvdyIsIl9SZWFjdCRDb21wb25lbnQiLCJhcmd1bWVudHMiLCJrZXkiLCJyZW5kZXIiLCJfdGhpcyIsIl90aGlzJHByb3BzIiwicHJvcHMiLCJzZWdtZW50cyIsInNsb3RzIiwic2xvdE1ldHJpY3MiLCJjbGFzc05hbWUiLCJsYXN0RW5kIiwiY3JlYXRlRWxlbWVudCIsInJlZHVjZSIsInJvdyIsIl9yZWYiLCJsaSIsImV2ZW50IiwibGVmdCIsInJpZ2h0Iiwic3BhbiIsImdhcCIsImNvbnRlbnQiLCJyZW5kZXJFdmVudCIsInB1c2giLCJyZW5kZXJTcGFuIiwiY29uY2F0IiwiQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwiX2RlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/EventRow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/EventRowMixin.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/EventRowMixin.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _EventCell = _interopRequireDefault(__webpack_require__(/*! ./EventCell */ \"(ssr)/./node_modules/react-big-calendar/lib/EventCell.js\"));\nvar _selection = __webpack_require__(/*! ./utils/selection */ \"(ssr)/./node_modules/react-big-calendar/lib/utils/selection.js\");\n/* eslint-disable react/prop-types */ var _default = exports[\"default\"] = {\n    propTypes: {\n        slotMetrics: _propTypes.default.object.isRequired,\n        selected: _propTypes.default.object,\n        isAllDay: _propTypes.default.bool,\n        accessors: _propTypes.default.object.isRequired,\n        localizer: _propTypes.default.object.isRequired,\n        components: _propTypes.default.object.isRequired,\n        getters: _propTypes.default.object.isRequired,\n        onSelect: _propTypes.default.func,\n        onDoubleClick: _propTypes.default.func,\n        onKeyPress: _propTypes.default.func\n    },\n    defaultProps: {\n        segments: [],\n        selected: {}\n    },\n    renderEvent: function renderEvent(props, event) {\n        var selected = props.selected, _ = props.isAllDay, accessors = props.accessors, getters = props.getters, onSelect = props.onSelect, onDoubleClick = props.onDoubleClick, onKeyPress = props.onKeyPress, localizer = props.localizer, slotMetrics = props.slotMetrics, components = props.components, resizable = props.resizable;\n        var continuesPrior = slotMetrics.continuesPrior(event);\n        var continuesAfter = slotMetrics.continuesAfter(event);\n        return /*#__PURE__*/ _react.default.createElement(_EventCell.default, {\n            event: event,\n            getters: getters,\n            localizer: localizer,\n            accessors: accessors,\n            components: components,\n            onSelect: onSelect,\n            onDoubleClick: onDoubleClick,\n            onKeyPress: onKeyPress,\n            continuesPrior: continuesPrior,\n            continuesAfter: continuesAfter,\n            slotStart: slotMetrics.first,\n            slotEnd: slotMetrics.last,\n            selected: (0, _selection.isSelected)(event, selected),\n            resizable: resizable\n        });\n    },\n    renderSpan: function renderSpan(slots, len, key) {\n        var content = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \" \";\n        var per = Math.abs(len) / slots * 100 + \"%\";\n        return /*#__PURE__*/ _react.default.createElement(\"div\", {\n            key: key,\n            className: \"rbc-row-segment\",\n            style: {\n                WebkitFlexBasis: per,\n                flexBasis: per,\n                maxWidth: per\n            }\n        }, content);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9FdmVudFJvd01peGluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEseUJBQXlCQyw0SkFBK0Q7QUFDNUZFLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUUsYUFBYVAsdUJBQXVCQyxtQkFBT0EsQ0FBQyw0REFBWTtBQUM1RCxJQUFJTyxTQUFTUix1QkFBdUJDLG1CQUFPQSxDQUFDLHdHQUFPO0FBQ25ELElBQUlRLGFBQWFULHVCQUF1QkMsbUJBQU9BLENBQUMsNkVBQWE7QUFDN0QsSUFBSVMsYUFBYVQsbUJBQU9BLENBQUMseUZBQW1CO0FBQzVDLG1DQUFtQyxHQUNuQyxJQUFJVSxXQUFXTixrQkFBZSxHQUFHO0lBQy9CTyxXQUFXO1FBQ1RDLGFBQWFOLFdBQVdMLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDQyxVQUFVO1FBQ2pEQyxVQUFVVCxXQUFXTCxPQUFPLENBQUNZLE1BQU07UUFDbkNHLFVBQVVWLFdBQVdMLE9BQU8sQ0FBQ2dCLElBQUk7UUFDakNDLFdBQVdaLFdBQVdMLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDQyxVQUFVO1FBQy9DSyxXQUFXYixXQUFXTCxPQUFPLENBQUNZLE1BQU0sQ0FBQ0MsVUFBVTtRQUMvQ00sWUFBWWQsV0FBV0wsT0FBTyxDQUFDWSxNQUFNLENBQUNDLFVBQVU7UUFDaERPLFNBQVNmLFdBQVdMLE9BQU8sQ0FBQ1ksTUFBTSxDQUFDQyxVQUFVO1FBQzdDUSxVQUFVaEIsV0FBV0wsT0FBTyxDQUFDc0IsSUFBSTtRQUNqQ0MsZUFBZWxCLFdBQVdMLE9BQU8sQ0FBQ3NCLElBQUk7UUFDdENFLFlBQVluQixXQUFXTCxPQUFPLENBQUNzQixJQUFJO0lBQ3JDO0lBQ0FHLGNBQWM7UUFDWkMsVUFBVSxFQUFFO1FBQ1paLFVBQVUsQ0FBQztJQUNiO0lBQ0FhLGFBQWEsU0FBU0EsWUFBWUMsS0FBSyxFQUFFQyxLQUFLO1FBQzVDLElBQUlmLFdBQVdjLE1BQU1kLFFBQVEsRUFDM0JnQixJQUFJRixNQUFNYixRQUFRLEVBQ2xCRSxZQUFZVyxNQUFNWCxTQUFTLEVBQzNCRyxVQUFVUSxNQUFNUixPQUFPLEVBQ3ZCQyxXQUFXTyxNQUFNUCxRQUFRLEVBQ3pCRSxnQkFBZ0JLLE1BQU1MLGFBQWEsRUFDbkNDLGFBQWFJLE1BQU1KLFVBQVUsRUFDN0JOLFlBQVlVLE1BQU1WLFNBQVMsRUFDM0JQLGNBQWNpQixNQUFNakIsV0FBVyxFQUMvQlEsYUFBYVMsTUFBTVQsVUFBVSxFQUM3QlksWUFBWUgsTUFBTUcsU0FBUztRQUM3QixJQUFJQyxpQkFBaUJyQixZQUFZcUIsY0FBYyxDQUFDSDtRQUNoRCxJQUFJSSxpQkFBaUJ0QixZQUFZc0IsY0FBYyxDQUFDSjtRQUNoRCxPQUFPLFdBQVcsR0FBRXZCLE9BQU9OLE9BQU8sQ0FBQ2tDLGFBQWEsQ0FBQzNCLFdBQVdQLE9BQU8sRUFBRTtZQUNuRTZCLE9BQU9BO1lBQ1BULFNBQVNBO1lBQ1RGLFdBQVdBO1lBQ1hELFdBQVdBO1lBQ1hFLFlBQVlBO1lBQ1pFLFVBQVVBO1lBQ1ZFLGVBQWVBO1lBQ2ZDLFlBQVlBO1lBQ1pRLGdCQUFnQkE7WUFDaEJDLGdCQUFnQkE7WUFDaEJFLFdBQVd4QixZQUFZeUIsS0FBSztZQUM1QkMsU0FBUzFCLFlBQVkyQixJQUFJO1lBQ3pCeEIsVUFBVSxDQUFDLEdBQUdOLFdBQVcrQixVQUFVLEVBQUVWLE9BQU9mO1lBQzVDaUIsV0FBV0E7UUFDYjtJQUNGO0lBQ0FTLFlBQVksU0FBU0EsV0FBV0MsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEdBQUc7UUFDN0MsSUFBSUMsVUFBVUMsVUFBVUMsTUFBTSxHQUFHLEtBQUtELFNBQVMsQ0FBQyxFQUFFLEtBQUtFLFlBQVlGLFNBQVMsQ0FBQyxFQUFFLEdBQUc7UUFDbEYsSUFBSUcsTUFBTUMsS0FBS0MsR0FBRyxDQUFDUixPQUFPRCxRQUFRLE1BQU07UUFDeEMsT0FBTyxXQUFXLEdBQUVuQyxPQUFPTixPQUFPLENBQUNrQyxhQUFhLENBQUMsT0FBTztZQUN0RFMsS0FBS0E7WUFDTFEsV0FBVztZQUdYQyxPQUFPO2dCQUNMQyxpQkFBaUJMO2dCQUNqQk0sV0FBV047Z0JBQ1hPLFVBQVVQO1lBQ1o7UUFDRixHQUFHSjtJQUNMO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcmJlaXRzcGxhbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1iaWctY2FsZW5kYXIvbGliL0V2ZW50Um93TWl4aW4uanM/MzhmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfRXZlbnRDZWxsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9FdmVudENlbGxcIikpO1xudmFyIF9zZWxlY3Rpb24gPSByZXF1aXJlKFwiLi91dGlscy9zZWxlY3Rpb25cIik7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSB7XG4gIHByb3BUeXBlczoge1xuICAgIHNsb3RNZXRyaWNzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gICAgaXNBbGxEYXk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAgIGFjY2Vzc29yczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGxvY2FsaXplcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbXBvbmVudHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBnZXR0ZXJzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgb25TZWxlY3Q6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAgIG9uRG91YmxlQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAgIG9uS2V5UHJlc3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG4gIH0sXG4gIGRlZmF1bHRQcm9wczoge1xuICAgIHNlZ21lbnRzOiBbXSxcbiAgICBzZWxlY3RlZDoge31cbiAgfSxcbiAgcmVuZGVyRXZlbnQ6IGZ1bmN0aW9uIHJlbmRlckV2ZW50KHByb3BzLCBldmVudCkge1xuICAgIHZhciBzZWxlY3RlZCA9IHByb3BzLnNlbGVjdGVkLFxuICAgICAgXyA9IHByb3BzLmlzQWxsRGF5LFxuICAgICAgYWNjZXNzb3JzID0gcHJvcHMuYWNjZXNzb3JzLFxuICAgICAgZ2V0dGVycyA9IHByb3BzLmdldHRlcnMsXG4gICAgICBvblNlbGVjdCA9IHByb3BzLm9uU2VsZWN0LFxuICAgICAgb25Eb3VibGVDbGljayA9IHByb3BzLm9uRG91YmxlQ2xpY2ssXG4gICAgICBvbktleVByZXNzID0gcHJvcHMub25LZXlQcmVzcyxcbiAgICAgIGxvY2FsaXplciA9IHByb3BzLmxvY2FsaXplcixcbiAgICAgIHNsb3RNZXRyaWNzID0gcHJvcHMuc2xvdE1ldHJpY3MsXG4gICAgICBjb21wb25lbnRzID0gcHJvcHMuY29tcG9uZW50cyxcbiAgICAgIHJlc2l6YWJsZSA9IHByb3BzLnJlc2l6YWJsZTtcbiAgICB2YXIgY29udGludWVzUHJpb3IgPSBzbG90TWV0cmljcy5jb250aW51ZXNQcmlvcihldmVudCk7XG4gICAgdmFyIGNvbnRpbnVlc0FmdGVyID0gc2xvdE1ldHJpY3MuY29udGludWVzQWZ0ZXIoZXZlbnQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRXZlbnRDZWxsLmRlZmF1bHQsIHtcbiAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgIGdldHRlcnM6IGdldHRlcnMsXG4gICAgICBsb2NhbGl6ZXI6IGxvY2FsaXplcixcbiAgICAgIGFjY2Vzc29yczogYWNjZXNzb3JzLFxuICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgIG9uU2VsZWN0OiBvblNlbGVjdCxcbiAgICAgIG9uRG91YmxlQ2xpY2s6IG9uRG91YmxlQ2xpY2ssXG4gICAgICBvbktleVByZXNzOiBvbktleVByZXNzLFxuICAgICAgY29udGludWVzUHJpb3I6IGNvbnRpbnVlc1ByaW9yLFxuICAgICAgY29udGludWVzQWZ0ZXI6IGNvbnRpbnVlc0FmdGVyLFxuICAgICAgc2xvdFN0YXJ0OiBzbG90TWV0cmljcy5maXJzdCxcbiAgICAgIHNsb3RFbmQ6IHNsb3RNZXRyaWNzLmxhc3QsXG4gICAgICBzZWxlY3RlZDogKDAsIF9zZWxlY3Rpb24uaXNTZWxlY3RlZCkoZXZlbnQsIHNlbGVjdGVkKSxcbiAgICAgIHJlc2l6YWJsZTogcmVzaXphYmxlXG4gICAgfSk7XG4gIH0sXG4gIHJlbmRlclNwYW46IGZ1bmN0aW9uIHJlbmRlclNwYW4oc2xvdHMsIGxlbiwga2V5KSB7XG4gICAgdmFyIGNvbnRlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICcgJztcbiAgICB2YXIgcGVyID0gTWF0aC5hYnMobGVuKSAvIHNsb3RzICogMTAwICsgJyUnO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGNsYXNzTmFtZTogXCJyYmMtcm93LXNlZ21lbnRcIlxuICAgICAgLy8gSUUxMC8xMSBuZWVkIG1heC13aWR0aC4gZmxleC1iYXNpcyBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZ1xuICAgICAgLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgV2Via2l0RmxleEJhc2lzOiBwZXIsXG4gICAgICAgIGZsZXhCYXNpczogcGVyLFxuICAgICAgICBtYXhXaWR0aDogcGVyXG4gICAgICB9XG4gICAgfSwgY29udGVudCk7XG4gIH1cbn07Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3Byb3BUeXBlcyIsIl9yZWFjdCIsIl9FdmVudENlbGwiLCJfc2VsZWN0aW9uIiwiX2RlZmF1bHQiLCJwcm9wVHlwZXMiLCJzbG90TWV0cmljcyIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJzZWxlY3RlZCIsImlzQWxsRGF5IiwiYm9vbCIsImFjY2Vzc29ycyIsImxvY2FsaXplciIsImNvbXBvbmVudHMiLCJnZXR0ZXJzIiwib25TZWxlY3QiLCJmdW5jIiwib25Eb3VibGVDbGljayIsIm9uS2V5UHJlc3MiLCJkZWZhdWx0UHJvcHMiLCJzZWdtZW50cyIsInJlbmRlckV2ZW50IiwicHJvcHMiLCJldmVudCIsIl8iLCJyZXNpemFibGUiLCJjb250aW51ZXNQcmlvciIsImNvbnRpbnVlc0FmdGVyIiwiY3JlYXRlRWxlbWVudCIsInNsb3RTdGFydCIsImZpcnN0Iiwic2xvdEVuZCIsImxhc3QiLCJpc1NlbGVjdGVkIiwicmVuZGVyU3BhbiIsInNsb3RzIiwibGVuIiwia2V5IiwiY29udGVudCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInBlciIsIk1hdGgiLCJhYnMiLCJjbGFzc05hbWUiLCJzdHlsZSIsIldlYmtpdEZsZXhCYXNpcyIsImZsZXhCYXNpcyIsIm1heFdpZHRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/EventRowMixin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/Selection.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/Selection.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nexports.getBoundsForNode = getBoundsForNode;\nexports.getEventNodeFromPoint = getEventNodeFromPoint;\nexports.getShowMoreNodeFromPoint = getShowMoreNodeFromPoint;\nexports.isEvent = isEvent;\nexports.isShowMore = isShowMore;\nexports.objectsCollide = objectsCollide;\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _contains = _interopRequireDefault(__webpack_require__(/*! dom-helpers/contains */ \"(ssr)/./node_modules/dom-helpers/esm/contains.js\"));\nvar _closest = _interopRequireDefault(__webpack_require__(/*! dom-helpers/closest */ \"(ssr)/./node_modules/dom-helpers/esm/closest.js\"));\nvar _listen = _interopRequireDefault(__webpack_require__(/*! dom-helpers/listen */ \"(ssr)/./node_modules/dom-helpers/esm/listen.js\"));\nfunction addEventListener(type, handler) {\n    var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n    return (0, _listen.default)(target, type, handler, {\n        passive: false\n    });\n}\nfunction isOverContainer(container, x, y) {\n    return !container || (0, _contains.default)(container, document.elementFromPoint(x, y));\n}\nfunction getEventNodeFromPoint(node, _ref) {\n    var clientX = _ref.clientX, clientY = _ref.clientY;\n    var target = document.elementFromPoint(clientX, clientY);\n    return (0, _closest.default)(target, \".rbc-event\", node);\n}\nfunction getShowMoreNodeFromPoint(node, _ref2) {\n    var clientX = _ref2.clientX, clientY = _ref2.clientY;\n    var target = document.elementFromPoint(clientX, clientY);\n    return (0, _closest.default)(target, \".rbc-show-more\", node);\n}\nfunction isEvent(node, bounds) {\n    return !!getEventNodeFromPoint(node, bounds);\n}\nfunction isShowMore(node, bounds) {\n    return !!getShowMoreNodeFromPoint(node, bounds);\n}\nfunction getEventCoordinates(e) {\n    var target = e;\n    if (e.touches && e.touches.length) {\n        target = e.touches[0];\n    }\n    return {\n        clientX: target.clientX,\n        clientY: target.clientY,\n        pageX: target.pageX,\n        pageY: target.pageY\n    };\n}\nvar clickTolerance = 5;\nvar clickInterval = 250;\nvar Selection = /*#__PURE__*/ function() {\n    function Selection(node) {\n        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref3$global = _ref3.global, global = _ref3$global === void 0 ? false : _ref3$global, _ref3$longPressThresh = _ref3.longPressThreshold, longPressThreshold = _ref3$longPressThresh === void 0 ? 250 : _ref3$longPressThresh, _ref3$validContainers = _ref3.validContainers, validContainers = _ref3$validContainers === void 0 ? [] : _ref3$validContainers;\n        (0, _classCallCheck2.default)(this, Selection);\n        this._initialEvent = null;\n        this.selecting = false;\n        this.isDetached = false;\n        this.container = node;\n        this.globalMouse = !node || global;\n        this.longPressThreshold = longPressThreshold;\n        this.validContainers = validContainers;\n        this._listeners = Object.create(null);\n        this._handleInitialEvent = this._handleInitialEvent.bind(this);\n        this._handleMoveEvent = this._handleMoveEvent.bind(this);\n        this._handleTerminatingEvent = this._handleTerminatingEvent.bind(this);\n        this._keyListener = this._keyListener.bind(this);\n        this._dropFromOutsideListener = this._dropFromOutsideListener.bind(this);\n        this._dragOverFromOutsideListener = this._dragOverFromOutsideListener.bind(this);\n        // Fixes an iOS 10 bug where scrolling could not be prevented on the window.\n        // https://github.com/metafizzy/flickity/issues/457#issuecomment-254501356\n        this._removeTouchMoveWindowListener = addEventListener(\"touchmove\", function() {}, window);\n        this._removeKeyDownListener = addEventListener(\"keydown\", this._keyListener);\n        this._removeKeyUpListener = addEventListener(\"keyup\", this._keyListener);\n        this._removeDropFromOutsideListener = addEventListener(\"drop\", this._dropFromOutsideListener);\n        this._removeDragOverFromOutsideListener = addEventListener(\"dragover\", this._dragOverFromOutsideListener);\n        this._addInitialEventListener();\n    }\n    return (0, _createClass2.default)(Selection, [\n        {\n            key: \"on\",\n            value: function on(type, handler) {\n                var handlers = this._listeners[type] || (this._listeners[type] = []);\n                handlers.push(handler);\n                return {\n                    remove: function remove() {\n                        var idx = handlers.indexOf(handler);\n                        if (idx !== -1) handlers.splice(idx, 1);\n                    }\n                };\n            }\n        },\n        {\n            key: \"emit\",\n            value: function emit(type) {\n                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    args[_key - 1] = arguments[_key];\n                }\n                var result;\n                var handlers = this._listeners[type] || [];\n                handlers.forEach(function(fn) {\n                    if (result === undefined) result = fn.apply(void 0, args);\n                });\n                return result;\n            }\n        },\n        {\n            key: \"teardown\",\n            value: function teardown() {\n                this._initialEvent = null;\n                this._initialEventData = null;\n                this._selectRect = null;\n                this.selecting = false;\n                this._lastClickData = null;\n                this.isDetached = true;\n                this._listeners = Object.create(null);\n                this._removeTouchMoveWindowListener && this._removeTouchMoveWindowListener();\n                this._removeInitialEventListener && this._removeInitialEventListener();\n                this._removeEndListener && this._removeEndListener();\n                this._onEscListener && this._onEscListener();\n                this._removeMoveListener && this._removeMoveListener();\n                this._removeKeyUpListener && this._removeKeyUpListener();\n                this._removeKeyDownListener && this._removeKeyDownListener();\n                this._removeDropFromOutsideListener && this._removeDropFromOutsideListener();\n                this._removeDragOverFromOutsideListener && this._removeDragOverFromOutsideListener();\n            }\n        },\n        {\n            key: \"isSelected\",\n            value: function isSelected(node) {\n                var box = this._selectRect;\n                if (!box || !this.selecting) return false;\n                return objectsCollide(box, getBoundsForNode(node));\n            }\n        },\n        {\n            key: \"filter\",\n            value: function filter(items) {\n                var box = this._selectRect;\n                //not selecting\n                if (!box || !this.selecting) return [];\n                return items.filter(this.isSelected, this);\n            }\n        },\n        {\n            key: \"_addLongPressListener\",\n            value: function _addLongPressListener(handler, initialEvent) {\n                var _this = this;\n                var timer = null;\n                var removeTouchMoveListener = null;\n                var removeTouchEndListener = null;\n                var handleTouchStart = function handleTouchStart(initialEvent) {\n                    timer = setTimeout(function() {\n                        cleanup();\n                        handler(initialEvent);\n                    }, _this.longPressThreshold);\n                    removeTouchMoveListener = addEventListener(\"touchmove\", function() {\n                        return cleanup();\n                    });\n                    removeTouchEndListener = addEventListener(\"touchend\", function() {\n                        return cleanup();\n                    });\n                };\n                var removeTouchStartListener = addEventListener(\"touchstart\", handleTouchStart);\n                var cleanup = function cleanup() {\n                    if (timer) {\n                        clearTimeout(timer);\n                    }\n                    if (removeTouchMoveListener) {\n                        removeTouchMoveListener();\n                    }\n                    if (removeTouchEndListener) {\n                        removeTouchEndListener();\n                    }\n                    timer = null;\n                    removeTouchMoveListener = null;\n                    removeTouchEndListener = null;\n                };\n                if (initialEvent) {\n                    handleTouchStart(initialEvent);\n                }\n                return function() {\n                    cleanup();\n                    removeTouchStartListener();\n                };\n            }\n        },\n        {\n            key: \"_addInitialEventListener\",\n            value: function _addInitialEventListener() {\n                var _this2 = this;\n                var removeMouseDownListener = addEventListener(\"mousedown\", function(e) {\n                    _this2._removeInitialEventListener();\n                    _this2._handleInitialEvent(e);\n                    _this2._removeInitialEventListener = addEventListener(\"mousedown\", _this2._handleInitialEvent);\n                });\n                var removeTouchStartListener = addEventListener(\"touchstart\", function(e) {\n                    _this2._removeInitialEventListener();\n                    _this2._removeInitialEventListener = _this2._addLongPressListener(_this2._handleInitialEvent, e);\n                });\n                this._removeInitialEventListener = function() {\n                    removeMouseDownListener();\n                    removeTouchStartListener();\n                };\n            }\n        },\n        {\n            key: \"_dropFromOutsideListener\",\n            value: function _dropFromOutsideListener(e) {\n                var _getEventCoordinates = getEventCoordinates(e), pageX = _getEventCoordinates.pageX, pageY = _getEventCoordinates.pageY, clientX = _getEventCoordinates.clientX, clientY = _getEventCoordinates.clientY;\n                this.emit(\"dropFromOutside\", {\n                    x: pageX,\n                    y: pageY,\n                    clientX: clientX,\n                    clientY: clientY\n                });\n                e.preventDefault();\n            }\n        },\n        {\n            key: \"_dragOverFromOutsideListener\",\n            value: function _dragOverFromOutsideListener(e) {\n                var _getEventCoordinates2 = getEventCoordinates(e), pageX = _getEventCoordinates2.pageX, pageY = _getEventCoordinates2.pageY, clientX = _getEventCoordinates2.clientX, clientY = _getEventCoordinates2.clientY;\n                this.emit(\"dragOverFromOutside\", {\n                    x: pageX,\n                    y: pageY,\n                    clientX: clientX,\n                    clientY: clientY\n                });\n                e.preventDefault();\n            }\n        },\n        {\n            key: \"_handleInitialEvent\",\n            value: function _handleInitialEvent(e) {\n                this._initialEvent = e;\n                if (this.isDetached) {\n                    return;\n                }\n                var _getEventCoordinates3 = getEventCoordinates(e), clientX = _getEventCoordinates3.clientX, clientY = _getEventCoordinates3.clientY, pageX = _getEventCoordinates3.pageX, pageY = _getEventCoordinates3.pageY;\n                var node = this.container(), collides, offsetData;\n                // Right clicks\n                if (e.which === 3 || e.button === 2 || !isOverContainer(node, clientX, clientY)) return;\n                if (!this.globalMouse && node && !(0, _contains.default)(node, e.target)) {\n                    var _normalizeDistance = normalizeDistance(0), top = _normalizeDistance.top, left = _normalizeDistance.left, bottom = _normalizeDistance.bottom, right = _normalizeDistance.right;\n                    offsetData = getBoundsForNode(node);\n                    collides = objectsCollide({\n                        top: offsetData.top - top,\n                        left: offsetData.left - left,\n                        bottom: offsetData.bottom + bottom,\n                        right: offsetData.right + right\n                    }, {\n                        top: pageY,\n                        left: pageX\n                    });\n                    if (!collides) return;\n                }\n                var result = this.emit(\"beforeSelect\", this._initialEventData = {\n                    isTouch: /^touch/.test(e.type),\n                    x: pageX,\n                    y: pageY,\n                    clientX: clientX,\n                    clientY: clientY\n                });\n                if (result === false) return;\n                switch(e.type){\n                    case \"mousedown\":\n                        this._removeEndListener = addEventListener(\"mouseup\", this._handleTerminatingEvent);\n                        this._onEscListener = addEventListener(\"keydown\", this._handleTerminatingEvent);\n                        this._removeMoveListener = addEventListener(\"mousemove\", this._handleMoveEvent);\n                        break;\n                    case \"touchstart\":\n                        this._handleMoveEvent(e);\n                        this._removeEndListener = addEventListener(\"touchend\", this._handleTerminatingEvent);\n                        this._removeMoveListener = addEventListener(\"touchmove\", this._handleMoveEvent);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        },\n        {\n            key: \"_isWithinValidContainer\",\n            value: function _isWithinValidContainer(e) {\n                var eventTarget = e.target;\n                var containers = this.validContainers;\n                if (!containers || !containers.length || !eventTarget) {\n                    return true;\n                }\n                return containers.some(function(target) {\n                    return !!eventTarget.closest(target);\n                });\n            }\n        },\n        {\n            key: \"_handleTerminatingEvent\",\n            value: function _handleTerminatingEvent(e) {\n                var selecting = this.selecting;\n                var bounds = this._selectRect;\n                // If it's not in selecting state, it's a click event\n                if (!selecting && e.type.includes(\"key\")) {\n                    e = this._initialEvent;\n                }\n                this.selecting = false;\n                this._removeEndListener && this._removeEndListener();\n                this._removeMoveListener && this._removeMoveListener();\n                this._selectRect = null;\n                this._initialEvent = null;\n                this._initialEventData = null;\n                if (!e) return;\n                var inRoot = !this.container || (0, _contains.default)(this.container(), e.target);\n                var isWithinValidContainer = this._isWithinValidContainer(e);\n                if (e.key === \"Escape\" || !isWithinValidContainer) {\n                    return this.emit(\"reset\");\n                }\n                if (!selecting && inRoot) {\n                    return this._handleClickEvent(e);\n                }\n                // User drag-clicked in the Selectable area\n                if (selecting) return this.emit(\"select\", bounds);\n                return this.emit(\"reset\");\n            }\n        },\n        {\n            key: \"_handleClickEvent\",\n            value: function _handleClickEvent(e) {\n                var _getEventCoordinates4 = getEventCoordinates(e), pageX = _getEventCoordinates4.pageX, pageY = _getEventCoordinates4.pageY, clientX = _getEventCoordinates4.clientX, clientY = _getEventCoordinates4.clientY;\n                var now = new Date().getTime();\n                if (this._lastClickData && now - this._lastClickData.timestamp < clickInterval) {\n                    // Double click event\n                    this._lastClickData = null;\n                    return this.emit(\"doubleClick\", {\n                        x: pageX,\n                        y: pageY,\n                        clientX: clientX,\n                        clientY: clientY\n                    });\n                }\n                // Click event\n                this._lastClickData = {\n                    timestamp: now\n                };\n                return this.emit(\"click\", {\n                    x: pageX,\n                    y: pageY,\n                    clientX: clientX,\n                    clientY: clientY\n                });\n            }\n        },\n        {\n            key: \"_handleMoveEvent\",\n            value: function _handleMoveEvent(e) {\n                if (this._initialEventData === null || this.isDetached) {\n                    return;\n                }\n                var _this$_initialEventDa = this._initialEventData, x = _this$_initialEventDa.x, y = _this$_initialEventDa.y;\n                var _getEventCoordinates5 = getEventCoordinates(e), pageX = _getEventCoordinates5.pageX, pageY = _getEventCoordinates5.pageY;\n                var w = Math.abs(x - pageX);\n                var h = Math.abs(y - pageY);\n                var left = Math.min(pageX, x), top = Math.min(pageY, y), old = this.selecting;\n                var click = this.isClick(pageX, pageY);\n                // Prevent emitting selectStart event until mouse is moved.\n                // in Chrome on Windows, mouseMove event may be fired just after mouseDown event.\n                if (click && !old && !(w || h)) {\n                    return;\n                }\n                if (!old && !click) {\n                    this.emit(\"selectStart\", this._initialEventData);\n                }\n                if (!click) {\n                    this.selecting = true;\n                    this._selectRect = {\n                        top: top,\n                        left: left,\n                        x: pageX,\n                        y: pageY,\n                        right: left + w,\n                        bottom: top + h\n                    };\n                    this.emit(\"selecting\", this._selectRect);\n                }\n                e.preventDefault();\n            }\n        },\n        {\n            key: \"_keyListener\",\n            value: function _keyListener(e) {\n                this.ctrl = e.metaKey || e.ctrlKey;\n            }\n        },\n        {\n            key: \"isClick\",\n            value: function isClick(pageX, pageY) {\n                var _this$_initialEventDa2 = this._initialEventData, x = _this$_initialEventDa2.x, y = _this$_initialEventDa2.y, isTouch = _this$_initialEventDa2.isTouch;\n                return !isTouch && Math.abs(pageX - x) <= clickTolerance && Math.abs(pageY - y) <= clickTolerance;\n            }\n        }\n    ]);\n}();\n/**\n * Resolve the disance prop from either an Int or an Object\n * @return {Object}\n */ function normalizeDistance() {\n    var distance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if ((0, _typeof2.default)(distance) !== \"object\") distance = {\n        top: distance,\n        left: distance,\n        right: distance,\n        bottom: distance\n    };\n    return distance;\n}\n/**\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\n * properties, determine if they collide.\n * @param  {Object|HTMLElement} a\n * @param  {Object|HTMLElement} b\n * @return {bool}\n */ function objectsCollide(nodeA, nodeB) {\n    var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var _getBoundsForNode = getBoundsForNode(nodeA), aTop = _getBoundsForNode.top, aLeft = _getBoundsForNode.left, _getBoundsForNode$rig = _getBoundsForNode.right, aRight = _getBoundsForNode$rig === void 0 ? aLeft : _getBoundsForNode$rig, _getBoundsForNode$bot = _getBoundsForNode.bottom, aBottom = _getBoundsForNode$bot === void 0 ? aTop : _getBoundsForNode$bot;\n    var _getBoundsForNode2 = getBoundsForNode(nodeB), bTop = _getBoundsForNode2.top, bLeft = _getBoundsForNode2.left, _getBoundsForNode2$ri = _getBoundsForNode2.right, bRight = _getBoundsForNode2$ri === void 0 ? bLeft : _getBoundsForNode2$ri, _getBoundsForNode2$bo = _getBoundsForNode2.bottom, bBottom = _getBoundsForNode2$bo === void 0 ? bTop : _getBoundsForNode2$bo;\n    return !// 'a' bottom doesn't touch 'b' top\n    (aBottom - tolerance < bTop || // 'a' top doesn't touch 'b' bottom\n    aTop + tolerance > bBottom || // 'a' right doesn't touch 'b' left\n    aRight - tolerance < bLeft || // 'a' left doesn't touch 'b' right\n    aLeft + tolerance > bRight);\n}\n/**\n * Given a node, get everything needed to calculate its boundaries\n * @param  {HTMLElement} node\n * @return {Object}\n */ function getBoundsForNode(node) {\n    if (!node.getBoundingClientRect) return node;\n    var rect = node.getBoundingClientRect(), left = rect.left + pageOffset(\"left\"), top = rect.top + pageOffset(\"top\");\n    return {\n        top: top,\n        left: left,\n        right: (node.offsetWidth || 0) + left,\n        bottom: (node.offsetHeight || 0) + top\n    };\n}\nfunction pageOffset(dir) {\n    if (dir === \"left\") return window.pageXOffset || document.body.scrollLeft || 0;\n    if (dir === \"top\") return window.pageYOffset || document.body.scrollTop || 0;\n}\nvar _default = exports[\"default\"] = Selection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/Selection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/TimeGridEvent.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/TimeGridEvent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _objectSpread3 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nvar _clsx = _interopRequireDefault(__webpack_require__(/*! clsx */ \"(ssr)/./node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction stringifyPercent(v) {\n    return typeof v === \"string\" ? v : v + \"%\";\n}\n/* eslint-disable react/prop-types */ function TimeGridEvent(props) {\n    var style = props.style, className = props.className, event = props.event, accessors = props.accessors, rtl = props.rtl, selected = props.selected, label = props.label, continuesPrior = props.continuesPrior, continuesAfter = props.continuesAfter, getters = props.getters, onClick = props.onClick, onDoubleClick = props.onDoubleClick, isBackgroundEvent = props.isBackgroundEvent, onKeyPress = props.onKeyPress, _props$components = props.components, Event = _props$components.event, EventWrapper = _props$components.eventWrapper;\n    var title = accessors.title(event);\n    var tooltip = accessors.tooltip(event);\n    var end = accessors.end(event);\n    var start = accessors.start(event);\n    var userProps = getters.eventProp(event, start, end, selected);\n    var inner = [\n        /*#__PURE__*/ _react.default.createElement(\"div\", {\n            key: \"1\",\n            className: \"rbc-event-label\"\n        }, label),\n        /*#__PURE__*/ _react.default.createElement(\"div\", {\n            key: \"2\",\n            className: \"rbc-event-content\"\n        }, Event ? /*#__PURE__*/ _react.default.createElement(Event, {\n            event: event,\n            title: title\n        }) : title)\n    ];\n    var height = style.height, top = style.top, width = style.width, xOffset = style.xOffset;\n    var eventStyle = (0, _objectSpread3.default)((0, _objectSpread3.default)({}, userProps.style), {}, (0, _defineProperty2.default)({\n        top: stringifyPercent(top),\n        height: stringifyPercent(height),\n        width: stringifyPercent(width)\n    }, rtl ? \"right\" : \"left\", stringifyPercent(xOffset)));\n    return /*#__PURE__*/ _react.default.createElement(EventWrapper, Object.assign({\n        type: \"time\"\n    }, props), /*#__PURE__*/ _react.default.createElement(\"div\", {\n        role: \"button\",\n        tabIndex: 0,\n        onClick: onClick,\n        onDoubleClick: onDoubleClick,\n        style: eventStyle,\n        onKeyDown: onKeyPress,\n        title: tooltip ? (typeof label === \"string\" ? label + \": \" : \"\") + tooltip : undefined,\n        className: (0, _clsx.default)(isBackgroundEvent ? \"rbc-background-event\" : \"rbc-event\", className, userProps.className, {\n            \"rbc-selected\": selected,\n            \"rbc-event-continues-earlier\": continuesPrior,\n            \"rbc-event-continues-later\": continuesAfter\n        })\n    }, inner));\n}\nvar _default = exports[\"default\"] = TimeGridEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9UaW1lR3JpZEV2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEseUJBQXlCQyw0SkFBK0Q7QUFDNUZFLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUUsbUJBQW1CUCx1QkFBdUJDLG1CQUFPQSxDQUFDLDRHQUF1QztBQUM3RixJQUFJTyxpQkFBaUJSLHVCQUF1QkMsbUJBQU9BLENBQUMsMEdBQXNDO0FBQzFGLElBQUlRLFFBQVFULHVCQUF1QkMsbUJBQU9BLENBQUMsc0ZBQU07QUFDakQsSUFBSVMsU0FBU1YsdUJBQXVCQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUNuRCxTQUFTVSxpQkFBaUJDLENBQUM7SUFDekIsT0FBTyxPQUFPQSxNQUFNLFdBQVdBLElBQUlBLElBQUk7QUFDekM7QUFFQSxtQ0FBbUMsR0FDbkMsU0FBU0MsY0FBY0MsS0FBSztJQUMxQixJQUFJQyxRQUFRRCxNQUFNQyxLQUFLLEVBQ3JCQyxZQUFZRixNQUFNRSxTQUFTLEVBQzNCQyxRQUFRSCxNQUFNRyxLQUFLLEVBQ25CQyxZQUFZSixNQUFNSSxTQUFTLEVBQzNCQyxNQUFNTCxNQUFNSyxHQUFHLEVBQ2ZDLFdBQVdOLE1BQU1NLFFBQVEsRUFDekJDLFFBQVFQLE1BQU1PLEtBQUssRUFDbkJDLGlCQUFpQlIsTUFBTVEsY0FBYyxFQUNyQ0MsaUJBQWlCVCxNQUFNUyxjQUFjLEVBQ3JDQyxVQUFVVixNQUFNVSxPQUFPLEVBQ3ZCQyxVQUFVWCxNQUFNVyxPQUFPLEVBQ3ZCQyxnQkFBZ0JaLE1BQU1ZLGFBQWEsRUFDbkNDLG9CQUFvQmIsTUFBTWEsaUJBQWlCLEVBQzNDQyxhQUFhZCxNQUFNYyxVQUFVLEVBQzdCQyxvQkFBb0JmLE1BQU1nQixVQUFVLEVBQ3BDQyxRQUFRRixrQkFBa0JaLEtBQUssRUFDL0JlLGVBQWVILGtCQUFrQkksWUFBWTtJQUMvQyxJQUFJQyxRQUFRaEIsVUFBVWdCLEtBQUssQ0FBQ2pCO0lBQzVCLElBQUlrQixVQUFVakIsVUFBVWlCLE9BQU8sQ0FBQ2xCO0lBQ2hDLElBQUltQixNQUFNbEIsVUFBVWtCLEdBQUcsQ0FBQ25CO0lBQ3hCLElBQUlvQixRQUFRbkIsVUFBVW1CLEtBQUssQ0FBQ3BCO0lBQzVCLElBQUlxQixZQUFZZCxRQUFRZSxTQUFTLENBQUN0QixPQUFPb0IsT0FBT0QsS0FBS2hCO0lBQ3JELElBQUlvQixRQUFRO1FBQUMsV0FBVyxHQUFFOUIsT0FBT1IsT0FBTyxDQUFDdUMsYUFBYSxDQUFDLE9BQU87WUFDNURDLEtBQUs7WUFDTDFCLFdBQVc7UUFDYixHQUFHSztRQUFRLFdBQVcsR0FBRVgsT0FBT1IsT0FBTyxDQUFDdUMsYUFBYSxDQUFDLE9BQU87WUFDMURDLEtBQUs7WUFDTDFCLFdBQVc7UUFDYixHQUFHZSxRQUFRLFdBQVcsR0FBRXJCLE9BQU9SLE9BQU8sQ0FBQ3VDLGFBQWEsQ0FBQ1YsT0FBTztZQUMxRGQsT0FBT0E7WUFDUGlCLE9BQU9BO1FBQ1QsS0FBS0E7S0FBTztJQUNaLElBQUlTLFNBQVM1QixNQUFNNEIsTUFBTSxFQUN2QkMsTUFBTTdCLE1BQU02QixHQUFHLEVBQ2ZDLFFBQVE5QixNQUFNOEIsS0FBSyxFQUNuQkMsVUFBVS9CLE1BQU0rQixPQUFPO0lBQ3pCLElBQUlDLGFBQWEsQ0FBQyxHQUFHdkMsZUFBZU4sT0FBTyxFQUFFLENBQUMsR0FBR00sZUFBZU4sT0FBTyxFQUFFLENBQUMsR0FBR29DLFVBQVV2QixLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBR1IsaUJBQWlCTCxPQUFPLEVBQUU7UUFDL0gwQyxLQUFLakMsaUJBQWlCaUM7UUFDdEJELFFBQVFoQyxpQkFBaUJnQztRQUN6QkUsT0FBT2xDLGlCQUFpQmtDO0lBQzFCLEdBQUcxQixNQUFNLFVBQVUsUUFBUVIsaUJBQWlCbUM7SUFDNUMsT0FBTyxXQUFXLEdBQUVwQyxPQUFPUixPQUFPLENBQUN1QyxhQUFhLENBQUNULGNBQWM3QixPQUFPNkMsTUFBTSxDQUFDO1FBQzNFQyxNQUFNO0lBQ1IsR0FBR25DLFFBQVEsV0FBVyxHQUFFSixPQUFPUixPQUFPLENBQUN1QyxhQUFhLENBQUMsT0FBTztRQUMxRFMsTUFBTTtRQUNOQyxVQUFVO1FBQ1YxQixTQUFTQTtRQUNUQyxlQUFlQTtRQUNmWCxPQUFPZ0M7UUFDUEssV0FBV3hCO1FBQ1hNLE9BQU9DLFVBQVUsQ0FBQyxPQUFPZCxVQUFVLFdBQVdBLFFBQVEsT0FBTyxFQUFDLElBQUtjLFVBQVVrQjtRQUM3RXJDLFdBQVcsQ0FBQyxHQUFHUCxNQUFNUCxPQUFPLEVBQUV5QixvQkFBb0IseUJBQXlCLGFBQWFYLFdBQVdzQixVQUFVdEIsU0FBUyxFQUFFO1lBQ3RILGdCQUFnQkk7WUFDaEIsK0JBQStCRTtZQUMvQiw2QkFBNkJDO1FBQy9CO0lBQ0YsR0FBR2lCO0FBQ0w7QUFDQSxJQUFJYyxXQUFXakQsa0JBQWUsR0FBR1EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcmJlaXRzcGxhbi8uL25vZGVfbW9kdWxlcy9yZWFjdC1iaWctY2FsZW5kYXIvbGliL1RpbWVHcmlkRXZlbnQuanM/YWUyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xudmFyIF9vYmplY3RTcHJlYWQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyXCIpKTtcbnZhciBfY2xzeCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsc3hcIikpO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIHN0cmluZ2lmeVBlcmNlbnQodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnID8gdiA6IHYgKyAnJSc7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cbmZ1bmN0aW9uIFRpbWVHcmlkRXZlbnQocHJvcHMpIHtcbiAgdmFyIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgIGV2ZW50ID0gcHJvcHMuZXZlbnQsXG4gICAgYWNjZXNzb3JzID0gcHJvcHMuYWNjZXNzb3JzLFxuICAgIHJ0bCA9IHByb3BzLnJ0bCxcbiAgICBzZWxlY3RlZCA9IHByb3BzLnNlbGVjdGVkLFxuICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgY29udGludWVzUHJpb3IgPSBwcm9wcy5jb250aW51ZXNQcmlvcixcbiAgICBjb250aW51ZXNBZnRlciA9IHByb3BzLmNvbnRpbnVlc0FmdGVyLFxuICAgIGdldHRlcnMgPSBwcm9wcy5nZXR0ZXJzLFxuICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgIG9uRG91YmxlQ2xpY2sgPSBwcm9wcy5vbkRvdWJsZUNsaWNrLFxuICAgIGlzQmFja2dyb3VuZEV2ZW50ID0gcHJvcHMuaXNCYWNrZ3JvdW5kRXZlbnQsXG4gICAgb25LZXlQcmVzcyA9IHByb3BzLm9uS2V5UHJlc3MsXG4gICAgX3Byb3BzJGNvbXBvbmVudHMgPSBwcm9wcy5jb21wb25lbnRzLFxuICAgIEV2ZW50ID0gX3Byb3BzJGNvbXBvbmVudHMuZXZlbnQsXG4gICAgRXZlbnRXcmFwcGVyID0gX3Byb3BzJGNvbXBvbmVudHMuZXZlbnRXcmFwcGVyO1xuICB2YXIgdGl0bGUgPSBhY2Nlc3NvcnMudGl0bGUoZXZlbnQpO1xuICB2YXIgdG9vbHRpcCA9IGFjY2Vzc29ycy50b29sdGlwKGV2ZW50KTtcbiAgdmFyIGVuZCA9IGFjY2Vzc29ycy5lbmQoZXZlbnQpO1xuICB2YXIgc3RhcnQgPSBhY2Nlc3NvcnMuc3RhcnQoZXZlbnQpO1xuICB2YXIgdXNlclByb3BzID0gZ2V0dGVycy5ldmVudFByb3AoZXZlbnQsIHN0YXJ0LCBlbmQsIHNlbGVjdGVkKTtcbiAgdmFyIGlubmVyID0gWy8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBrZXk6IFwiMVwiLFxuICAgIGNsYXNzTmFtZTogXCJyYmMtZXZlbnQtbGFiZWxcIlxuICB9LCBsYWJlbCksIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBrZXk6IFwiMlwiLFxuICAgIGNsYXNzTmFtZTogXCJyYmMtZXZlbnQtY29udGVudFwiXG4gIH0sIEV2ZW50ID8gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRXZlbnQsIHtcbiAgICBldmVudDogZXZlbnQsXG4gICAgdGl0bGU6IHRpdGxlXG4gIH0pIDogdGl0bGUpXTtcbiAgdmFyIGhlaWdodCA9IHN0eWxlLmhlaWdodCxcbiAgICB0b3AgPSBzdHlsZS50b3AsXG4gICAgd2lkdGggPSBzdHlsZS53aWR0aCxcbiAgICB4T2Zmc2V0ID0gc3R5bGUueE9mZnNldDtcbiAgdmFyIGV2ZW50U3R5bGUgPSAoMCwgX29iamVjdFNwcmVhZDMuZGVmYXVsdCkoKDAsIF9vYmplY3RTcHJlYWQzLmRlZmF1bHQpKHt9LCB1c2VyUHJvcHMuc3R5bGUpLCB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe1xuICAgIHRvcDogc3RyaW5naWZ5UGVyY2VudCh0b3ApLFxuICAgIGhlaWdodDogc3RyaW5naWZ5UGVyY2VudChoZWlnaHQpLFxuICAgIHdpZHRoOiBzdHJpbmdpZnlQZXJjZW50KHdpZHRoKVxuICB9LCBydGwgPyAncmlnaHQnIDogJ2xlZnQnLCBzdHJpbmdpZnlQZXJjZW50KHhPZmZzZXQpKSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChFdmVudFdyYXBwZXIsIE9iamVjdC5hc3NpZ24oe1xuICAgIHR5cGU6IFwidGltZVwiXG4gIH0sIHByb3BzKSwgLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgdGFiSW5kZXg6IDAsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkRvdWJsZUNsaWNrOiBvbkRvdWJsZUNsaWNrLFxuICAgIHN0eWxlOiBldmVudFN0eWxlLFxuICAgIG9uS2V5RG93bjogb25LZXlQcmVzcyxcbiAgICB0aXRsZTogdG9vbHRpcCA/ICh0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnID8gbGFiZWwgKyAnOiAnIDogJycpICsgdG9vbHRpcCA6IHVuZGVmaW5lZCxcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xzeC5kZWZhdWx0KShpc0JhY2tncm91bmRFdmVudCA/ICdyYmMtYmFja2dyb3VuZC1ldmVudCcgOiAncmJjLWV2ZW50JywgY2xhc3NOYW1lLCB1c2VyUHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAncmJjLXNlbGVjdGVkJzogc2VsZWN0ZWQsXG4gICAgICAncmJjLWV2ZW50LWNvbnRpbnVlcy1lYXJsaWVyJzogY29udGludWVzUHJpb3IsXG4gICAgICAncmJjLWV2ZW50LWNvbnRpbnVlcy1sYXRlcic6IGNvbnRpbnVlc0FmdGVyXG4gICAgfSlcbiAgfSwgaW5uZXIpKTtcbn1cbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9IFRpbWVHcmlkRXZlbnQ7Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2RlZmluZVByb3BlcnR5MiIsIl9vYmplY3RTcHJlYWQzIiwiX2Nsc3giLCJfcmVhY3QiLCJzdHJpbmdpZnlQZXJjZW50IiwidiIsIlRpbWVHcmlkRXZlbnQiLCJwcm9wcyIsInN0eWxlIiwiY2xhc3NOYW1lIiwiZXZlbnQiLCJhY2Nlc3NvcnMiLCJydGwiLCJzZWxlY3RlZCIsImxhYmVsIiwiY29udGludWVzUHJpb3IiLCJjb250aW51ZXNBZnRlciIsImdldHRlcnMiLCJvbkNsaWNrIiwib25Eb3VibGVDbGljayIsImlzQmFja2dyb3VuZEV2ZW50Iiwib25LZXlQcmVzcyIsIl9wcm9wcyRjb21wb25lbnRzIiwiY29tcG9uZW50cyIsIkV2ZW50IiwiRXZlbnRXcmFwcGVyIiwiZXZlbnRXcmFwcGVyIiwidGl0bGUiLCJ0b29sdGlwIiwiZW5kIiwic3RhcnQiLCJ1c2VyUHJvcHMiLCJldmVudFByb3AiLCJpbm5lciIsImNyZWF0ZUVsZW1lbnQiLCJrZXkiLCJoZWlnaHQiLCJ0b3AiLCJ3aWR0aCIsInhPZmZzZXQiLCJldmVudFN0eWxlIiwiYXNzaWduIiwidHlwZSIsInJvbGUiLCJ0YWJJbmRleCIsIm9uS2V5RG93biIsInVuZGVmaW5lZCIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/TimeGridEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/DnDContext.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/addons/dragAndDrop/DnDContext.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DnDContext = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar DnDContext = exports.DnDContext = /*#__PURE__*/ _react.default.createContext();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9hZGRvbnMvZHJhZ0FuZERyb3AvRG5EQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLHlCQUF5QkMsNEpBQStEO0FBQzVGRSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixJQUFJRyxTQUFTUix1QkFBdUJDLG1CQUFPQSxDQUFDLHdHQUFPO0FBQ25ELElBQUlNLGFBQWFGLGtCQUFrQixHQUFHLFdBQVcsR0FBRUcsT0FBT04sT0FBTyxDQUFDTyxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJiZWl0c3BsYW4vLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9hZGRvbnMvZHJhZ0FuZERyb3AvRG5EQ29udGV4dC5qcz8xZmVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKS5kZWZhdWx0O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRG5EQ29udGV4dCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgRG5EQ29udGV4dCA9IGV4cG9ydHMuRG5EQ29udGV4dCA9IC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KCk7Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRG5EQ29udGV4dCIsIl9yZWFjdCIsImNyZWF0ZUNvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/DnDContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/EventContainerWrapper.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/addons/dragAndDrop/EventContainerWrapper.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\")[\"default\"]);\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _callSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/callSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/callSuper.js\"));\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _DnDContext = __webpack_require__(/*! ./DnDContext */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/DnDContext.js\");\nvar _domHelpers = __webpack_require__(/*! dom-helpers */ \"(ssr)/./node_modules/dom-helpers/esm/index.js\");\nvar _querySelectorAll = _interopRequireDefault(__webpack_require__(/*! dom-helpers/cjs/querySelectorAll */ \"(ssr)/./node_modules/dom-helpers/cjs/querySelectorAll.js\"));\nvar _Selection = _interopRequireWildcard(__webpack_require__(/*! ../../Selection */ \"(ssr)/./node_modules/react-big-calendar/lib/Selection.js\"));\nvar _TimeGridEvent = _interopRequireDefault(__webpack_require__(/*! ../../TimeGridEvent */ \"(ssr)/./node_modules/react-big-calendar/lib/TimeGridEvent.js\"));\nvar _common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/common.js\");\nvar EventContainerWrapper = /*#__PURE__*/ function(_React$Component) {\n    function EventContainerWrapper() {\n        var _this;\n        (0, _classCallCheck2.default)(this, EventContainerWrapper);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = (0, _callSuper2.default)(this, EventContainerWrapper, [].concat(args));\n        _this.handleMove = function(point, bounds) {\n            if (!(0, _common.pointInColumn)(bounds, point)) return _this.reset();\n            var event = _this.context.draggable.dragAndDropAction.event;\n            var _this$props = _this.props, accessors = _this$props.accessors, slotMetrics = _this$props.slotMetrics;\n            var newSlot = slotMetrics.closestSlotFromPoint({\n                y: point.y - _this.eventOffsetTop,\n                x: point.x\n            }, bounds);\n            var _eventTimes = (0, _common.eventTimes)(event, accessors, _this.props.localizer), duration = _eventTimes.duration;\n            var newEnd = _this.props.localizer.add(newSlot, duration, \"milliseconds\");\n            _this.update(event, slotMetrics.getRange(newSlot, newEnd, false, true));\n        };\n        _this.handleDropFromOutside = function(point, boundaryBox) {\n            var _this$props2 = _this.props, slotMetrics = _this$props2.slotMetrics, resource = _this$props2.resource;\n            var start = slotMetrics.closestSlotFromPoint({\n                y: point.y,\n                x: point.x\n            }, boundaryBox);\n            _this.context.draggable.onDropFromOutside({\n                start: start,\n                end: slotMetrics.nextSlot(start),\n                allDay: false,\n                resource: resource\n            });\n        };\n        _this.handleDragOverFromOutside = function(point, bounds) {\n            var slotMetrics = _this.props.slotMetrics;\n            var start = slotMetrics.closestSlotFromPoint({\n                y: point.y,\n                x: point.x\n            }, bounds);\n            var end = slotMetrics.nextSlot(start);\n            var event = _this.context.draggable.dragFromOutsideItem();\n            _this.update(event, slotMetrics.getRange(start, end, false, true));\n        };\n        _this.updateParentScroll = function(parent, node) {\n            setTimeout(function() {\n                var draggedEl = (0, _querySelectorAll.default)(node, \".rbc-addons-dnd-drag-preview\")[0];\n                if (draggedEl) {\n                    if (draggedEl.offsetTop < parent.scrollTop) {\n                        (0, _domHelpers.scrollTop)(parent, Math.max(draggedEl.offsetTop, 0));\n                    } else if (draggedEl.offsetTop + draggedEl.offsetHeight > parent.scrollTop + parent.clientHeight) {\n                        (0, _domHelpers.scrollTop)(parent, Math.min(draggedEl.offsetTop - parent.offsetHeight + draggedEl.offsetHeight, parent.scrollHeight));\n                    }\n                }\n            });\n        };\n        _this._selectable = function() {\n            var wrapper = _this.ref.current;\n            var node = wrapper.children[0];\n            var isBeingDragged = false;\n            var selector = _this._selector = new _Selection.default(function() {\n                return wrapper.closest(\".rbc-time-view\");\n            });\n            var parent = (0, _domHelpers.scrollParent)(wrapper);\n            selector.on(\"beforeSelect\", function(point) {\n                var dragAndDropAction = _this.context.draggable.dragAndDropAction;\n                if (!dragAndDropAction.action) return false;\n                if (dragAndDropAction.action === \"resize\") {\n                    return (0, _common.pointInColumn)((0, _Selection.getBoundsForNode)(node), point);\n                }\n                var eventNode = (0, _Selection.getEventNodeFromPoint)(node, point);\n                if (!eventNode) return false;\n                // eventOffsetTop is distance from the top of the event to the initial\n                // mouseDown position. We need this later to compute the new top of the\n                // event during move operations, since the final location is really a\n                // delta from this point. note: if we want to DRY this with WeekWrapper,\n                // probably better just to capture the mouseDown point here and do the\n                // placement computation in handleMove()...\n                _this.eventOffsetTop = point.y - (0, _Selection.getBoundsForNode)(eventNode).top;\n            });\n            selector.on(\"selecting\", function(box) {\n                var bounds = (0, _Selection.getBoundsForNode)(node);\n                var dragAndDropAction = _this.context.draggable.dragAndDropAction;\n                if (dragAndDropAction.action === \"move\") {\n                    _this.updateParentScroll(parent, node);\n                    _this.handleMove(box, bounds);\n                }\n                if (dragAndDropAction.action === \"resize\") {\n                    _this.updateParentScroll(parent, node);\n                    _this.handleResize(box, bounds);\n                }\n            });\n            selector.on(\"dropFromOutside\", function(point) {\n                if (!_this.context.draggable.onDropFromOutside) return;\n                var bounds = (0, _Selection.getBoundsForNode)(node);\n                if (!(0, _common.pointInColumn)(bounds, point)) return;\n                _this.handleDropFromOutside(point, bounds);\n            });\n            selector.on(\"dragOverFromOutside\", function(point) {\n                var item = _this.context.draggable.dragFromOutsideItem ? _this.context.draggable.dragFromOutsideItem() : null;\n                if (!item) return;\n                var bounds = (0, _Selection.getBoundsForNode)(node);\n                if (!(0, _common.pointInColumn)(bounds, point)) return _this.reset();\n                _this.handleDragOverFromOutside(point, bounds);\n            });\n            selector.on(\"selectStart\", function() {\n                isBeingDragged = true;\n                _this.context.draggable.onStart();\n            });\n            selector.on(\"select\", function(point) {\n                var bounds = (0, _Selection.getBoundsForNode)(node);\n                isBeingDragged = false;\n                var dragAndDropAction = _this.context.draggable.dragAndDropAction;\n                if (dragAndDropAction.action === \"resize\") {\n                    _this.handleInteractionEnd();\n                } else if (!_this.state.event || !(0, _common.pointInColumn)(bounds, point)) {\n                    return;\n                } else {\n                    _this.handleInteractionEnd();\n                }\n            });\n            selector.on(\"click\", function() {\n                if (isBeingDragged) _this.reset();\n                _this.context.draggable.onEnd(null);\n            });\n            selector.on(\"reset\", function() {\n                _this.reset();\n                _this.context.draggable.onEnd(null);\n            });\n        };\n        _this.handleInteractionEnd = function() {\n            var resource = _this.props.resource;\n            var event = _this.state.event;\n            _this.reset();\n            _this.context.draggable.onEnd({\n                start: event.start,\n                end: event.end,\n                resourceId: resource\n            });\n        };\n        _this._teardownSelectable = function() {\n            if (!_this._selector) return;\n            _this._selector.teardown();\n            _this._selector = null;\n        };\n        _this.state = {};\n        _this.ref = /*#__PURE__*/ _react.default.createRef();\n        return _this;\n    }\n    (0, _inherits2.default)(EventContainerWrapper, _React$Component);\n    return (0, _createClass2.default)(EventContainerWrapper, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this._selectable();\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this._teardownSelectable();\n            }\n        },\n        {\n            key: \"reset\",\n            value: function reset() {\n                if (this.state.event) this.setState({\n                    event: null,\n                    top: null,\n                    height: null\n                });\n            }\n        },\n        {\n            key: \"update\",\n            value: function update(event, _ref) {\n                var startDate = _ref.startDate, endDate = _ref.endDate, top = _ref.top, height = _ref.height;\n                var lastEvent = this.state.event;\n                if (lastEvent && startDate === lastEvent.start && endDate === lastEvent.end) {\n                    return;\n                }\n                this.setState({\n                    top: top,\n                    height: height,\n                    event: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, event), {}, {\n                        start: startDate,\n                        end: endDate\n                    })\n                });\n            }\n        },\n        {\n            key: \"handleResize\",\n            value: function handleResize(point, bounds) {\n                var _this$props3 = this.props, accessors = _this$props3.accessors, slotMetrics = _this$props3.slotMetrics, localizer = _this$props3.localizer;\n                var _this$context$draggab = this.context.draggable.dragAndDropAction, event = _this$context$draggab.event, direction = _this$context$draggab.direction;\n                var newTime = slotMetrics.closestSlotFromPoint(point, bounds);\n                var _eventTimes2 = (0, _common.eventTimes)(event, accessors, localizer), start = _eventTimes2.start, end = _eventTimes2.end;\n                var newRange;\n                if (direction === \"UP\") {\n                    var newStart = localizer.min(newTime, slotMetrics.closestSlotFromDate(end, -1));\n                    // Get the new range based on the new start\n                    // but don't overwrite the end date as it could be outside this day boundary.\n                    newRange = slotMetrics.getRange(newStart, end);\n                    newRange = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, newRange), {}, {\n                        endDate: end\n                    });\n                } else if (direction === \"DOWN\") {\n                    // Get the new range based on the new end\n                    // but don't overwrite the start date as it could be outside this day boundary.\n                    var newEnd = localizer.max(newTime, slotMetrics.closestSlotFromDate(start));\n                    newRange = slotMetrics.getRange(start, newEnd);\n                    newRange = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, newRange), {}, {\n                        startDate: start\n                    });\n                }\n                this.update(event, newRange);\n            }\n        },\n        {\n            key: \"renderContent\",\n            value: function renderContent() {\n                var _this$props4 = this.props, children = _this$props4.children, accessors = _this$props4.accessors, components = _this$props4.components, getters = _this$props4.getters, slotMetrics = _this$props4.slotMetrics, localizer = _this$props4.localizer;\n                var _this$state = this.state, event = _this$state.event, top = _this$state.top, height = _this$state.height;\n                if (!event) return children;\n                var events = children.props.children;\n                var start = event.start, end = event.end;\n                var label;\n                var format = \"eventTimeRangeFormat\";\n                var startsBeforeDay = slotMetrics.startsBeforeDay(start);\n                var startsAfterDay = slotMetrics.startsAfterDay(end);\n                if (startsBeforeDay) format = \"eventTimeRangeEndFormat\";\n                else if (startsAfterDay) format = \"eventTimeRangeStartFormat\";\n                if (startsBeforeDay && startsAfterDay) label = localizer.messages.allDay;\n                else label = localizer.format({\n                    start: start,\n                    end: end\n                }, format);\n                return /*#__PURE__*/ _react.default.cloneElement(children, {\n                    children: /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, events, event && /*#__PURE__*/ _react.default.createElement(_TimeGridEvent.default, {\n                        event: event,\n                        label: label,\n                        className: \"rbc-addons-dnd-drag-preview\",\n                        style: {\n                            top: top,\n                            height: height,\n                            width: 100\n                        },\n                        getters: getters,\n                        components: components,\n                        accessors: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, accessors), _common.dragAccessors),\n                        continuesPrior: startsBeforeDay,\n                        continuesAfter: startsAfterDay\n                    }))\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    ref: this.ref\n                }, this.renderContent());\n            }\n        }\n    ]);\n}(_react.default.Component);\nEventContainerWrapper.contextType = _DnDContext.DnDContext;\nvar _default = exports[\"default\"] = EventContainerWrapper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/EventContainerWrapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/EventWrapper.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/addons/dragAndDrop/EventWrapper.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _callSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/callSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/callSuper.js\"));\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _clsx = _interopRequireDefault(__webpack_require__(/*! clsx */ \"(ssr)/./node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js\"));\nvar _accessors = __webpack_require__(/*! ../../utils/accessors */ \"(ssr)/./node_modules/react-big-calendar/lib/utils/accessors.js\");\nvar _DnDContext = __webpack_require__(/*! ./DnDContext */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/DnDContext.js\");\nvar EventWrapper = /*#__PURE__*/ function(_React$Component) {\n    function EventWrapper() {\n        var _this;\n        (0, _classCallCheck2.default)(this, EventWrapper);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = (0, _callSuper2.default)(this, EventWrapper, [].concat(args));\n        _this.handleResizeUp = function(e) {\n            if (e.button !== 0) return;\n            _this.context.draggable.onBeginAction(_this.props.event, \"resize\", \"UP\");\n        };\n        _this.handleResizeDown = function(e) {\n            if (e.button !== 0) return;\n            _this.context.draggable.onBeginAction(_this.props.event, \"resize\", \"DOWN\");\n        };\n        _this.handleResizeLeft = function(e) {\n            if (e.button !== 0) return;\n            _this.context.draggable.onBeginAction(_this.props.event, \"resize\", \"LEFT\");\n        };\n        _this.handleResizeRight = function(e) {\n            if (e.button !== 0) return;\n            _this.context.draggable.onBeginAction(_this.props.event, \"resize\", \"RIGHT\");\n        };\n        _this.handleStartDragging = function(e) {\n            var _e$target$getAttribut;\n            if (e.button !== 0) return;\n            // hack: because of the way the anchors are arranged in the DOM, resize\n            // anchor events will bubble up to the move anchor listener. Don't start\n            // move operations when we're on a resize anchor.\n            var isResizeHandle = (_e$target$getAttribut = e.target.getAttribute(\"class\")) === null || _e$target$getAttribut === void 0 ? void 0 : _e$target$getAttribut.includes(\"rbc-addons-dnd-resize\");\n            if (!isResizeHandle) {\n                var extendedEvent = (0, _objectSpread2.default)({}, _this.props.event);\n                extendedEvent.sourceResource = _this.props.resource;\n                _this.context.draggable.onBeginAction(_this.props.event, \"move\");\n            }\n        };\n        return _this;\n    }\n    (0, _inherits2.default)(EventWrapper, _React$Component);\n    return (0, _createClass2.default)(EventWrapper, [\n        {\n            key: \"renderAnchor\",\n            value: function renderAnchor(direction) {\n                var cls = direction === \"Up\" || direction === \"Down\" ? \"ns\" : \"ew\";\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: \"rbc-addons-dnd-resize-\".concat(cls, \"-anchor\"),\n                    onMouseDown: this[\"handleResize\".concat(direction)]\n                }, /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: \"rbc-addons-dnd-resize-\".concat(cls, \"-icon\")\n                }));\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, event = _this$props.event, type = _this$props.type, continuesPrior = _this$props.continuesPrior, continuesAfter = _this$props.continuesAfter, resizable = _this$props.resizable;\n                var children = this.props.children;\n                if (event.__isPreview) return /*#__PURE__*/ _react.default.cloneElement(children, {\n                    className: (0, _clsx.default)(children.props.className, \"rbc-addons-dnd-drag-preview\")\n                });\n                var draggable = this.context.draggable;\n                var draggableAccessor = draggable.draggableAccessor, resizableAccessor = draggable.resizableAccessor;\n                var isDraggable = draggableAccessor ? !!(0, _accessors.accessor)(event, draggableAccessor) : true;\n                /* Event is not draggable, no need to wrap it */ if (!isDraggable) {\n                    return children;\n                }\n                /*\n       * The resizability of events depends on whether they are\n       * allDay events and how they are displayed.\n       *\n       * 1. If the event is being shown in an event row (because\n       * it is an allDay event shown in the header row or because as\n       * in month view the view is showing all events as rows) then we\n       * allow east-west resizing.\n       *\n       * 2. Otherwise the event is being displayed\n       * normally, we can drag it north-south to resize the times.\n       *\n       * See `DropWrappers` for handling of the drop of such events.\n       *\n       * Notwithstanding the above, we never show drag anchors for\n       * events which continue beyond current component. This happens\n       * in the middle of events when showMultiDay is true, and to\n       * events at the edges of the calendar's min/max location.\n       */ var isResizable = resizable && (resizableAccessor ? !!(0, _accessors.accessor)(event, resizableAccessor) : true);\n                if (isResizable || isDraggable) {\n                    /*\n         * props.children is the singular <Event> component.\n         * BigCalendar positions the Event abolutely and we\n         * need the anchors to be part of that positioning.\n         * So we insert the anchors inside the Event's children\n         * rather than wrap the Event here as the latter approach\n         * would lose the positioning.\n         */ var newProps = {\n                        onMouseDown: this.handleStartDragging,\n                        onTouchStart: this.handleStartDragging\n                    };\n                    if (isResizable) {\n                        // replace original event child with anchor-embellished child\n                        var StartAnchor = null;\n                        var EndAnchor = null;\n                        if (type === \"date\") {\n                            StartAnchor = !continuesPrior && this.renderAnchor(\"Left\");\n                            EndAnchor = !continuesAfter && this.renderAnchor(\"Right\");\n                        } else {\n                            StartAnchor = !continuesPrior && this.renderAnchor(\"Up\");\n                            EndAnchor = !continuesAfter && this.renderAnchor(\"Down\");\n                        }\n                        newProps.children = /*#__PURE__*/ _react.default.createElement(\"div\", {\n                            className: \"rbc-addons-dnd-resizable\"\n                        }, StartAnchor, children.props.children, EndAnchor);\n                    }\n                    if (draggable.dragAndDropAction.interacting && // if an event is being dragged right now\n                    draggable.dragAndDropAction.event === event // and it's the current event\n                    ) {\n                        // add a new class to it\n                        newProps.className = (0, _clsx.default)(children.props.className, \"rbc-addons-dnd-dragged-event\");\n                    }\n                    children = /*#__PURE__*/ _react.default.cloneElement(children, newProps);\n                }\n                return children;\n            }\n        }\n    ]);\n}(_react.default.Component);\nEventWrapper.contextType = _DnDContext.DnDContext;\nvar _default = exports[\"default\"] = EventWrapper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/EventWrapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/WeekWrapper.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/addons/dragAndDrop/WeekWrapper.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireWildcard = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\")[\"default\"]);\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _callSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/callSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/callSuper.js\"));\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _EventRow = _interopRequireDefault(__webpack_require__(/*! ../../EventRow */ \"(ssr)/./node_modules/react-big-calendar/lib/EventRow.js\"));\nvar _Selection = _interopRequireWildcard(__webpack_require__(/*! ../../Selection */ \"(ssr)/./node_modules/react-big-calendar/lib/Selection.js\"));\nvar _eventLevels = __webpack_require__(/*! ../../utils/eventLevels */ \"(ssr)/./node_modules/react-big-calendar/lib/utils/eventLevels.js\");\nvar _selection = __webpack_require__(/*! ../../utils/selection */ \"(ssr)/./node_modules/react-big-calendar/lib/utils/selection.js\");\nvar _common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/common.js\");\nvar _DnDContext = __webpack_require__(/*! ./DnDContext */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/DnDContext.js\");\nvar WeekWrapper = /*#__PURE__*/ function(_React$Component) {\n    function WeekWrapper() {\n        var _this;\n        (0, _classCallCheck2.default)(this, WeekWrapper);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = (0, _callSuper2.default)(this, WeekWrapper, [].concat(args));\n        _this.handleMove = function(point, bounds, draggedEvent) {\n            if (!(0, _selection.pointInBox)(bounds, point)) return _this.reset();\n            var event = _this.context.draggable.dragAndDropAction.event || draggedEvent;\n            var _this$props = _this.props, accessors = _this$props.accessors, slotMetrics = _this$props.slotMetrics, rtl = _this$props.rtl, localizer = _this$props.localizer;\n            var slot = (0, _selection.getSlotAtX)(bounds, point.x, rtl, slotMetrics.slots);\n            var date = slotMetrics.getDateForSlot(slot);\n            // Adjust the dates, but maintain the times when moving\n            var _eventTimes = (0, _common.eventTimes)(event, accessors, localizer), start = _eventTimes.start, duration = _eventTimes.duration;\n            start = localizer.merge(date, start);\n            var end = localizer.add(start, duration, \"milliseconds\");\n            // LATER: when dragging a multi-row event, only the first row is animating\n            _this.update(event, start, end);\n        };\n        _this.handleDropFromOutside = function(point, bounds) {\n            if (!_this.context.draggable.onDropFromOutside) return;\n            var _this$props2 = _this.props, slotMetrics = _this$props2.slotMetrics, rtl = _this$props2.rtl, localizer = _this$props2.localizer;\n            var slot = (0, _selection.getSlotAtX)(bounds, point.x, rtl, slotMetrics.slots);\n            var start = slotMetrics.getDateForSlot(slot);\n            _this.context.draggable.onDropFromOutside({\n                start: start,\n                end: localizer.add(start, 1, \"day\"),\n                allDay: false\n            });\n        };\n        _this.handleDragOverFromOutside = function(point, node) {\n            var item = _this.context.draggable.dragFromOutsideItem ? _this.context.draggable.dragFromOutsideItem() : null;\n            if (!item) return;\n            _this.handleMove(point, node, item);\n        };\n        _this._selectable = function() {\n            var node = _this.ref.current.closest(\".rbc-month-row, .rbc-allday-cell\");\n            var container = node.closest(\".rbc-month-view, .rbc-time-view\");\n            var isMonthRow = node.classList.contains(\"rbc-month-row\");\n            // Valid container check only necessary in TimeGrid views\n            var selector = _this._selector = new _Selection.default(function() {\n                return container;\n            }, {\n                validContainers: (0, _toConsumableArray2.default)(!isMonthRow ? [\n                    \".rbc-day-slot\",\n                    \".rbc-allday-cell\"\n                ] : [])\n            });\n            selector.on(\"beforeSelect\", function(point) {\n                var isAllDay = _this.props.isAllDay;\n                var action = _this.context.draggable.dragAndDropAction.action;\n                var bounds = (0, _Selection.getBoundsForNode)(node);\n                var isInBox = (0, _selection.pointInBox)(bounds, point);\n                return action === \"move\" || action === \"resize\" && (!isAllDay || isInBox);\n            });\n            selector.on(\"selecting\", function(box) {\n                var bounds = (0, _Selection.getBoundsForNode)(node);\n                var dragAndDropAction = _this.context.draggable.dragAndDropAction;\n                if (dragAndDropAction.action === \"move\") _this.handleMove(box, bounds);\n                if (dragAndDropAction.action === \"resize\") _this.handleResize(box, bounds);\n            });\n            selector.on(\"selectStart\", function() {\n                return _this.context.draggable.onStart();\n            });\n            selector.on(\"select\", function(point) {\n                var bounds = (0, _Selection.getBoundsForNode)(node);\n                if (!_this.state.segment) return;\n                if (!(0, _selection.pointInBox)(bounds, point)) {\n                    _this.reset();\n                } else {\n                    _this.handleInteractionEnd();\n                }\n            });\n            selector.on(\"dropFromOutside\", function(point) {\n                if (!_this.context.draggable.onDropFromOutside) return;\n                var bounds = (0, _Selection.getBoundsForNode)(node);\n                if (!(0, _selection.pointInBox)(bounds, point)) return;\n                _this.handleDropFromOutside(point, bounds);\n            });\n            selector.on(\"dragOverFromOutside\", function(point) {\n                if (!_this.context.draggable.dragFromOutsideItem) return;\n                var bounds = (0, _Selection.getBoundsForNode)(node);\n                _this.handleDragOverFromOutside(point, bounds);\n            });\n            selector.on(\"click\", function() {\n                return _this.context.draggable.onEnd(null);\n            });\n            selector.on(\"reset\", function() {\n                _this.reset();\n                _this.context.draggable.onEnd(null);\n            });\n        };\n        _this.handleInteractionEnd = function() {\n            var _this$props3 = _this.props, resourceId = _this$props3.resourceId, isAllDay = _this$props3.isAllDay;\n            var event = _this.state.segment.event;\n            _this.reset();\n            _this.context.draggable.onEnd({\n                start: event.start,\n                end: event.end,\n                resourceId: resourceId,\n                isAllDay: isAllDay\n            });\n        };\n        _this._teardownSelectable = function() {\n            if (!_this._selector) return;\n            _this._selector.teardown();\n            _this._selector = null;\n        };\n        _this.state = {};\n        _this.ref = /*#__PURE__*/ _react.default.createRef();\n        return _this;\n    }\n    (0, _inherits2.default)(WeekWrapper, _React$Component);\n    return (0, _createClass2.default)(WeekWrapper, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this._selectable();\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this._teardownSelectable();\n            }\n        },\n        {\n            key: \"reset\",\n            value: function reset() {\n                if (this.state.segment) this.setState({\n                    segment: null\n                });\n            }\n        },\n        {\n            key: \"update\",\n            value: function update(event, start, end) {\n                var segment = (0, _eventLevels.eventSegments)((0, _objectSpread2.default)((0, _objectSpread2.default)({}, event), {}, {\n                    end: end,\n                    start: start,\n                    __isPreview: true\n                }), this.props.slotMetrics.range, _common.dragAccessors, this.props.localizer);\n                var lastSegment = this.state.segment;\n                if (lastSegment && segment.span === lastSegment.span && segment.left === lastSegment.left && segment.right === lastSegment.right) {\n                    return;\n                }\n                this.setState({\n                    segment: segment\n                });\n            }\n        },\n        {\n            key: \"handleResize\",\n            value: function handleResize(point, bounds) {\n                var _this$context$draggab = this.context.draggable.dragAndDropAction, event = _this$context$draggab.event, direction = _this$context$draggab.direction;\n                var _this$props4 = this.props, accessors = _this$props4.accessors, slotMetrics = _this$props4.slotMetrics, rtl = _this$props4.rtl, localizer = _this$props4.localizer;\n                var _eventTimes2 = (0, _common.eventTimes)(event, accessors, localizer), start = _eventTimes2.start, end = _eventTimes2.end;\n                var slot = (0, _selection.getSlotAtX)(bounds, point.x, rtl, slotMetrics.slots);\n                var date = slotMetrics.getDateForSlot(slot);\n                var cursorInRow = (0, _selection.pointInBox)(bounds, point);\n                if (direction === \"RIGHT\") {\n                    if (cursorInRow) {\n                        if (slotMetrics.last < start) return this.reset();\n                        if (localizer.eq(localizer.startOf(end, \"day\"), end)) end = localizer.add(date, 1, \"day\");\n                        else end = date;\n                    } else if (localizer.inRange(start, slotMetrics.first, slotMetrics.last) || bounds.bottom < point.y && +slotMetrics.first > +start) {\n                        end = localizer.add(slotMetrics.last, 1, \"milliseconds\");\n                    } else {\n                        this.setState({\n                            segment: null\n                        });\n                        return;\n                    }\n                    var originalEnd = accessors.end(event);\n                    end = localizer.merge(end, originalEnd);\n                    if (localizer.lt(end, start)) {\n                        end = originalEnd;\n                    }\n                } else if (direction === \"LEFT\") {\n                    if (cursorInRow) {\n                        if (slotMetrics.first > end) return this.reset();\n                        start = date;\n                    } else if (localizer.inRange(end, slotMetrics.first, slotMetrics.last) || bounds.top > point.y && localizer.lt(slotMetrics.last, end)) {\n                        start = localizer.add(slotMetrics.first, -1, \"milliseconds\");\n                    } else {\n                        this.reset();\n                        return;\n                    }\n                    var originalStart = accessors.start(event);\n                    start = localizer.merge(start, originalStart);\n                    if (localizer.gt(start, end)) {\n                        start = originalStart;\n                    }\n                }\n                this.update(event, start, end);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props5 = this.props, children = _this$props5.children, accessors = _this$props5.accessors;\n                var segment = this.state.segment;\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    ref: this.ref,\n                    className: \"rbc-addons-dnd-row-body\"\n                }, children, segment && /*#__PURE__*/ _react.default.createElement(_EventRow.default, Object.assign({}, this.props, {\n                    selected: null,\n                    className: \"rbc-addons-dnd-drag-row\",\n                    segments: [\n                        segment\n                    ],\n                    accessors: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, accessors), _common.dragAccessors)\n                })));\n            }\n        }\n    ]);\n}(_react.default.Component);\nWeekWrapper.contextType = _DnDContext.DnDContext;\nvar _default = exports[\"default\"] = WeekWrapper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/WeekWrapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/common.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/addons/dragAndDrop/common.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dragAccessors = void 0;\nexports.eventTimes = eventTimes;\nexports.mergeComponents = mergeComponents;\nexports.pointInColumn = pointInColumn;\nvar _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\"));\nvar _accessors = __webpack_require__(/*! ../../utils/accessors */ \"(ssr)/./node_modules/react-big-calendar/lib/utils/accessors.js\");\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _excluded = [\n    \"children\"\n];\nvar dragAccessors = exports.dragAccessors = {\n    start: (0, _accessors.wrapAccessor)(function(e) {\n        return e.start;\n    }),\n    end: (0, _accessors.wrapAccessor)(function(e) {\n        return e.end;\n    })\n};\nfunction nest() {\n    for(var _len = arguments.length, Components = new Array(_len), _key = 0; _key < _len; _key++){\n        Components[_key] = arguments[_key];\n    }\n    var factories = Components.filter(Boolean).map(_react.createFactory);\n    var Nest = function Nest(_ref) {\n        var children = _ref.children, props = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n        return factories.reduceRight(function(child, factory) {\n            return factory(props, child);\n        }, children);\n    };\n    return Nest;\n}\nfunction mergeComponents() {\n    var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var addons = arguments.length > 1 ? arguments[1] : undefined;\n    var keys = Object.keys(addons);\n    var result = (0, _objectSpread2.default)({}, components);\n    keys.forEach(function(key) {\n        result[key] = components[key] ? nest(components[key], addons[key]) : addons[key];\n    });\n    return result;\n}\nfunction pointInColumn(bounds, point) {\n    var left = bounds.left, right = bounds.right, top = bounds.top;\n    var x = point.x, y = point.y;\n    return x < right + 10 && x > left && y > top;\n}\nfunction eventTimes(event, accessors, localizer) {\n    var start = accessors.start(event);\n    var end = accessors.end(event);\n    var isZeroDuration = localizer.eq(start, end, \"minutes\") && localizer.diff(start, end, \"minutes\") === 0;\n    // make zero duration midnight events at least one day long\n    if (isZeroDuration) end = localizer.add(end, 1, \"day\");\n    var duration = localizer.diff(start, end, \"milliseconds\");\n    return {\n        start: start,\n        end: end,\n        duration: duration\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9hZGRvbnMvZHJhZ0FuZERyb3AvY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEseUJBQXlCQyw0SkFBK0Q7QUFDNUZFLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCQSxrQkFBa0IsR0FBR0c7QUFDckJILHVCQUF1QixHQUFHSTtBQUMxQkoscUJBQXFCLEdBQUdLO0FBQ3hCLElBQUlDLGlCQUFpQlgsdUJBQXVCQyxtQkFBT0EsQ0FBQywwR0FBc0M7QUFDMUYsSUFBSVcsNEJBQTRCWix1QkFBdUJDLG1CQUFPQSxDQUFDLDhIQUFnRDtBQUMvRyxJQUFJWSxhQUFhWixtQkFBT0EsQ0FBQyw2RkFBdUI7QUFDaEQsSUFBSWEsU0FBU2IsbUJBQU9BLENBQUMsd0dBQU87QUFDNUIsSUFBSWMsWUFBWTtJQUFDO0NBQVc7QUFDNUIsSUFBSVIsZ0JBQWdCRixxQkFBcUIsR0FBRztJQUMxQ1csT0FBTyxDQUFDLEdBQUdILFdBQVdJLFlBQVksRUFBRSxTQUFVQyxDQUFDO1FBQzdDLE9BQU9BLEVBQUVGLEtBQUs7SUFDaEI7SUFDQUcsS0FBSyxDQUFDLEdBQUdOLFdBQVdJLFlBQVksRUFBRSxTQUFVQyxDQUFDO1FBQzNDLE9BQU9BLEVBQUVDLEdBQUc7SUFDZDtBQUNGO0FBQ0EsU0FBU0M7SUFDUCxJQUFLLElBQUlDLE9BQU9DLFVBQVVDLE1BQU0sRUFBRUMsYUFBYSxJQUFJQyxNQUFNSixPQUFPSyxPQUFPLEdBQUdBLE9BQU9MLE1BQU1LLE9BQVE7UUFDN0ZGLFVBQVUsQ0FBQ0UsS0FBSyxHQUFHSixTQUFTLENBQUNJLEtBQUs7SUFDcEM7SUFDQSxJQUFJQyxZQUFZSCxXQUFXSSxNQUFNLENBQUNDLFNBQVNDLEdBQUcsQ0FBQ2hCLE9BQU9pQixhQUFhO0lBQ25FLElBQUlDLE9BQU8sU0FBU0EsS0FBS0MsSUFBSTtRQUMzQixJQUFJQyxXQUFXRCxLQUFLQyxRQUFRLEVBQzFCQyxRQUFRLENBQUMsR0FBR3ZCLDBCQUEwQlYsT0FBTyxFQUFFK0IsTUFBTWxCO1FBQ3ZELE9BQU9ZLFVBQVVTLFdBQVcsQ0FBQyxTQUFVQyxLQUFLLEVBQUVDLE9BQU87WUFDbkQsT0FBT0EsUUFBUUgsT0FBT0U7UUFDeEIsR0FBR0g7SUFDTDtJQUNBLE9BQU9GO0FBQ1Q7QUFDQSxTQUFTdkI7SUFDUCxJQUFJOEIsYUFBYWpCLFVBQVVDLE1BQU0sR0FBRyxLQUFLRCxTQUFTLENBQUMsRUFBRSxLQUFLa0IsWUFBWWxCLFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUN0RixJQUFJbUIsU0FBU25CLFVBQVVDLE1BQU0sR0FBRyxJQUFJRCxTQUFTLENBQUMsRUFBRSxHQUFHa0I7SUFDbkQsSUFBSUUsT0FBT3ZDLE9BQU91QyxJQUFJLENBQUNEO0lBQ3ZCLElBQUlFLFNBQVMsQ0FBQyxHQUFHaEMsZUFBZVQsT0FBTyxFQUFFLENBQUMsR0FBR3FDO0lBQzdDRyxLQUFLRSxPQUFPLENBQUMsU0FBVUMsR0FBRztRQUN4QkYsTUFBTSxDQUFDRSxJQUFJLEdBQUdOLFVBQVUsQ0FBQ00sSUFBSSxHQUFHekIsS0FBS21CLFVBQVUsQ0FBQ00sSUFBSSxFQUFFSixNQUFNLENBQUNJLElBQUksSUFBSUosTUFBTSxDQUFDSSxJQUFJO0lBQ2xGO0lBQ0EsT0FBT0Y7QUFDVDtBQUNBLFNBQVNqQyxjQUFjb0MsTUFBTSxFQUFFQyxLQUFLO0lBQ2xDLElBQUlDLE9BQU9GLE9BQU9FLElBQUksRUFDcEJDLFFBQVFILE9BQU9HLEtBQUssRUFDcEJDLE1BQU1KLE9BQU9JLEdBQUc7SUFDbEIsSUFBSUMsSUFBSUosTUFBTUksQ0FBQyxFQUNiQyxJQUFJTCxNQUFNSyxDQUFDO0lBQ2IsT0FBT0QsSUFBSUYsUUFBUSxNQUFNRSxJQUFJSCxRQUFRSSxJQUFJRjtBQUMzQztBQUNBLFNBQVMxQyxXQUFXNkMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLFNBQVM7SUFDN0MsSUFBSXZDLFFBQVFzQyxVQUFVdEMsS0FBSyxDQUFDcUM7SUFDNUIsSUFBSWxDLE1BQU1tQyxVQUFVbkMsR0FBRyxDQUFDa0M7SUFDeEIsSUFBSUcsaUJBQWlCRCxVQUFVRSxFQUFFLENBQUN6QyxPQUFPRyxLQUFLLGNBQWNvQyxVQUFVRyxJQUFJLENBQUMxQyxPQUFPRyxLQUFLLGVBQWU7SUFDdEcsMkRBQTJEO0lBQzNELElBQUlxQyxnQkFBZ0JyQyxNQUFNb0MsVUFBVUksR0FBRyxDQUFDeEMsS0FBSyxHQUFHO0lBQ2hELElBQUl5QyxXQUFXTCxVQUFVRyxJQUFJLENBQUMxQyxPQUFPRyxLQUFLO0lBQzFDLE9BQU87UUFDTEgsT0FBT0E7UUFDUEcsS0FBS0E7UUFDTHlDLFVBQVVBO0lBQ1o7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2FyYmVpdHNwbGFuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJpZy1jYWxlbmRhci9saWIvYWRkb25zL2RyYWdBbmREcm9wL2NvbW1vbi5qcz9hZThiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKS5kZWZhdWx0O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZHJhZ0FjY2Vzc29ycyA9IHZvaWQgMDtcbmV4cG9ydHMuZXZlbnRUaW1lcyA9IGV2ZW50VGltZXM7XG5leHBvcnRzLm1lcmdlQ29tcG9uZW50cyA9IG1lcmdlQ29tcG9uZW50cztcbmV4cG9ydHMucG9pbnRJbkNvbHVtbiA9IHBvaW50SW5Db2x1bW47XG52YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZDJcIikpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcbnZhciBfYWNjZXNzb3JzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2FjY2Vzc29yc1wiKTtcbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIl07XG52YXIgZHJhZ0FjY2Vzc29ycyA9IGV4cG9ydHMuZHJhZ0FjY2Vzc29ycyA9IHtcbiAgc3RhcnQ6ICgwLCBfYWNjZXNzb3JzLndyYXBBY2Nlc3NvcikoZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gZS5zdGFydDtcbiAgfSksXG4gIGVuZDogKDAsIF9hY2Nlc3NvcnMud3JhcEFjY2Vzc29yKShmdW5jdGlvbiAoZSkge1xuICAgIHJldHVybiBlLmVuZDtcbiAgfSlcbn07XG5mdW5jdGlvbiBuZXN0KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgQ29tcG9uZW50cyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBDb21wb25lbnRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIHZhciBmYWN0b3JpZXMgPSBDb21wb25lbnRzLmZpbHRlcihCb29sZWFuKS5tYXAoX3JlYWN0LmNyZWF0ZUZhY3RvcnkpO1xuICB2YXIgTmVzdCA9IGZ1bmN0aW9uIE5lc3QoX3JlZikge1xuICAgIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9yZWYsIF9leGNsdWRlZCk7XG4gICAgcmV0dXJuIGZhY3Rvcmllcy5yZWR1Y2VSaWdodChmdW5jdGlvbiAoY2hpbGQsIGZhY3RvcnkpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KHByb3BzLCBjaGlsZCk7XG4gICAgfSwgY2hpbGRyZW4pO1xuICB9O1xuICByZXR1cm4gTmVzdDtcbn1cbmZ1bmN0aW9uIG1lcmdlQ29tcG9uZW50cygpIHtcbiAgdmFyIGNvbXBvbmVudHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYWRkb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkb25zKTtcbiAgdmFyIHJlc3VsdCA9ICgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwgY29tcG9uZW50cyk7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmVzdWx0W2tleV0gPSBjb21wb25lbnRzW2tleV0gPyBuZXN0KGNvbXBvbmVudHNba2V5XSwgYWRkb25zW2tleV0pIDogYWRkb25zW2tleV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcG9pbnRJbkNvbHVtbihib3VuZHMsIHBvaW50KSB7XG4gIHZhciBsZWZ0ID0gYm91bmRzLmxlZnQsXG4gICAgcmlnaHQgPSBib3VuZHMucmlnaHQsXG4gICAgdG9wID0gYm91bmRzLnRvcDtcbiAgdmFyIHggPSBwb2ludC54LFxuICAgIHkgPSBwb2ludC55O1xuICByZXR1cm4geCA8IHJpZ2h0ICsgMTAgJiYgeCA+IGxlZnQgJiYgeSA+IHRvcDtcbn1cbmZ1bmN0aW9uIGV2ZW50VGltZXMoZXZlbnQsIGFjY2Vzc29ycywgbG9jYWxpemVyKSB7XG4gIHZhciBzdGFydCA9IGFjY2Vzc29ycy5zdGFydChldmVudCk7XG4gIHZhciBlbmQgPSBhY2Nlc3NvcnMuZW5kKGV2ZW50KTtcbiAgdmFyIGlzWmVyb0R1cmF0aW9uID0gbG9jYWxpemVyLmVxKHN0YXJ0LCBlbmQsICdtaW51dGVzJykgJiYgbG9jYWxpemVyLmRpZmYoc3RhcnQsIGVuZCwgJ21pbnV0ZXMnKSA9PT0gMDtcbiAgLy8gbWFrZSB6ZXJvIGR1cmF0aW9uIG1pZG5pZ2h0IGV2ZW50cyBhdCBsZWFzdCBvbmUgZGF5IGxvbmdcbiAgaWYgKGlzWmVyb0R1cmF0aW9uKSBlbmQgPSBsb2NhbGl6ZXIuYWRkKGVuZCwgMSwgJ2RheScpO1xuICB2YXIgZHVyYXRpb24gPSBsb2NhbGl6ZXIuZGlmZihzdGFydCwgZW5kLCAnbWlsbGlzZWNvbmRzJyk7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGVuZDogZW5kLFxuICAgIGR1cmF0aW9uOiBkdXJhdGlvblxuICB9O1xufSJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImRlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRyYWdBY2Nlc3NvcnMiLCJldmVudFRpbWVzIiwibWVyZ2VDb21wb25lbnRzIiwicG9pbnRJbkNvbHVtbiIsIl9vYmplY3RTcHJlYWQyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9hY2Nlc3NvcnMiLCJfcmVhY3QiLCJfZXhjbHVkZWQiLCJzdGFydCIsIndyYXBBY2Nlc3NvciIsImUiLCJlbmQiLCJuZXN0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkNvbXBvbmVudHMiLCJBcnJheSIsIl9rZXkiLCJmYWN0b3JpZXMiLCJmaWx0ZXIiLCJCb29sZWFuIiwibWFwIiwiY3JlYXRlRmFjdG9yeSIsIk5lc3QiLCJfcmVmIiwiY2hpbGRyZW4iLCJwcm9wcyIsInJlZHVjZVJpZ2h0IiwiY2hpbGQiLCJmYWN0b3J5IiwiY29tcG9uZW50cyIsInVuZGVmaW5lZCIsImFkZG9ucyIsImtleXMiLCJyZXN1bHQiLCJmb3JFYWNoIiwia2V5IiwiYm91bmRzIiwicG9pbnQiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJ4IiwieSIsImV2ZW50IiwiYWNjZXNzb3JzIiwibG9jYWxpemVyIiwiaXNaZXJvRHVyYXRpb24iLCJlcSIsImRpZmYiLCJhZGQiLCJkdXJhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/addons/dragAndDrop/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _withDragAndDrop = _interopRequireDefault(__webpack_require__(/*! ./withDragAndDrop */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/withDragAndDrop.js\"));\nvar _default = exports[\"default\"] = _withDragAndDrop.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9hZGRvbnMvZHJhZ0FuZERyb3AvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSx5QkFBeUJDLDRKQUErRDtBQUM1RkUsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUN2QixJQUFJRSxtQkFBbUJQLHVCQUF1QkMsbUJBQU9BLENBQUMsNEdBQW1CO0FBQ3pFLElBQUlPLFdBQVdILGtCQUFlLEdBQUdFLGlCQUFpQkwsT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL2FyYmVpdHNwbGFuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJpZy1jYWxlbmRhci9saWIvYWRkb25zL2RyYWdBbmREcm9wL2luZGV4LmpzPzVjMGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpLmRlZmF1bHQ7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF93aXRoRHJhZ0FuZERyb3AgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3dpdGhEcmFnQW5kRHJvcFwiKSk7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSBfd2l0aERyYWdBbmREcm9wLmRlZmF1bHQ7Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3dpdGhEcmFnQW5kRHJvcCIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/withDragAndDrop.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/addons/dragAndDrop/withDragAndDrop.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = withDragAndDrop;\nvar _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\"));\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _callSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/callSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/callSuper.js\"));\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\"));\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _clsx = _interopRequireDefault(__webpack_require__(/*! clsx */ \"(ssr)/./node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js\"));\nvar _propTypes = __webpack_require__(/*! ../../utils/propTypes */ \"(ssr)/./node_modules/react-big-calendar/lib/utils/propTypes.js\");\nvar _EventWrapper = _interopRequireDefault(__webpack_require__(/*! ./EventWrapper */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/EventWrapper.js\"));\nvar _EventContainerWrapper = _interopRequireDefault(__webpack_require__(/*! ./EventContainerWrapper */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/EventContainerWrapper.js\"));\nvar _WeekWrapper = _interopRequireDefault(__webpack_require__(/*! ./WeekWrapper */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/WeekWrapper.js\"));\nvar _common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/common.js\");\nvar _DnDContext = __webpack_require__(/*! ./DnDContext */ \"(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/DnDContext.js\");\nvar _excluded = [\n    \"selectable\",\n    \"elementProps\",\n    \"components\"\n];\nfunction withDragAndDrop(Calendar) {\n    var DragAndDropCalendar = /*#__PURE__*/ function(_React$Component) {\n        function DragAndDropCalendar() {\n            var _this;\n            (0, _classCallCheck2.default)(this, DragAndDropCalendar);\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            _this = (0, _callSuper2.default)(this, DragAndDropCalendar, [].concat(args));\n            _this.defaultOnDragOver = function(event) {\n                event.preventDefault();\n            };\n            _this.handleBeginAction = function(event, action, direction) {\n                _this.setState({\n                    event: event,\n                    action: action,\n                    direction: direction\n                });\n                var onDragStart = _this.props.onDragStart;\n                if (onDragStart) onDragStart({\n                    event: event,\n                    action: action,\n                    direction: direction\n                });\n            };\n            _this.handleInteractionStart = function() {\n                if (_this.state.interacting === false) _this.setState({\n                    interacting: true\n                });\n            };\n            _this.handleInteractionEnd = function(interactionInfo) {\n                var _this$state = _this.state, action = _this$state.action, event = _this$state.event;\n                if (!action) return;\n                _this.setState({\n                    action: null,\n                    event: null,\n                    interacting: false,\n                    direction: null\n                });\n                if (interactionInfo == null) return;\n                interactionInfo.event = event;\n                var _this$props = _this.props, onEventDrop = _this$props.onEventDrop, onEventResize = _this$props.onEventResize;\n                if (action === \"move\" && onEventDrop) onEventDrop(interactionInfo);\n                if (action === \"resize\" && onEventResize) onEventResize(interactionInfo);\n            };\n            _this.state = {\n                interacting: false\n            };\n            return _this;\n        }\n        (0, _inherits2.default)(DragAndDropCalendar, _React$Component);\n        return (0, _createClass2.default)(DragAndDropCalendar, [\n            {\n                key: \"getDnDContextValue\",\n                value: function getDnDContextValue() {\n                    return {\n                        draggable: {\n                            onStart: this.handleInteractionStart,\n                            onEnd: this.handleInteractionEnd,\n                            onBeginAction: this.handleBeginAction,\n                            onDropFromOutside: this.props.onDropFromOutside,\n                            dragFromOutsideItem: this.props.dragFromOutsideItem,\n                            draggableAccessor: this.props.draggableAccessor,\n                            resizableAccessor: this.props.resizableAccessor,\n                            dragAndDropAction: this.state\n                        }\n                    };\n                }\n            },\n            {\n                key: \"render\",\n                value: function render() {\n                    var _this$props2 = this.props, selectable = _this$props2.selectable, elementProps = _this$props2.elementProps, components = _this$props2.components, props = (0, _objectWithoutProperties2.default)(_this$props2, _excluded);\n                    var interacting = this.state.interacting;\n                    delete props.onEventDrop;\n                    delete props.onEventResize;\n                    props.selectable = selectable ? \"ignoreEvents\" : false;\n                    this.components = (0, _common.mergeComponents)(components, {\n                        eventWrapper: _EventWrapper.default,\n                        eventContainerWrapper: _EventContainerWrapper.default,\n                        weekWrapper: _WeekWrapper.default\n                    });\n                    var elementPropsWithDropFromOutside = this.props.onDropFromOutside ? (0, _objectSpread2.default)((0, _objectSpread2.default)({}, elementProps), {}, {\n                        onDragOver: this.props.onDragOver || this.defaultOnDragOver\n                    }) : elementProps;\n                    props.className = (0, _clsx.default)(props.className, \"rbc-addons-dnd\", !!interacting && \"rbc-addons-dnd-is-dragging\");\n                    var context = this.getDnDContextValue();\n                    return /*#__PURE__*/ _react.default.createElement(_DnDContext.DnDContext.Provider, {\n                        value: context\n                    }, /*#__PURE__*/ _react.default.createElement(Calendar, Object.assign({}, props, {\n                        elementProps: elementPropsWithDropFromOutside,\n                        components: this.components\n                    })));\n                }\n            }\n        ]);\n    }(_react.default.Component);\n    DragAndDropCalendar.defaultProps = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, Calendar.defaultProps), {}, {\n        draggableAccessor: null,\n        resizableAccessor: null,\n        resizable: true\n    });\n    return DragAndDropCalendar;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/withDragAndDrop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/utils/accessors.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/utils/accessors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.accessor = accessor;\nexports.wrapAccessor = void 0;\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/typeof.js\"));\n/**\n * Retrieve via an accessor-like property\n *\n *    accessor(obj, 'name')   // => retrieves obj['name']\n *    accessor(data, func)    // => retrieves func(data)\n *    ... otherwise null\n */ function accessor(data, field) {\n    var value = null;\n    if (typeof field === \"function\") value = field(data);\n    else if (typeof field === \"string\" && (0, _typeof2.default)(data) === \"object\" && data != null && field in data) value = data[field];\n    return value;\n}\nvar wrapAccessor = exports.wrapAccessor = function wrapAccessor(acc) {\n    return function(data) {\n        return accessor(data, acc);\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9hY2Nlc3NvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSx5QkFBeUJDLDRKQUErRDtBQUM1RkUsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGdCQUFnQixHQUFHRTtBQUNuQkYsb0JBQW9CLEdBQUcsS0FBSztBQUM1QixJQUFJSSxXQUFXVCx1QkFBdUJDLG1CQUFPQSxDQUFDLDRGQUErQjtBQUM3RTs7Ozs7O0NBTUMsR0FDRCxTQUFTTSxTQUFTRyxJQUFJLEVBQUVDLEtBQUs7SUFDM0IsSUFBSUwsUUFBUTtJQUNaLElBQUksT0FBT0ssVUFBVSxZQUFZTCxRQUFRSyxNQUFNRDtTQUFXLElBQUksT0FBT0MsVUFBVSxZQUFZLENBQUMsR0FBR0YsU0FBU1AsT0FBTyxFQUFFUSxVQUFVLFlBQVlBLFFBQVEsUUFBUUMsU0FBU0QsTUFBTUosUUFBUUksSUFBSSxDQUFDQyxNQUFNO0lBQ3pMLE9BQU9MO0FBQ1Q7QUFDQSxJQUFJRSxlQUFlSCxvQkFBb0IsR0FBRyxTQUFTRyxhQUFhSSxHQUFHO0lBQ2pFLE9BQU8sU0FBVUYsSUFBSTtRQUNuQixPQUFPSCxTQUFTRyxNQUFNRTtJQUN4QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJiZWl0c3BsYW4vLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9hY2Nlc3NvcnMuanM/MmUxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG5leHBvcnRzLndyYXBBY2Nlc3NvciA9IHZvaWQgMDtcbnZhciBfdHlwZW9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpKTtcbi8qKlxuICogUmV0cmlldmUgdmlhIGFuIGFjY2Vzc29yLWxpa2UgcHJvcGVydHlcbiAqXG4gKiAgICBhY2Nlc3NvcihvYmosICduYW1lJykgICAvLyA9PiByZXRyaWV2ZXMgb2JqWyduYW1lJ11cbiAqICAgIGFjY2Vzc29yKGRhdGEsIGZ1bmMpICAgIC8vID0+IHJldHJpZXZlcyBmdW5jKGRhdGEpXG4gKiAgICAuLi4gb3RoZXJ3aXNlIG51bGxcbiAqL1xuZnVuY3Rpb24gYWNjZXNzb3IoZGF0YSwgZmllbGQpIHtcbiAgdmFyIHZhbHVlID0gbnVsbDtcbiAgaWYgKHR5cGVvZiBmaWVsZCA9PT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSBmaWVsZChkYXRhKTtlbHNlIGlmICh0eXBlb2YgZmllbGQgPT09ICdzdHJpbmcnICYmICgwLCBfdHlwZW9mMi5kZWZhdWx0KShkYXRhKSA9PT0gJ29iamVjdCcgJiYgZGF0YSAhPSBudWxsICYmIGZpZWxkIGluIGRhdGEpIHZhbHVlID0gZGF0YVtmaWVsZF07XG4gIHJldHVybiB2YWx1ZTtcbn1cbnZhciB3cmFwQWNjZXNzb3IgPSBleHBvcnRzLndyYXBBY2Nlc3NvciA9IGZ1bmN0aW9uIHdyYXBBY2Nlc3NvcihhY2MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIGFjY2Vzc29yKGRhdGEsIGFjYyk7XG4gIH07XG59OyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImRlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFjY2Vzc29yIiwid3JhcEFjY2Vzc29yIiwiX3R5cGVvZjIiLCJkYXRhIiwiZmllbGQiLCJhY2MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/utils/accessors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/utils/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/utils/constants.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.views = exports.navigate = void 0;\nvar navigate = exports.navigate = {\n    PREVIOUS: \"PREV\",\n    NEXT: \"NEXT\",\n    TODAY: \"TODAY\",\n    DATE: \"DATE\"\n};\nvar views = exports.views = {\n    MONTH: \"month\",\n    WEEK: \"week\",\n    WORK_WEEK: \"work_week\",\n    DAY: \"day\",\n    AGENDA: \"agenda\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGFBQWEsR0FBR0EsZ0JBQWdCLEdBQUcsS0FBSztBQUN4QyxJQUFJRyxXQUFXSCxnQkFBZ0IsR0FBRztJQUNoQ0ksVUFBVTtJQUNWQyxNQUFNO0lBQ05DLE9BQU87SUFDUEMsTUFBTTtBQUNSO0FBQ0EsSUFBSUwsUUFBUUYsYUFBYSxHQUFHO0lBQzFCUSxPQUFPO0lBQ1BDLE1BQU07SUFDTkMsV0FBVztJQUNYQyxLQUFLO0lBQ0xDLFFBQVE7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL2FyYmVpdHNwbGFuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJpZy1jYWxlbmRhci9saWIvdXRpbHMvY29uc3RhbnRzLmpzPzBiYmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnZpZXdzID0gZXhwb3J0cy5uYXZpZ2F0ZSA9IHZvaWQgMDtcbnZhciBuYXZpZ2F0ZSA9IGV4cG9ydHMubmF2aWdhdGUgPSB7XG4gIFBSRVZJT1VTOiAnUFJFVicsXG4gIE5FWFQ6ICdORVhUJyxcbiAgVE9EQVk6ICdUT0RBWScsXG4gIERBVEU6ICdEQVRFJ1xufTtcbnZhciB2aWV3cyA9IGV4cG9ydHMudmlld3MgPSB7XG4gIE1PTlRIOiAnbW9udGgnLFxuICBXRUVLOiAnd2VlaycsXG4gIFdPUktfV0VFSzogJ3dvcmtfd2VlaycsXG4gIERBWTogJ2RheScsXG4gIEFHRU5EQTogJ2FnZW5kYSdcbn07Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmlld3MiLCJuYXZpZ2F0ZSIsIlBSRVZJT1VTIiwiTkVYVCIsIlRPREFZIiwiREFURSIsIk1PTlRIIiwiV0VFSyIsIldPUktfV0VFSyIsIkRBWSIsIkFHRU5EQSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/utils/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/utils/eventLevels.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/utils/eventLevels.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.endOfRange = endOfRange;\nexports.eventLevels = eventLevels;\nexports.eventSegments = eventSegments;\nexports.inRange = inRange;\nexports.segsOverlap = segsOverlap;\nexports.sortEvents = sortEvents;\nexports.sortWeekEvents = sortWeekEvents;\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _findIndex = _interopRequireDefault(__webpack_require__(/*! lodash/findIndex */ \"(ssr)/./node_modules/lodash/findIndex.js\"));\nfunction endOfRange(_ref) {\n    var dateRange = _ref.dateRange, _ref$unit = _ref.unit, unit = _ref$unit === void 0 ? \"day\" : _ref$unit, localizer = _ref.localizer;\n    return {\n        first: dateRange[0],\n        last: localizer.add(dateRange[dateRange.length - 1], 1, unit)\n    };\n}\n// properly calculating segments requires working with dates in\n// the timezone we're working with, so we use the localizer\nfunction eventSegments(event, range, accessors, localizer) {\n    var _endOfRange = endOfRange({\n        dateRange: range,\n        localizer: localizer\n    }), first = _endOfRange.first, last = _endOfRange.last;\n    var slots = localizer.diff(first, last, \"day\");\n    var start = localizer.max(localizer.startOf(accessors.start(event), \"day\"), first);\n    var end = localizer.min(localizer.ceil(accessors.end(event), \"day\"), last);\n    var padding = (0, _findIndex.default)(range, function(x) {\n        return localizer.isSameDate(x, start);\n    });\n    var span = localizer.diff(start, end, \"day\");\n    span = Math.min(span, slots);\n    // The segmentOffset is necessary when adjusting for timezones\n    // ahead of the browser timezone\n    span = Math.max(span - localizer.segmentOffset, 1);\n    return {\n        event: event,\n        span: span,\n        left: padding + 1,\n        right: Math.max(padding + span, 1)\n    };\n}\nfunction eventLevels(rowSegments) {\n    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    var i, j, seg, levels = [], extra = [];\n    for(i = 0; i < rowSegments.length; i++){\n        seg = rowSegments[i];\n        for(j = 0; j < levels.length; j++)if (!segsOverlap(seg, levels[j])) break;\n        if (j >= limit) {\n            extra.push(seg);\n        } else {\n            ;\n            (levels[j] || (levels[j] = [])).push(seg);\n        }\n    }\n    for(i = 0; i < levels.length; i++){\n        levels[i].sort(function(a, b) {\n            return a.left - b.left;\n        }); //eslint-disable-line\n    }\n    return {\n        levels: levels,\n        extra: extra\n    };\n}\nfunction inRange(e, start, end, accessors, localizer) {\n    var event = {\n        start: accessors.start(e),\n        end: accessors.end(e)\n    };\n    var range = {\n        start: start,\n        end: end\n    };\n    return localizer.inEventRange({\n        event: event,\n        range: range\n    });\n}\nfunction segsOverlap(seg, otherSegs) {\n    return otherSegs.some(function(otherSeg) {\n        return otherSeg.left <= seg.right && otherSeg.right >= seg.left;\n    });\n}\nfunction sortWeekEvents(events, accessors, localizer) {\n    var base = (0, _toConsumableArray2.default)(events);\n    var multiDayEvents = [];\n    var standardEvents = [];\n    base.forEach(function(event) {\n        var startCheck = accessors.start(event);\n        var endCheck = accessors.end(event);\n        if (localizer.daySpan(startCheck, endCheck) > 1) {\n            multiDayEvents.push(event);\n        } else {\n            standardEvents.push(event);\n        }\n    });\n    var multiSorted = multiDayEvents.sort(function(a, b) {\n        return sortEvents(a, b, accessors, localizer);\n    });\n    var standardSorted = standardEvents.sort(function(a, b) {\n        return sortEvents(a, b, accessors, localizer);\n    });\n    return [].concat((0, _toConsumableArray2.default)(multiSorted), (0, _toConsumableArray2.default)(standardSorted));\n}\nfunction sortEvents(eventA, eventB, accessors, localizer) {\n    var evtA = {\n        start: accessors.start(eventA),\n        end: accessors.end(eventA),\n        allDay: accessors.allDay(eventA)\n    };\n    var evtB = {\n        start: accessors.start(eventB),\n        end: accessors.end(eventB),\n        allDay: accessors.allDay(eventB)\n    };\n    return localizer.sortEvents({\n        evtA: evtA,\n        evtB: evtB\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/utils/eventLevels.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/utils/propTypes.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/utils/propTypes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.views = exports.dateRangeFormat = exports.dateFormat = exports.accessor = exports.DayLayoutAlgorithmPropType = void 0;\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/react-big-calendar/lib/utils/constants.js\");\nvar viewNames = Object.keys(_constants.views).map(function(k) {\n    return _constants.views[k];\n});\nvar accessor = exports.accessor = _propTypes.default.oneOfType([\n    _propTypes.default.string,\n    _propTypes.default.func\n]);\nvar dateFormat = exports.dateFormat = _propTypes.default.any;\nvar dateRangeFormat = exports.dateRangeFormat = _propTypes.default.func;\n/**\n * accepts either an array of builtin view names:\n *\n * ```\n * views={['month', 'day', 'agenda']}\n * ```\n *\n * or an object hash of the view name and the component (or boolean for builtin)\n *\n * ```\n * views={{\n *   month: true,\n *   week: false,\n *   workweek: WorkWeekViewComponent,\n * }}\n * ```\n */ var views = exports.views = _propTypes.default.oneOfType([\n    _propTypes.default.arrayOf(_propTypes.default.oneOf(viewNames)),\n    _propTypes.default.objectOf(function(prop, key) {\n        var isBuiltinView = viewNames.indexOf(key) !== -1 && typeof prop[key] === \"boolean\";\n        if (isBuiltinView) {\n            return null;\n        } else {\n            for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n                args[_key - 2] = arguments[_key];\n            }\n            return _propTypes.default.elementType.apply(_propTypes.default, [\n                prop,\n                key\n            ].concat(args));\n        }\n    })\n]);\nvar DayLayoutAlgorithmPropType = exports.DayLayoutAlgorithmPropType = _propTypes.default.oneOfType([\n    _propTypes.default.oneOf([\n        \"overlap\",\n        \"no-overlap\"\n    ]),\n    _propTypes.default.func\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9wcm9wVHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSx5QkFBeUJDLDRKQUErRDtBQUM1RkUsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGFBQWEsR0FBR0EsdUJBQXVCLEdBQUdBLGtCQUFrQixHQUFHQSxnQkFBZ0IsR0FBR0Esa0NBQWtDLEdBQUcsS0FBSztBQUM1SCxJQUFJTyxhQUFhWix1QkFBdUJDLG1CQUFPQSxDQUFDLDREQUFZO0FBQzVELElBQUlZLGFBQWFaLG1CQUFPQSxDQUFDLG1GQUFhO0FBQ3RDLElBQUlhLFlBQVlYLE9BQU9ZLElBQUksQ0FBQ0YsV0FBV04sS0FBSyxFQUFFUyxHQUFHLENBQUMsU0FBVUMsQ0FBQztJQUMzRCxPQUFPSixXQUFXTixLQUFLLENBQUNVLEVBQUU7QUFDNUI7QUFDQSxJQUFJUCxXQUFXTCxnQkFBZ0IsR0FBR08sV0FBV1YsT0FBTyxDQUFDZ0IsU0FBUyxDQUFDO0lBQUNOLFdBQVdWLE9BQU8sQ0FBQ2lCLE1BQU07SUFBRVAsV0FBV1YsT0FBTyxDQUFDa0IsSUFBSTtDQUFDO0FBQ25ILElBQUlYLGFBQWFKLGtCQUFrQixHQUFHTyxXQUFXVixPQUFPLENBQUNtQixHQUFHO0FBQzVELElBQUliLGtCQUFrQkgsdUJBQXVCLEdBQUdPLFdBQVdWLE9BQU8sQ0FBQ2tCLElBQUk7QUFFdkU7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FFRCxJQUFJYixRQUFRRixhQUFhLEdBQUdPLFdBQVdWLE9BQU8sQ0FBQ2dCLFNBQVMsQ0FBQztJQUFDTixXQUFXVixPQUFPLENBQUNvQixPQUFPLENBQUNWLFdBQVdWLE9BQU8sQ0FBQ3FCLEtBQUssQ0FBQ1Q7SUFBYUYsV0FBV1YsT0FBTyxDQUFDc0IsUUFBUSxDQUFDLFNBQVVDLElBQUksRUFBRUMsR0FBRztRQUN4SyxJQUFJQyxnQkFBZ0JiLFVBQVVjLE9BQU8sQ0FBQ0YsU0FBUyxDQUFDLEtBQUssT0FBT0QsSUFBSSxDQUFDQyxJQUFJLEtBQUs7UUFDMUUsSUFBSUMsZUFBZTtZQUNqQixPQUFPO1FBQ1QsT0FBTztZQUNMLElBQUssSUFBSUUsT0FBT0MsVUFBVUMsTUFBTSxFQUFFQyxPQUFPLElBQUlDLE1BQU1KLE9BQU8sSUFBSUEsT0FBTyxJQUFJLElBQUlLLE9BQU8sR0FBR0EsT0FBT0wsTUFBTUssT0FBUTtnQkFDMUdGLElBQUksQ0FBQ0UsT0FBTyxFQUFFLEdBQUdKLFNBQVMsQ0FBQ0ksS0FBSztZQUNsQztZQUNBLE9BQU90QixXQUFXVixPQUFPLENBQUNpQyxXQUFXLENBQUNDLEtBQUssQ0FBQ3hCLFdBQVdWLE9BQU8sRUFBRTtnQkFBQ3VCO2dCQUFNQzthQUFJLENBQUNXLE1BQU0sQ0FBQ0w7UUFDckY7SUFDRjtDQUFHO0FBQ0gsSUFBSXJCLDZCQUE2Qk4sa0NBQWtDLEdBQUdPLFdBQVdWLE9BQU8sQ0FBQ2dCLFNBQVMsQ0FBQztJQUFDTixXQUFXVixPQUFPLENBQUNxQixLQUFLLENBQUM7UUFBQztRQUFXO0tBQWE7SUFBR1gsV0FBV1YsT0FBTyxDQUFDa0IsSUFBSTtDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJiZWl0c3BsYW4vLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9wcm9wVHlwZXMuanM/MmFlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnZpZXdzID0gZXhwb3J0cy5kYXRlUmFuZ2VGb3JtYXQgPSBleHBvcnRzLmRhdGVGb3JtYXQgPSBleHBvcnRzLmFjY2Vzc29yID0gZXhwb3J0cy5EYXlMYXlvdXRBbGdvcml0aG1Qcm9wVHlwZSA9IHZvaWQgMDtcbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbnZhciB2aWV3TmFtZXMgPSBPYmplY3Qua2V5cyhfY29uc3RhbnRzLnZpZXdzKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgcmV0dXJuIF9jb25zdGFudHMudmlld3Nba107XG59KTtcbnZhciBhY2Nlc3NvciA9IGV4cG9ydHMuYWNjZXNzb3IgPSBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pO1xudmFyIGRhdGVGb3JtYXQgPSBleHBvcnRzLmRhdGVGb3JtYXQgPSBfcHJvcFR5cGVzLmRlZmF1bHQuYW55O1xudmFyIGRhdGVSYW5nZUZvcm1hdCA9IGV4cG9ydHMuZGF0ZVJhbmdlRm9ybWF0ID0gX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmM7XG5cbi8qKlxuICogYWNjZXB0cyBlaXRoZXIgYW4gYXJyYXkgb2YgYnVpbHRpbiB2aWV3IG5hbWVzOlxuICpcbiAqIGBgYFxuICogdmlld3M9e1snbW9udGgnLCAnZGF5JywgJ2FnZW5kYSddfVxuICogYGBgXG4gKlxuICogb3IgYW4gb2JqZWN0IGhhc2ggb2YgdGhlIHZpZXcgbmFtZSBhbmQgdGhlIGNvbXBvbmVudCAob3IgYm9vbGVhbiBmb3IgYnVpbHRpbilcbiAqXG4gKiBgYGBcbiAqIHZpZXdzPXt7XG4gKiAgIG1vbnRoOiB0cnVlLFxuICogICB3ZWVrOiBmYWxzZSxcbiAqICAgd29ya3dlZWs6IFdvcmtXZWVrVmlld0NvbXBvbmVudCxcbiAqIH19XG4gKiBgYGBcbiAqL1xuXG52YXIgdmlld3MgPSBleHBvcnRzLnZpZXdzID0gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKHZpZXdOYW1lcykpLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0T2YoZnVuY3Rpb24gKHByb3AsIGtleSkge1xuICB2YXIgaXNCdWlsdGluVmlldyA9IHZpZXdOYW1lcy5pbmRleE9mKGtleSkgIT09IC0xICYmIHR5cGVvZiBwcm9wW2tleV0gPT09ICdib29sZWFuJztcbiAgaWYgKGlzQnVpbHRpblZpZXcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50VHlwZS5hcHBseShfcHJvcFR5cGVzLmRlZmF1bHQsIFtwcm9wLCBrZXldLmNvbmNhdChhcmdzKSk7XG4gIH1cbn0pXSk7XG52YXIgRGF5TGF5b3V0QWxnb3JpdGhtUHJvcFR5cGUgPSBleHBvcnRzLkRheUxheW91dEFsZ29yaXRobVByb3BUeXBlID0gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnb3ZlcmxhcCcsICduby1vdmVybGFwJ10pLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pOyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImRlZmF1bHQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZpZXdzIiwiZGF0ZVJhbmdlRm9ybWF0IiwiZGF0ZUZvcm1hdCIsImFjY2Vzc29yIiwiRGF5TGF5b3V0QWxnb3JpdGhtUHJvcFR5cGUiLCJfcHJvcFR5cGVzIiwiX2NvbnN0YW50cyIsInZpZXdOYW1lcyIsImtleXMiLCJtYXAiLCJrIiwib25lT2ZUeXBlIiwic3RyaW5nIiwiZnVuYyIsImFueSIsImFycmF5T2YiLCJvbmVPZiIsIm9iamVjdE9mIiwicHJvcCIsImtleSIsImlzQnVpbHRpblZpZXciLCJpbmRleE9mIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJlbGVtZW50VHlwZSIsImFwcGx5IiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/utils/propTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/utils/selection.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/utils/selection.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = (__webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"(ssr)/./node_modules/@babel/runtime/helpers/interopRequireDefault.js\")[\"default\"]);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dateCellSelection = dateCellSelection;\nexports.getSlotAtX = getSlotAtX;\nexports.isSelected = isSelected;\nexports.pointInBox = pointInBox;\nexports.slotWidth = slotWidth;\nvar _isEqual = _interopRequireDefault(__webpack_require__(/*! lodash/isEqual */ \"(ssr)/./node_modules/lodash/isEqual.js\"));\nfunction isSelected(event, selected) {\n    if (!event || selected == null) return false;\n    return (0, _isEqual.default)(event, selected);\n}\nfunction slotWidth(rowBox, slots) {\n    var rowWidth = rowBox.right - rowBox.left;\n    var cellWidth = rowWidth / slots;\n    return cellWidth;\n}\nfunction getSlotAtX(rowBox, x, rtl, slots) {\n    var cellWidth = slotWidth(rowBox, slots);\n    return rtl ? slots - 1 - Math.floor((x - rowBox.left) / cellWidth) : Math.floor((x - rowBox.left) / cellWidth);\n}\nfunction pointInBox(box, _ref) {\n    var x = _ref.x, y = _ref.y;\n    return y >= box.top && y <= box.bottom && x >= box.left && x <= box.right;\n}\nfunction dateCellSelection(start, rowBox, box, slots, rtl) {\n    var startIdx = -1;\n    var endIdx = -1;\n    var lastSlotIdx = slots - 1;\n    var cellWidth = slotWidth(rowBox, slots);\n    // cell under the mouse\n    var currentSlot = getSlotAtX(rowBox, box.x, rtl, slots);\n    // Identify row as either the initial row\n    // or the row under the current mouse point\n    var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y;\n    var isStartRow = rowBox.top < start.y && rowBox.bottom > start.y;\n    // this row's position relative to the start point\n    var isAboveStart = start.y > rowBox.bottom;\n    var isBelowStart = rowBox.top > start.y;\n    var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom;\n    // this row is between the current and start rows, so entirely selected\n    if (isBetween) {\n        startIdx = 0;\n        endIdx = lastSlotIdx;\n    }\n    if (isCurrentRow) {\n        if (isBelowStart) {\n            startIdx = 0;\n            endIdx = currentSlot;\n        } else if (isAboveStart) {\n            startIdx = currentSlot;\n            endIdx = lastSlotIdx;\n        }\n    }\n    if (isStartRow) {\n        // select the cell under the initial point\n        startIdx = endIdx = rtl ? lastSlotIdx - Math.floor((start.x - rowBox.left) / cellWidth) : Math.floor((start.x - rowBox.left) / cellWidth);\n        if (isCurrentRow) {\n            if (currentSlot < startIdx) startIdx = currentSlot;\n            else endIdx = currentSlot; //select current range\n        } else if (start.y < box.y) {\n            // the current row is below start row\n            // select cells to the right of the start cell\n            endIdx = lastSlotIdx;\n        } else {\n            // select cells to the left of the start cell\n            startIdx = 0;\n        }\n    }\n    return {\n        startIdx: startIdx,\n        endIdx: endIdx\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9zZWxlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSx5QkFBeUJDLDRKQUErRDtBQUM1RkUsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHlCQUF5QixHQUFHRTtBQUM1QkYsa0JBQWtCLEdBQUdHO0FBQ3JCSCxrQkFBa0IsR0FBR0k7QUFDckJKLGtCQUFrQixHQUFHSztBQUNyQkwsaUJBQWlCLEdBQUdNO0FBQ3BCLElBQUlDLFdBQVdaLHVCQUF1QkMsbUJBQU9BLENBQUMsOERBQWdCO0FBQzlELFNBQVNRLFdBQVdJLEtBQUssRUFBRUMsUUFBUTtJQUNqQyxJQUFJLENBQUNELFNBQVNDLFlBQVksTUFBTSxPQUFPO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHRixTQUFTVixPQUFPLEVBQUVXLE9BQU9DO0FBQ3RDO0FBQ0EsU0FBU0gsVUFBVUksTUFBTSxFQUFFQyxLQUFLO0lBQzlCLElBQUlDLFdBQVdGLE9BQU9HLEtBQUssR0FBR0gsT0FBT0ksSUFBSTtJQUN6QyxJQUFJQyxZQUFZSCxXQUFXRDtJQUMzQixPQUFPSTtBQUNUO0FBQ0EsU0FBU1osV0FBV08sTUFBTSxFQUFFTSxDQUFDLEVBQUVDLEdBQUcsRUFBRU4sS0FBSztJQUN2QyxJQUFJSSxZQUFZVCxVQUFVSSxRQUFRQztJQUNsQyxPQUFPTSxNQUFNTixRQUFRLElBQUlPLEtBQUtDLEtBQUssQ0FBQyxDQUFDSCxJQUFJTixPQUFPSSxJQUFJLElBQUlDLGFBQWFHLEtBQUtDLEtBQUssQ0FBQyxDQUFDSCxJQUFJTixPQUFPSSxJQUFJLElBQUlDO0FBQ3RHO0FBQ0EsU0FBU1YsV0FBV2UsR0FBRyxFQUFFQyxJQUFJO0lBQzNCLElBQUlMLElBQUlLLEtBQUtMLENBQUMsRUFDWk0sSUFBSUQsS0FBS0MsQ0FBQztJQUNaLE9BQU9BLEtBQUtGLElBQUlHLEdBQUcsSUFBSUQsS0FBS0YsSUFBSUksTUFBTSxJQUFJUixLQUFLSSxJQUFJTixJQUFJLElBQUlFLEtBQUtJLElBQUlQLEtBQUs7QUFDM0U7QUFDQSxTQUFTWCxrQkFBa0J1QixLQUFLLEVBQUVmLE1BQU0sRUFBRVUsR0FBRyxFQUFFVCxLQUFLLEVBQUVNLEdBQUc7SUFDdkQsSUFBSVMsV0FBVyxDQUFDO0lBQ2hCLElBQUlDLFNBQVMsQ0FBQztJQUNkLElBQUlDLGNBQWNqQixRQUFRO0lBQzFCLElBQUlJLFlBQVlULFVBQVVJLFFBQVFDO0lBRWxDLHVCQUF1QjtJQUN2QixJQUFJa0IsY0FBYzFCLFdBQVdPLFFBQVFVLElBQUlKLENBQUMsRUFBRUMsS0FBS047SUFFakQseUNBQXlDO0lBQ3pDLDJDQUEyQztJQUMzQyxJQUFJbUIsZUFBZXBCLE9BQU9hLEdBQUcsR0FBR0gsSUFBSUUsQ0FBQyxJQUFJWixPQUFPYyxNQUFNLEdBQUdKLElBQUlFLENBQUM7SUFDOUQsSUFBSVMsYUFBYXJCLE9BQU9hLEdBQUcsR0FBR0UsTUFBTUgsQ0FBQyxJQUFJWixPQUFPYyxNQUFNLEdBQUdDLE1BQU1ILENBQUM7SUFFaEUsa0RBQWtEO0lBQ2xELElBQUlVLGVBQWVQLE1BQU1ILENBQUMsR0FBR1osT0FBT2MsTUFBTTtJQUMxQyxJQUFJUyxlQUFldkIsT0FBT2EsR0FBRyxHQUFHRSxNQUFNSCxDQUFDO0lBQ3ZDLElBQUlZLFlBQVlkLElBQUlHLEdBQUcsR0FBR2IsT0FBT2EsR0FBRyxJQUFJSCxJQUFJSSxNQUFNLEdBQUdkLE9BQU9jLE1BQU07SUFFbEUsdUVBQXVFO0lBQ3ZFLElBQUlVLFdBQVc7UUFDYlIsV0FBVztRQUNYQyxTQUFTQztJQUNYO0lBQ0EsSUFBSUUsY0FBYztRQUNoQixJQUFJRyxjQUFjO1lBQ2hCUCxXQUFXO1lBQ1hDLFNBQVNFO1FBQ1gsT0FBTyxJQUFJRyxjQUFjO1lBQ3ZCTixXQUFXRztZQUNYRixTQUFTQztRQUNYO0lBQ0Y7SUFDQSxJQUFJRyxZQUFZO1FBQ2QsMENBQTBDO1FBQzFDTCxXQUFXQyxTQUFTVixNQUFNVyxjQUFjVixLQUFLQyxLQUFLLENBQUMsQ0FBQ00sTUFBTVQsQ0FBQyxHQUFHTixPQUFPSSxJQUFJLElBQUlDLGFBQWFHLEtBQUtDLEtBQUssQ0FBQyxDQUFDTSxNQUFNVCxDQUFDLEdBQUdOLE9BQU9JLElBQUksSUFBSUM7UUFDL0gsSUFBSWUsY0FBYztZQUNoQixJQUFJRCxjQUFjSCxVQUFVQSxXQUFXRztpQkFBaUJGLFNBQVNFLGFBQWEsc0JBQXNCO1FBQ3RHLE9BQU8sSUFBSUosTUFBTUgsQ0FBQyxHQUFHRixJQUFJRSxDQUFDLEVBQUU7WUFDMUIscUNBQXFDO1lBQ3JDLDhDQUE4QztZQUM5Q0ssU0FBU0M7UUFDWCxPQUFPO1lBQ0wsNkNBQTZDO1lBQzdDRixXQUFXO1FBQ2I7SUFDRjtJQUNBLE9BQU87UUFDTEEsVUFBVUE7UUFDVkMsUUFBUUE7SUFDVjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJiZWl0c3BsYW4vLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi91dGlscy9zZWxlY3Rpb24uanM/YjZiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIikuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRhdGVDZWxsU2VsZWN0aW9uID0gZGF0ZUNlbGxTZWxlY3Rpb247XG5leHBvcnRzLmdldFNsb3RBdFggPSBnZXRTbG90QXRYO1xuZXhwb3J0cy5pc1NlbGVjdGVkID0gaXNTZWxlY3RlZDtcbmV4cG9ydHMucG9pbnRJbkJveCA9IHBvaW50SW5Cb3g7XG5leHBvcnRzLnNsb3RXaWR0aCA9IHNsb3RXaWR0aDtcbnZhciBfaXNFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC9pc0VxdWFsXCIpKTtcbmZ1bmN0aW9uIGlzU2VsZWN0ZWQoZXZlbnQsIHNlbGVjdGVkKSB7XG4gIGlmICghZXZlbnQgfHwgc2VsZWN0ZWQgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKDAsIF9pc0VxdWFsLmRlZmF1bHQpKGV2ZW50LCBzZWxlY3RlZCk7XG59XG5mdW5jdGlvbiBzbG90V2lkdGgocm93Qm94LCBzbG90cykge1xuICB2YXIgcm93V2lkdGggPSByb3dCb3gucmlnaHQgLSByb3dCb3gubGVmdDtcbiAgdmFyIGNlbGxXaWR0aCA9IHJvd1dpZHRoIC8gc2xvdHM7XG4gIHJldHVybiBjZWxsV2lkdGg7XG59XG5mdW5jdGlvbiBnZXRTbG90QXRYKHJvd0JveCwgeCwgcnRsLCBzbG90cykge1xuICB2YXIgY2VsbFdpZHRoID0gc2xvdFdpZHRoKHJvd0JveCwgc2xvdHMpO1xuICByZXR1cm4gcnRsID8gc2xvdHMgLSAxIC0gTWF0aC5mbG9vcigoeCAtIHJvd0JveC5sZWZ0KSAvIGNlbGxXaWR0aCkgOiBNYXRoLmZsb29yKCh4IC0gcm93Qm94LmxlZnQpIC8gY2VsbFdpZHRoKTtcbn1cbmZ1bmN0aW9uIHBvaW50SW5Cb3goYm94LCBfcmVmKSB7XG4gIHZhciB4ID0gX3JlZi54LFxuICAgIHkgPSBfcmVmLnk7XG4gIHJldHVybiB5ID49IGJveC50b3AgJiYgeSA8PSBib3guYm90dG9tICYmIHggPj0gYm94LmxlZnQgJiYgeCA8PSBib3gucmlnaHQ7XG59XG5mdW5jdGlvbiBkYXRlQ2VsbFNlbGVjdGlvbihzdGFydCwgcm93Qm94LCBib3gsIHNsb3RzLCBydGwpIHtcbiAgdmFyIHN0YXJ0SWR4ID0gLTE7XG4gIHZhciBlbmRJZHggPSAtMTtcbiAgdmFyIGxhc3RTbG90SWR4ID0gc2xvdHMgLSAxO1xuICB2YXIgY2VsbFdpZHRoID0gc2xvdFdpZHRoKHJvd0JveCwgc2xvdHMpO1xuXG4gIC8vIGNlbGwgdW5kZXIgdGhlIG1vdXNlXG4gIHZhciBjdXJyZW50U2xvdCA9IGdldFNsb3RBdFgocm93Qm94LCBib3gueCwgcnRsLCBzbG90cyk7XG5cbiAgLy8gSWRlbnRpZnkgcm93IGFzIGVpdGhlciB0aGUgaW5pdGlhbCByb3dcbiAgLy8gb3IgdGhlIHJvdyB1bmRlciB0aGUgY3VycmVudCBtb3VzZSBwb2ludFxuICB2YXIgaXNDdXJyZW50Um93ID0gcm93Qm94LnRvcCA8IGJveC55ICYmIHJvd0JveC5ib3R0b20gPiBib3gueTtcbiAgdmFyIGlzU3RhcnRSb3cgPSByb3dCb3gudG9wIDwgc3RhcnQueSAmJiByb3dCb3guYm90dG9tID4gc3RhcnQueTtcblxuICAvLyB0aGlzIHJvdydzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBwb2ludFxuICB2YXIgaXNBYm92ZVN0YXJ0ID0gc3RhcnQueSA+IHJvd0JveC5ib3R0b207XG4gIHZhciBpc0JlbG93U3RhcnQgPSByb3dCb3gudG9wID4gc3RhcnQueTtcbiAgdmFyIGlzQmV0d2VlbiA9IGJveC50b3AgPCByb3dCb3gudG9wICYmIGJveC5ib3R0b20gPiByb3dCb3guYm90dG9tO1xuXG4gIC8vIHRoaXMgcm93IGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgYW5kIHN0YXJ0IHJvd3MsIHNvIGVudGlyZWx5IHNlbGVjdGVkXG4gIGlmIChpc0JldHdlZW4pIHtcbiAgICBzdGFydElkeCA9IDA7XG4gICAgZW5kSWR4ID0gbGFzdFNsb3RJZHg7XG4gIH1cbiAgaWYgKGlzQ3VycmVudFJvdykge1xuICAgIGlmIChpc0JlbG93U3RhcnQpIHtcbiAgICAgIHN0YXJ0SWR4ID0gMDtcbiAgICAgIGVuZElkeCA9IGN1cnJlbnRTbG90O1xuICAgIH0gZWxzZSBpZiAoaXNBYm92ZVN0YXJ0KSB7XG4gICAgICBzdGFydElkeCA9IGN1cnJlbnRTbG90O1xuICAgICAgZW5kSWR4ID0gbGFzdFNsb3RJZHg7XG4gICAgfVxuICB9XG4gIGlmIChpc1N0YXJ0Um93KSB7XG4gICAgLy8gc2VsZWN0IHRoZSBjZWxsIHVuZGVyIHRoZSBpbml0aWFsIHBvaW50XG4gICAgc3RhcnRJZHggPSBlbmRJZHggPSBydGwgPyBsYXN0U2xvdElkeCAtIE1hdGguZmxvb3IoKHN0YXJ0LnggLSByb3dCb3gubGVmdCkgLyBjZWxsV2lkdGgpIDogTWF0aC5mbG9vcigoc3RhcnQueCAtIHJvd0JveC5sZWZ0KSAvIGNlbGxXaWR0aCk7XG4gICAgaWYgKGlzQ3VycmVudFJvdykge1xuICAgICAgaWYgKGN1cnJlbnRTbG90IDwgc3RhcnRJZHgpIHN0YXJ0SWR4ID0gY3VycmVudFNsb3Q7ZWxzZSBlbmRJZHggPSBjdXJyZW50U2xvdDsgLy9zZWxlY3QgY3VycmVudCByYW5nZVxuICAgIH0gZWxzZSBpZiAoc3RhcnQueSA8IGJveC55KSB7XG4gICAgICAvLyB0aGUgY3VycmVudCByb3cgaXMgYmVsb3cgc3RhcnQgcm93XG4gICAgICAvLyBzZWxlY3QgY2VsbHMgdG8gdGhlIHJpZ2h0IG9mIHRoZSBzdGFydCBjZWxsXG4gICAgICBlbmRJZHggPSBsYXN0U2xvdElkeDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2VsZWN0IGNlbGxzIHRvIHRoZSBsZWZ0IG9mIHRoZSBzdGFydCBjZWxsXG4gICAgICBzdGFydElkeCA9IDA7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgc3RhcnRJZHg6IHN0YXJ0SWR4LFxuICAgIGVuZElkeDogZW5kSWR4XG4gIH07XG59Il0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGF0ZUNlbGxTZWxlY3Rpb24iLCJnZXRTbG90QXRYIiwiaXNTZWxlY3RlZCIsInBvaW50SW5Cb3giLCJzbG90V2lkdGgiLCJfaXNFcXVhbCIsImV2ZW50Iiwic2VsZWN0ZWQiLCJyb3dCb3giLCJzbG90cyIsInJvd1dpZHRoIiwicmlnaHQiLCJsZWZ0IiwiY2VsbFdpZHRoIiwieCIsInJ0bCIsIk1hdGgiLCJmbG9vciIsImJveCIsIl9yZWYiLCJ5IiwidG9wIiwiYm90dG9tIiwic3RhcnQiLCJzdGFydElkeCIsImVuZElkeCIsImxhc3RTbG90SWR4IiwiY3VycmVudFNsb3QiLCJpc0N1cnJlbnRSb3ciLCJpc1N0YXJ0Um93IiwiaXNBYm92ZVN0YXJ0IiwiaXNCZWxvd1N0YXJ0IiwiaXNCZXR3ZWVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/utils/selection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: () => (/* binding */ clsx),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction r(e) {\n    var t, f, n = \"\";\n    if (\"string\" == typeof e || \"number\" == typeof e) n += e;\n    else if (\"object\" == typeof e) if (Array.isArray(e)) for(t = 0; t < e.length; t++)e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n    else for(t in e)e[t] && (n && (n += \" \"), n += t);\n    return n;\n}\nfunction clsx() {\n    for(var e, t, f = 0, n = \"\"; f < arguments.length;)(e = arguments[f++]) && (t = r(e)) && (n && (n += \" \"), n += t);\n    return n;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clsx);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsRUFBRUMsQ0FBQztJQUFFLElBQUlDLEdBQUVDLEdBQUVDLElBQUU7SUFBRyxJQUFHLFlBQVUsT0FBT0gsS0FBRyxZQUFVLE9BQU9BLEdBQUVHLEtBQUdIO1NBQU8sSUFBRyxZQUFVLE9BQU9BLEdBQUUsSUFBR0ksTUFBTUMsT0FBTyxDQUFDTCxJQUFHLElBQUlDLElBQUUsR0FBRUEsSUFBRUQsRUFBRU0sTUFBTSxFQUFDTCxJQUFJRCxDQUFDLENBQUNDLEVBQUUsSUFBR0MsQ0FBQUEsSUFBRUgsRUFBRUMsQ0FBQyxDQUFDQyxFQUFFLE1BQUtFLENBQUFBLEtBQUlBLENBQUFBLEtBQUcsR0FBRSxHQUFHQSxLQUFHRCxDQUFBQTtTQUFRLElBQUlELEtBQUtELEVBQUVBLENBQUMsQ0FBQ0MsRUFBRSxJQUFHRSxDQUFBQSxLQUFJQSxDQUFBQSxLQUFHLEdBQUUsR0FBR0EsS0FBR0YsQ0FBQUE7SUFBRyxPQUFPRTtBQUFDO0FBQVEsU0FBU0k7SUFBTyxJQUFJLElBQUlQLEdBQUVDLEdBQUVDLElBQUUsR0FBRUMsSUFBRSxJQUFHRCxJQUFFTSxVQUFVRixNQUFNLEVBQUUsQ0FBQ04sSUFBRVEsU0FBUyxDQUFDTixJQUFJLEtBQUlELENBQUFBLElBQUVGLEVBQUVDLEVBQUMsS0FBS0csQ0FBQUEsS0FBSUEsQ0FBQUEsS0FBRyxHQUFFLEdBQUdBLEtBQUdGLENBQUFBO0lBQUcsT0FBT0U7QUFBQztBQUFDLGlFQUFlSSxJQUFJQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXJiZWl0c3BsYW4vLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzP2ZlMDEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcihlKXt2YXIgdCxmLG49XCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGUpbis9ZTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdJiYoZj1yKGVbdF0pKSYmKG4mJihuKz1cIiBcIiksbis9Zik7ZWxzZSBmb3IodCBpbiBlKWVbdF0mJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBmdW5jdGlvbiBjbHN4KCl7Zm9yKHZhciBlLHQsZj0wLG49XCJcIjtmPGFyZ3VtZW50cy5sZW5ndGg7KShlPWFyZ3VtZW50c1tmKytdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7Il0sIm5hbWVzIjpbInIiLCJlIiwidCIsImYiLCJuIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiY2xzeCIsImFyZ3VtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/node_modules/clsx/dist/clsx.m.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/styles.css":
/*!***************************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/addons/dragAndDrop/styles.css ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"605ee0761067\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9hZGRvbnMvZHJhZ0FuZERyb3Avc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FyYmVpdHNwbGFuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJpZy1jYWxlbmRhci9saWIvYWRkb25zL2RyYWdBbmREcm9wL3N0eWxlcy5jc3M/ZWViMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjYwNWVlMDc2MTA2N1wiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/addons/dragAndDrop/styles.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-big-calendar/lib/css/react-big-calendar.css":
/*!************************************************************************!*\
  !*** ./node_modules/react-big-calendar/lib/css/react-big-calendar.css ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"86bfc4353a48\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmlnLWNhbGVuZGFyL2xpYi9jc3MvcmVhY3QtYmlnLWNhbGVuZGFyLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FyYmVpdHNwbGFuLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJpZy1jYWxlbmRhci9saWIvY3NzL3JlYWN0LWJpZy1jYWxlbmRhci5jc3M/NWExNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjg2YmZjNDM1M2E0OFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-big-calendar/lib/css/react-big-calendar.css\n");

/***/ })

};
;