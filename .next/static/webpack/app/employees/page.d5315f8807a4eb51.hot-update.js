"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/employees/page",{

/***/ "(app-pages-browser)/./src/lib/db.ts":
/*!***********************!*\
  !*** ./src/lib/db.ts ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dbService: function() { return /* binding */ dbService; }\n/* harmony export */ });\nlet dbData = null;\nasync function readDb() {\n    if (!dbData) {\n        const response = await fetch(\"/api/db\");\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch database\");\n        }\n        dbData = await response.json();\n    }\n    return dbData;\n}\nasync function writeDb(data) {\n    const response = await fetch(\"/api/db\", {\n        method: \"PUT\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to write to database\");\n    }\n    dbData = data;\n}\nconst dbService = {\n    // Store operations\n    getAllStores: async ()=>{\n        const db = await readDb();\n        return db.stores;\n    },\n    getStore: async (id)=>{\n        const db = await readDb();\n        return db.stores.find((store)=>store.id === id);\n    },\n    addStore: async (store)=>{\n        const db = await readDb();\n        // Generate new ID\n        const newId = db.stores.length > 0 ? Math.max(...db.stores.map((s)=>s.id)) + 1 : 1;\n        const newStore = {\n            id: newId,\n            ...store\n        };\n        db.stores.push(newStore);\n        await writeDb(db);\n        return newId;\n    },\n    updateStore: async (id, store)=>{\n        const db = await readDb();\n        const index = db.stores.findIndex((store)=>store.id === id);\n        if (index === -1) {\n            throw new Error(\"Store not found\");\n        }\n        db.stores[index] = {\n            ...db.stores[index],\n            ...store\n        };\n        await writeDb(db);\n    },\n    deleteStore: async (id)=>{\n        const db = await readDb();\n        const index = db.stores.findIndex((store)=>store.id === id);\n        if (index === -1) {\n            throw new Error(\"Store not found\");\n        }\n        db.stores.splice(index, 1);\n        await writeDb(db);\n    },\n    // Employee operations\n    getAllEmployees: async ()=>{\n        const db = await readDb();\n        return db.employees;\n    },\n    getEmployee: async (id)=>{\n        const db = await readDb();\n        return db.employees.find((employee)=>employee.id === id);\n    },\n    addEmployee: async (employee)=>{\n        const db = await readDb();\n        // Generate new ID\n        const newId = db.employees.length > 0 ? Math.max(...db.employees.map((e)=>e.id)) + 1 : 1;\n        const newEmployee = {\n            id: newId,\n            ...employee\n        };\n        db.employees.push(newEmployee);\n        await writeDb(db);\n        return newId;\n    },\n    updateEmployee: async (id, employee)=>{\n        const db = await readDb();\n        const index = db.employees.findIndex((employee)=>employee.id === id);\n        if (index === -1) {\n            throw new Error(\"Employee not found\");\n        }\n        db.employees[index] = {\n            ...db.employees[index],\n            ...employee\n        };\n        await writeDb(db);\n    },\n    deleteEmployee: async (id)=>{\n        const db = await readDb();\n        const index = db.employees.findIndex((employee)=>employee.id === id);\n        if (index === -1) {\n            throw new Error(\"Employee not found\");\n        }\n        db.employees.splice(index, 1);\n        await writeDb(db);\n    },\n    // Log operations\n    getLogEntries: async ()=>{\n        const db = await readDb();\n        return db.logs || [];\n    },\n    addLogEntry: async (action, details)=>{\n        const db = await readDb();\n        if (!db.logs) {\n            db.logs = [];\n        }\n        const newLog = {\n            id: Math.max(0, ...db.logs.map((log)=>log.id)) + 1,\n            action,\n            details,\n            timestamp: new Date().toISOString()\n        };\n        db.logs.push(newLog);\n        await writeDb(db);\n    },\n    // Shift operations\n    getShiftsByStore: async (storeId)=>{\n        console.log(\"Getting shifts for store:\", storeId);\n        const db = await readDb();\n        const shifts = db.shifts.filter((shift)=>shift.storeId === storeId);\n        console.log(\"Found shifts:\", shifts);\n        return shifts;\n    },\n    addShift: async (shiftData)=>{\n        console.log(\"Adding shift:\", shiftData);\n        const db = await readDb();\n        // Generate new ID\n        const newId = db.shifts.length > 0 ? Math.max(...db.shifts.map((s)=>s.id)) + 1 : 1;\n        const newShift = {\n            id: newId,\n            ...shiftData\n        };\n        console.log(\"Created new shift:\", newShift);\n        db.shifts.push(newShift);\n        await writeDb(db);\n        // Add log entry\n        await dbService.addLogEntry(\"Schicht erstellt\", \"Neue Schicht f\\xfcr \".concat(shiftData.employeeId, \" am \").concat(shiftData.date));\n        return newId;\n    },\n    updateShift: async (id, shiftData)=>{\n        const db = await readDb();\n        const index = db.shifts.findIndex((shift)=>shift.id === id);\n        if (index === -1) {\n            throw new Error(\"Shift not found\");\n        }\n        const oldShift = db.shifts[index];\n        const updatedShift = {\n            ...oldShift,\n            ...shiftData\n        };\n        db.shifts[index] = updatedShift;\n        await writeDb(db);\n        // Add log entry\n        await dbService.addLogEntry(\"Schicht aktualisiert\", \"Schicht \".concat(id, \" wurde aktualisiert\"));\n    },\n    deleteShift: async (id)=>{\n        const db = await readDb();\n        const index = db.shifts.findIndex((shift)=>shift.id === id);\n        if (index === -1) {\n            throw new Error(\"Shift not found\");\n        }\n        db.shifts.splice(index, 1);\n        await writeDb(db);\n        // Add log entry\n        await dbService.addLogEntry(\"Schicht gel\\xf6scht\", \"Schicht \".concat(id, \" wurde gel\\xf6scht\"));\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/db.ts\n"));

/***/ })

});